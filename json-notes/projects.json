# GitHoarder

Alt name: Gitshare

Android app to easily share links to a git repo, easier and better than emailing links to myself.

[Android shareability](https://developer.android.com/training/sharing/receive)

# Keymapping

* name ideas: teclado, accordo, keycritic

* key [Hacker's Corner: Complete Guide to Keylogging in Linux - Part 1 | L...](https://linuxsecurity.com/features/complete-guide-to-keylogging-in-linux-part-1)
* key [Hacker's Corner: Complete Guide to Keylogging in Linux - Part 2 | L...](https://linuxsecurity.com/features/complete-guide-to-keylogging-in-linux-part-2)
* key [Hacker's Corner: Complete Guide to Keylogging in Linux - Part 3 | L...](https://linuxsecurity.com/features/complete-guide-to-keylogging-in-linux-part-3)
* key [dots/keyboard/.config/keyboard at main · veyxov/dots](https://github.com/veyxov/dots/tree/main/keyboard/.config/keyboard)
* key [http://xahlee.info/comp/unicode_matching_brackets.html](http://xahlee.info/comp/unicode_matching_brackets.html)
* key [houmain/keymapper](https://github.com/houmain/keymapper)
* key [gitlab.com/interception/linux/plugins/dual-function-keys](https://gitlab.com/interception/linux/plugins/dual-function-keys)
* key [kanata/docs/config.adoc at main · jtroo/kanata](https://github.com/jtroo/kanata/blob/main/docs/config.adoc)
* key [veyxov/qanata: Application aware layer switching in](https://github.com/veyxov/qanata) [kanata](https://github.com/veyxov/qanata)
* key keymaps convo [...](https://www.reddit.com/r/neovim/s/2j96StuexD)

# Tmp

* [NorfairKing](https://github.com/NorfairKing)
* [medevel.com/tag/productivity/](https://medevel.com/tag/productivity/) **
* [medevel.com/cuekeeper/](https://medevel.com/cuekeeper/)
* [pickfire/spt](https://github.com/pickfire/spt)
* [orgmode.org/worg/org-contrib/](https://orgmode.org/worg/org-contrib/)
* Elevate Your Task Management With Ease - YouTube [video](https://www.youtube.com/watch?v=U4pGz4KI1J0&t=12s&pp=2AEMkAIB)
* [adnanh/webhook](https://github.com/adnanh/webhook)
* [freedesktop.org/wiki/Software/dbus/](https://www.freedesktop.org/wiki/Software/dbus/)
* [develop.kde.org/frameworks/kirigami//](https://develop.kde.org/frameworks/kirigami//)
* [docs.python.org/3.11/library/argparse.html#module-argparse](https://docs.python.org/3.11/library/argparse.html#module-argparse)
* [python-poetry/cleo](https://github.com/python-poetry/cleo)
* [rich.readthedocs.io/en/stable/introduction.html](https://rich.readthedocs.io/en/stable/introduction.html)
* [click.palletsprojects.com/en/8.1.x/](https://click.palletsprojects.com/en/8.1.x/) ← looks really good
* [chris48s/stage-left,](https://github.com/chris48s/stage-left,) together with
* [dbinagi/nomodoro](https://github.com/dbinagi/nomodoro)
* [jakethekoenig/tmux-pom?](https://github.com/jakethekoenig/tmux-pom?)
* [poljar/matrix-nio](https://github.com/poljar/matrix-nio)
* [ ] [timeopochin/GanTTY](https://github.com/timeopochin/GanTTY)
* [ ] [vit-project/vit](https://github.com/vit-project/vit)
* [ ] [Textualize/textual](https://github.com/Textualize/textual)
* → example: [Cvaniak/NoteSH](https://github.com/Cvaniak/NoteSH)
* → [Textualize/textual/discussions/165](https://github.com/Textualize/textual/discussions/165)
* [ ] [kstenschke/tictac-track](https://github.com/kstenschke/tictac-track)
* [ ] [klaudiosinani/taskbook](https://github.com/klaudiosinani/taskbook)
* [ ] [darrikonn/td-cli](https://github.com/darrikonn/td-cli)
* [ ] [dnote/dnote](https://github.com/dnote/dnote)
* [ ] [xwmx/nb](https://github.com/xwmx/nb)
* [ ] [vhp.github.io/terminal_velocity/](https://vhp.github.io/terminal_velocity/)
* [sma.supermemo.wiki/#/](https://sma.supermemo.wiki/#/)
* [Pricing - WakaTime](https://wakatime.com/pricing)
* [TheRolfFR/activity-tracker](https://github.com/TheRolfFR/activity-tracker)
* [anufrievroman/calcure](https://github.com/anufrievroman/calcure)
* [AlphabetsAlphabets/actt](https://github.com/AlphabetsAlphabets/actt)
* [note templates](https://jacobzelko.com/08032021134232-notes-template/#example_of_actual_note)
* [wireapp/lithium](https://github.com/wireapp/lithium)
* [Tinycare-Tui](https://www.reddit.com/r/golang/s/fVY4hoTMYY)
* [heise.de/tests/Kurztests-Desktop-Uebersetzer-Markdown-Notizbuch-und-Online-Whiteboard-9201345.html](https://www.heise.de/tests/Kurztests-Desktop-Uebersetzer-Markdown-Notizbuch-und-Online-Whiteboard-9201345.html)
* [planager (+ganttouchthis, taskifist)](https://www.notion.so/nebokrai-horizon-consilium-ganttouchthis-taskifist-roadmapper-2d3a6d104fb348c0b63b58087aada71b?pvs=21)
* [JasonShin/fp-core.rs: A library for functional programming in Rust](https://github.com/JasonShin/fp-core.rs)
* [brunocbr/zettel-composer](https://github.com/brunocbr/zettel-composer)
* [activitywatch.net/](https://activitywatch.net/)
* [I Should Have Just Used Vimwiki From The Start](https://youtu.be/vBJj7YMVn6I)
* [u/oohay_email2004 replied to your post in r/codereview - isaac.r.riley@gmail.com - Gmail](https://mail.google.com/mail/u/0/#inbox/FMfcgzGrcXqJsBMnzlVBKMwmsLDGFBrL)
* [Automate the Boring Stuff with Python](https://automatetheboringstuff.com/chapter18/)
* [amiof/todo-list-: a todo list create with js and html & css](https://github.com/amiof/todo-list-)
* [Egnod/karakurt: Cookiecuttrer-template for python cli app](https://github.com/Egnod/karakurt)
* [Introduction - Textual](https://textual.textualize.io/)
* [irq0/whatidid: what I do and what I did](https://github.com/irq0/whatidid)
* [my productivity workflow 2023!](https://youtu.be/IZX-cDR6IQM)
* [BOOKSTORES: How to Read More Books in the Golden Age of Content](https://youtu.be/lIW5jBrrsS0)
* [my productivity workflow 2023!](https://youtu.be/IZX-cDR6IQM)
* [My Get Things Done (GTD) Task](https://www.youtube.com/watch?v=8I7nQmKAWpM) Management System Using
* [How To Use VIT The Curses Based](https://www.youtube.com/watch?v=wY3DJVSWdeI&t=363s)
* CLI "Digital Assistant"
* [10 Best Free and Open Source Command-Line Python Application Development Tools - LinuxLinks](https://www.linuxlinks.com/best-free-open-source-command-line-python-application-development-tools/)
* [python - Combining pyperclip copy-to-clipboard with pyautogui paste? - Stack Overflow](https://stackoverflow.com/questions/47075240/combining-pyperclip-copy-to-clipboard-with-pyautogui-paste)
* search: vimwiki for android
* [VIMKipedia: Or How I Built My Second Brain Using Vim - YouTube](https://www.youtube.com/watch?v=q80hXvorl0o)
* [Lyaaaaaaaaaaaaaaa/Project_Kanban: A lightweight desktop software, under the MIT licence to create and manage your Kanbans boards for your personal projects](https://github.com/Lyaaaaaaaaaaaaaaa/Project_Kanban)
* [TaskMaster](http://www.kevra.org/TheBestOfNext/ThirdPartyProducts/ThirdPartySoftware/InformationManagement/TaskMaster/TaskMaster.html)
* (9+) Config(9+) planager (ganttstopme?)
* [timeopochin/GanTTY: Project planning from the terminal](https://github.com/timeopochin/GanTTY)
* [I haven't found a decent ToDo list with this killer feature: dependencies. I wan... | Hacker News](https://news.ycombinator.com/item?id=11352791)
* 2 Geeky Tools to Manage Your Sourcing Tasks - SourceCon
* Enum HOWTO -  Python 3.11.2 documentation
* algorithm - Evenly space n items over m iterations - Stack Overflow
* [ganttouchthis/LICENSE at main · yelircaasi/ganttouchthis](https://github.com/yelircaasi/ganttouchthis/blob/main/LICENSE)
* [My integrations | Notion Developers](https://www.notion.so/my-integrations)
* [syncall/readme-tw-notion.md at master · bergercookie/syncall](https://github.com/bergercookie/syncall/blob/master/readme-tw-notion.md)
* [Reddit - Here! Some USEFUL date formulas for your Notion's Setup!](https://www.reddit.com/r/Notion/comments/fsnmmg/here_some_useful_date_formulas_for_your_notions/)
* [My efficient and effective Productivity Setup With Emacs, Org Mode and Org Agenda](https://youtu.be/oG9jP0SsPqQ)
* [Curses Programming with Python — Python 3.11.2 documentation](https://docs.python.org/3/howto/curses.html)
* [curses — Terminal handling for character-cell displays — Python 3.11.2 documentation](https://docs.python.org/3/library/curses.html#module-curses)
* [TiddlyWiki — a non-linear personal web notebook](https://tiddlywiki.com/)
* [msiemens/tinydb: TinyDB is a lightweight document oriented database optimized for your happiness :)](https://github.com/msiemens/tinydb)
* [Welcome to TinyDB! — TinyDB 4.7.1 documentation](https://tinydb.readthedocs.io/en/latest/)
* [curses (programming library) - Wikipedia](https://en.wikipedia.org/wiki/Curses_(programming_library))
* [Taiga 30min Setup - Learn Taiga basics - Taiga Community](https://community.taiga.io/t/taiga-30min-setup/170)
* [kquick/mywork: Tool to keep track of what you have been working on, and where and when work should continue](https://github.com/kquick/mywork)
* [brick: A declarative terminal user interface library](https://hackage.haskell.org/package/brick)
* [zadam/trilium: Build your personal knowledge base with Trilium Notes](https://github.com/zadam/trilium)
* [Paperspace Blog](https://blog.paperspace.com/)
* [obsidian.md/](https://obsidian.md/)
* [set up dvc with google drive - Google Search](https://www.google.com/search?client=firefox-b-d&q=set+up+dvc+with+google+drive)
* [video](https://www.youtube.com/watch?v=A1YgbAp5YRc)
* [Stuff I did - The stuff I do](https://www.statox.fr/projects/#)
* [dashboard.heroku.com/account](https://dashboard.heroku.com/account) heroku backup XY047RVTHX H0RYMIZ36C VTU7G4K6YO IMDP455R7S P7EN0W7BZP NDWZ0FMG1L ECTT2W4552 ZTICQNARDY 7SUJG65VN8 J1B78S0QOR
* [toeverything/AFFiNE](https://github.com/toeverything/AFFiNE)
* [Are TODO Applications Hind](https://www.youtube.com/watch?v=BcxZj2qh4Kw)ering Your Productivity?
* [f-droid.org/packages/com.mhss.app.mybrain/](https://f-droid.org/packages/com.mhss.app.mybrain/)
* [organice.200ok.ch/](https://organice.200ok.ch/)
* [AsamK/signal-cli](https://github.com/AsamK/signal-cli)
* [ecosystem.atlassian.net/wiki/spaces/JRJC/overview](https://ecosystem.atlassian.net/wiki/spaces/JRJC/overview)
* [PROxZIMA/TimetableScheduler](https://github.com/PROxZIMA/TimetableScheduler)
* [topics/timetable-generator](https://github.com/topics/timetable-generator)
* [nomeata/arbtt](https://github.com/nomeata/arbtt) - automatic rule-based time tracker
* [sr.ht/~emersion/goguma/](https://sr.ht/~emersion/goguma/)
* [sr.ht/~emersion/gamja/](https://sr.ht/~emersion/gamja/)
* [ergochat/ergo](https://github.com/ergochat/ergo)
* [jquku/Matrix-Chatbot](https://github.com/jquku/Matrix-Chatbot)
* [lwesterhof/semaphore](https://github.com/lwesterhof/semaphore)
* [gitlab.com/signald/signald](https://gitlab.com/signald/signald)
* [signald.org/](https://signald.org/)
* [signalapp/libsignal](https://github.com/signalapp/libsignal)
* [AsamK/signal-cli](https://github.com/AsamK/signal-cli)
* [matrix-org/matrix-hookshot](https://github.com/matrix-org/matrix-hookshot)
* [play.google.com/store/apps/details?id=com.countercultured.irc4android](https://play.google.com/store/apps/details?id=com.countercultured.irc4android)
* [gitlab.com/jpypi/rustix](https://gitlab.com/jpypi/rustix)
* [matrix.org/ecosystem/integrations/](https://matrix.org/ecosystem/integrations/)
* [gitlab.com/jpypi/rustix](https://gitlab.com/jpypi/rustix)
* [tasks.org/](https://tasks.org/) $$$$$$$$$
* [usememos/memos](https://github.com/usememos/memos)
* [xit.jotaen.net/](https://xit.jotaen.net/)
* [orgzly/orgzly-android](https://github.com/orgzly/orgzly-android)
* [libhunt.com/r/organice](https://www.libhunt.com/r/organice)
* [org-web.org/](https://org-web.org/)
* [appwrite.io/](https://appwrite.io/)
* [bgregos/foreground](https://github.com/bgregos/foreground)
* [f-droid.org/packages/me.bgregos.brighttask/](https://f-droid.org/packages/me.bgregos.brighttask/)
* [f-droid.org/packages/com.madlonkay.orgro/](https://f-droid.org/packages/com.madlonkay.orgro/) → make for neorg
* [d-k-bo/gotify-rs](https://github.com/d-k-bo/gotify-rs)
* [gotify/server](https://github.com/gotify/server)
* [keep.imfreedom.org/pidgin/pidgin/](https://keep.imfreedom.org/pidgin/pidgin/)
* [tinode/chat](https://github.com/tinode/chat)
* [twilio-labs/receptionist-bot-rs](https://github.com/twilio-labs/receptionist-bot-rs)
* [slack-rust.abdolence.dev/](https://slack-rust.abdolence.dev/)
* [pushbits.io/](https://www.pushbits.io/)
* [matrix.org/ecosystem/bridges/signal/](https://matrix.org/ecosystem/bridges/signal/)
* [matrix-org/matrix-rust-sdk#readme](https://github.com/matrix-org/matrix-rust-sdk#readme)
* [matrix.org/ecosystem/sdks/](https://matrix.org/ecosystem/sdks/)
* [f-droid.org/packages/com.github.gotify/](https://f-droid.org/packages/com.github.gotify/)
* [anytype.io/](https://anytype.io/)
* My GTD Emacs Workflow (Getting Things Done) - YouTube [...](https://m.youtube.com/watch?v=92PCxH29UCo)
* [stackoverflow.com/questions/35250621/recursive-self-referencing-json-schema](https://stackoverflow.com/questions/35250621/recursive-self-referencing-json-schema)
* [fortelabs.com/blog/test-driving-a-new-generation-of-second-brain-apps-obsidian-tana-and-mem/](https://fortelabs.com/blog/test-driving-a-new-generation-of-second-brain-apps-obsidian-tana-and-mem/)
* [stackoverflow.com/questions/20752716/json-schema-recursive-schema-definition](https://stackoverflow.com/questions/20752716/json-schema-recursive-schema-definition)
* [about.org-note.com/](https://about.org-note.com/)
* [libera.chat/guides/clients](https://libera.chat/guides/clients)
* [f-droid.org/packages/io.mrarm.irc/](https://f-droid.org/packages/io.mrarm.irc/)
* [sopel.chat/](https://sopel.chat/)
* [topics/irc-bot](https://github.com/topics/irc-bot)
* [graz.social/@publicvoit/111388551599358628](https://graz.social/@publicvoit/111388551599358628)
* nebokrai $$$$$$$$$ [smos.online/](https://smos.online/)
* [julian.digital/2023/07/06/multi-layered-calendars/](https://julian.digital/2023/07/06/multi-layered-calendars/)
* Spaced repetition systems can be used to program attention [notes.andymatuschak.org/zB92WZZ5baBHKZPPbWMbYEv](https://notes.andymatuschak.org/zB92WZZ5baBHKZPPbWMbYEv)
* [discord.com/channels/834325286664929280/877666474888675368/1222613062796705862](https://discord.com/channels/834325286664929280/877666474888675368/1222613062796705862)
* [julian.digital/2023/07/06/multi-layered-calendars/](https://julian.digital/2023/07/06/multi-layered-calendars/)
* [tinydb.readthedocs.io/en/latest/](https://tinydb.readthedocs.io/en/latest/)
* → switch to [focalboard.com/](https://www.focalboard.com/) ?
* [notion.so/my-integrations](https://www.notion.so/my-integrations)
* via Trello?
* [makenotion/notion-sdk-js](https://github.com/makenotion/notion-sdk-js)
* [ramnes/notion-sdk-py](https://github.com/ramnes/notion-sdk-py)
* [getsyncr/notion-sdk](https://github.com/getsyncr/notion-sdk) (deprecated)
* [makenotion/notion-sdk-typescript-starter](https://github.com/makenotion/notion-sdk-typescript-starter)
* [ ] [nvim-neorg/neorg](https://github.com/nvim-neorg/neorg)
* [gtd books](http://libgen.rs/search.php?req=getting+things+done+David+allen&open=0&res=25&view=simple&phrase=1&column=def)
* [MahmoudNasser01/django_simple_notification](https://github.com/MahmoudNasser01/django_simple_notification)
* [avelino/awesome-go#advanced-console-uis](https://github.com/avelino/awesome-go#advanced-console-uis)
* [adnanh/webhook](https://github.com/adnanh/webhook)
* [schmee/habu](https://github.com/schmee/habu)
* [ ] [hugginsio/twig.nvim,](https://github.com/hugginsio/twig.nvim,) also a nvim plugin
* [nvim-neorg/neorg/wiki/GTD-Queries/ba2cc1c5cf8c5ed0690e445f213e18c04ff4e157](https://github.com/nvim-neorg/neorg/wiki/GTD-Queries/ba2cc1c5cf8c5ed0690e445f213e18c04ff4e157)
* [ ] [xwmx/nb](https://github.com/xwmx/nb) 
* [ ] [pimutils/todoman](https://github.com/pimutils/todoman)
* [Rigellute/spotify-tui/issues/732](https://github.com/Rigellute/spotify-tui/issues/732) for spotify-tui on rpi
* [docs.spotifyd.rs/installation/Raspberry-Pi.html](https://docs.spotifyd.rs/installation/Raspberry-Pi.html)
* [accounts.spotify.com/authorize?response_type=code&state=AV5CzOfJ8YxNnEch&client_id=0cd789e4785c4b19ad5a200822b12104&redirect_uri=http:%2F%2Flocalhost:8888%2Fcallback&scope=playlist-read-collaborative playlist-read-private playlist-modify-private playlist-modify-public user-follow-read user-follow-modify user-library-modify user-library-read user-modify-playback-state user-read-currently-playing user-read-playback-state user-read-playback-position user-read-private user-read-recently-played&](https://accounts.spotify.com/authorize?response_type=code&state=AV5CzOfJ8YxNnEch&client_id=0cd789e4785c4b19ad5a200822b12104&redirect_uri=http:%2F%2Flocalhost:8888%2Fcallback&scope=playlist-read-collaborative%20playlist-read-private%20playlist-modify-private%20playlist-modify-public%20user-follow-read%20user-follow-modify%20user-library-modify%20user-library-read%20user-modify-playback-state%20user-read-currently-playing%20user-read-playback-state%20user-read-playback-position%20user-read-private%20user-read-recently-played&)
* [developer.spotify.com/dashboard](https://developer.spotify.com/dashboard)
* [phaazon/mind](https://github.com/phaazon/mind) → also look at how keymaps are handled and represented
* [Nighty3098/FocuseSpace](https://github.com/Nighty3098/FocuseSpace)
* [palette::named - Rust](https://docs.rs/palette/0.4.1/palette/named/index.html#constants)
* [rdbo/sigma-linux: Sigma Linux - Σlite Operating System](https://github.com/rdbo/sigma-linux)
* [johannesjo/super-productivity: Super Productivity is an advanced todo list app with integrated Timeboxing and time tracking capabilities. It also comes with integrations for Jira, Gitlab, GitHub and Open Project.](https://github.com/johannesjo/super-productivity)
* [Python 3.12 Generic Types Explained ArjanCodes ArjanCodes Verificada • • 5,2 K visualizaciones hace 5 horas Nuevo](https://www.youtube.com/watch?v=q6ujWWaRdbA)
* [Building Implicit Interfaces in Python with Protocol Classes](https://andrewbrookins.com/technology/building-implicit-interfaces-in-python-with-protocol-classes/)
* [Protocols in Python: Why You Need Them - GoDataDriven](https://godatadriven.com/blog/protocols-in-python-why-you-need-them/)
* [How to create module-wide variables in Python? - Stack Overflow](https://stackoverflow.com/questions/1977362/how-to-create-module-wide-variables-in-python)
* [Body Weight Planner - NIDDK](https://www.niddk.nih.gov/bwp)
* [Colored and Clickable Wrapping URLs in LaTeX and LyX](http://troubleshooters.com/linux/lyx/urlwrap.htm)
* [mtkennerly/poetry-dynamic-versioning: Plugin for Poetry to enable dynamic versioning based on VCS tags](https://github.com/mtkennerly/poetry-dynamic-versioning)
* [TagTrees: Improving Personal Information Management Using Associative Navigation- on screen version](https://karl-voit.at/tagstore/downloads/Voit2012b.pdf)
* [The Tag «pim»](https://karl-voit.at/tags/pim/)
* [Task management with Taskwarrior and Taskell](https://tallguyjenks.github.io/blog/task-management-with-taskwarrior-and-taskell.html)
* [Block Elements - Wikipedia](https://en.wikipedia.org/wiki/Block_Elements)
* [proglang table](https://www.notion.so/189fb9f08c944ab3ba2c284a4fb09445?pvs=21)
* [GitPython/git/diff.py at main · gitpython-developers/GitPython](https://github.com/gitpython-developers/GitPython/blob/main/git/diff.py)
* [difflib — Helpers for computing deltas — Python 3.12.0 documentation](https://docs.python.org/3/library/difflib.html)
* [annotated-types/annotated_types/__init__.py at main · annotated-types/annotated-types](https://github.com/annotated-types/annotated-types/blob/main/annotated_types/__init__.py)
* [Pytest With Eric](https://pytest-with-eric.com/)
* [Welcome to Pydantic - Pydantic](https://docs.pydantic.dev/latest/)
* [Pytest With Eric](https://pytest-with-eric.com/)
* [pywal/pywal/backends/wal.py at master · dylanaraps/pywal](https://github.com/dylanaraps/pywal/blob/master/pywal/backends/wal.py)
* [JSON Schema](https://json-schema.org/understanding-json-schema)
* [JSON Schema - object](https://json-schema.org/understanding-json-schema/reference/object#regexp)
* [JSON Schema 2020-12](https://www.learnjsonschema.com/2020-12/)
* [GitHub - rdbo/sigma-linux: Sigma Linux - Σlite Operating System](https://github.com/rdbo/sigma-linux)
* [Install Ubuntu Server | Ubuntu](https://ubuntu.com/tutorials/install-ubuntu-server#6-choose-your-install)
* [Create a Bootable Device - Alpine Linux](https://wiki.alpinelinux.org/wiki/Create_a_Bootable_Device)
* nebokrai & similar
* [simplex-chat/simplex-chat/tree/stable/apps](https://github.com/simplex-chat/simplex-chat/tree/stable/apps)
* [simplex-chat/simplex-chat/blob/stable/apps/simplex-bot-advanced/Main.hs](https://github.com/simplex-chat/simplex-chat/blob/stable/apps/simplex-bot-advanced/Main.hs)
* [simplex.chat/blog/20231125-simplex-chat-v5-4-link-mobile-desktop-quantum-resistant-better-groups.html](https://simplex.chat/blog/20231125-simplex-chat-v5-4-link-mobile-desktop-quantum-resistant-better-groups.html)
* SchildiChat [f-droid.org/packages/de.spiritcroc.riotx/](https://f-droid.org/packages/de.spiritcroc.riotx/)
* Best Secure Messaging App | FBI Document Leaked - YouTube [video](https://www.youtube.com/watch?v=wj-aR96FOA0&pp=ygUPU2lnbmFsIGNoYXQgYm90)
* [types-jsonschema · PyPI](https://pypi.org/project/types-jsonschema/#history)
* [nebokrai/.envrc at main · yelircaasi/nebokrai](https://github.com/yelircaasi/nebokrai/blob/main/.envrc)
* [SSH and GPG keys](https://github.com/settings/keys)
* ⇒ [wiki.archlinux.org/title/List_of_applications/Other](https://wiki.archlinux.org/title/List_of_applications/Other)
* [jamesclear.com/how-to-stop-procrastinating](https://jamesclear.com/how-to-stop-procrastinating)
* [jeffsanders.com/the-7-essential-elements-of-productivity-element-4-planning/](https://www.jeffsanders.com/the-7-essential-elements-of-productivity-element-4-planning/)
* [HedgeDoc - The best platform to write and share markdown.](https://hedgedoc.org/)
* [hedgedoc/hedgedoc at blog.cloudron.io](https://github.com/hedgedoc/hedgedoc?ref=blog.cloudron.io)
* [viseshrp/workedon](https://github.com/viseshrp/workedon)
* [teloxide/teloxide](https://github.com/teloxide/teloxide)
* [tools-life/taskwiki](https://github.com/tools-life/taskwiki)
* [Ticketsystem: Znuny 7 als Open-Source-Alternative zu OTRS](https://www.heise.de/news/Ticketsystem-Znuny-7-als-Open-Source-Alternative-zu-OTRS-8969167.html)
* (Telegram inline keyboard? Add [custom keyboard](https://www.google.com/search?q=add+custom+keyboard+to+android&sxsrf=APwXEde_qAYevpIXgyBDpVjjtVpsAK4Huw:1682273314975&source=lnt&tbs=qdr:y&sa=X&ved=2ahUKEwjvrOq6zMD-AhUCsaQKHZB0BsEQpwV6BAgBEAs&biw=1717&bih=845&dpr=1) for Telegram to include slash and numbers on basic keyboard? → not highest priority)
* [npmjs.com/package/browser-sync](https://www.npmjs.com/package/browser-sync)
* [Is there a plugin for seeing a live preview of HTML/CSS/JS?Reddit        [reddit.com](https://www.reddit.com) › neovim › comments › plggq3](https://www.reddit.com/r/neovim/comments/plggq3/is_there_a_plugin_for_seeing_a_live_preview_of/)
* I use markdown-*preview*.*nvim* for getting a *live preview* when editing Markdown files. But is there something similar for web development?
* [Is there a plugin for *live preview* my web projects on ... - Reddit](https://www.reddit.com/r/neovim/comments/uzqx2i/is_there_a_plugin_for_live_preview_my_web/)
* [Live* Server plugin for *vim*/*nvim* : r/*neovim* - Reddit](https://www.reddit.com/r/neovim/comments/w86ash/live_server_plugin_for_vimnvim/)
* [Introducing *live*-command.*nvim*: *preview* the norm ... - Reddit](https://www.reddit.com/r/neovim/comments/xx5hhp/introducing_livecommandnvim_preview_the_norm/)
* [Live* markdown *preview* to PDF : r/*neovim* - Reddit](https://www.reddit.com/r/neovim/comments/w7ki77/live_markdown_preview_to_pdf/)
* [dev.to/fidelve/using-vim-as-your-main-editor-for-web-development-5a73](https://dev.to/fidelve/using-vim-as-your-main-editor-for-web-development-5a73)
* [google.com/search?client=firefox-b-d&q=open+source+web+gantt+viewer](https://www.google.com/search?client=firefox-b-d&q=open+source+web+gantt+viewer)
* [litehtml/litehtml](https://github.com/litehtml/litehtml)
* [edluffy/hologram.nvim](https://github.com/edluffy/hologram.nvim)
* [krivahtoo/silicon.nvim](https://github.com/krivahtoo/silicon.nvim)
* Read [neovim.io/doc/user/lua.html](https://neovim.io/doc/user/lua.html)
* Read [learnxinyminutes.com/docs/fr-fr/lua-fr/,](https://learnxinyminutes.com/docs/fr-fr/lua-fr/,) [learnxinyminutes.com/docs/pt-br/lua-pt/,](https://learnxinyminutes.com/docs/pt-br/lua-pt/,)  [learnxinyminutes.com/docs/de-de/lua-de/,](https://learnxinyminutes.com/docs/de-de/lua-de/,) [learnxinyminutes.com/docs/ru-ru/lua-ru/](https://learnxinyminutes.com/docs/ru-ru/lua-ru/)
* Read [lua.org/manual/5.1/1](https://www.lua.org/manual/5.1/1)
* [r/Notion/comments/nd76ec/notion_api_webhooks/](https://www.reddit.com/r/Notion/comments/nd76ec/notion_api_webhooks/)
* [thegist.so/#Pricing](https://www.thegist.so/#Pricing)
* (productivity) [matthiasn/lotti](https://github.com/matthiasn/lotti)
* [Whimsical - Work Better, Faster, Together](https://whimsical.com/)
* [ramnes.github.io/notion-sdk-py/](https://ramnes.github.io/notion-sdk-py/)
* [foambubble.github.io/foam/](https://foambubble.github.io/foam/)

# juventas.nvim

* [nbqa](https://github.com/nbQA-dev/nbQA)
* [benlubas/molten-nvim/blob/main/docs/Notebook-Setup.md](https://github.com/benlubas/molten-nvim/blob/main/docs/Notebook-Setup.md)
* [jupyter-tutorial.readthedocs.io/de/latest/intro.html](https://jupyter-tutorial.readthedocs.io/de/latest/intro.html)
* [ipython.org/index.html](https://ipython.org/index.html)
* [jupyterbook.org/en/stable/intro.html#](https://jupyterbook.org/en/stable/intro.html#)
* [dicussion on Discord](yeah that entire class was a mess. It's the reason that I "made" molten though, so I guess something good came out of it)
* [nvim screen capture](https://discord.com/channels/834325286664929280/877666474888675368/1232074272743096373)
* → [books](https://libgen.rs/search.php?&req=jupyter&phrase=1&view=simple&column=def&sort=year&sortmode=DESC)
* [janakiev.com/blog/jupyter-virtual-envs/](http://janakiev.com/blog/jupyter-virtual-envs/)
* [en.m.wiktionary.org/wiki/Jupiter](https://en.m.wiktionary.org/wiki/Jupiter)
* {ju} [tweag/jupyenv: Declarative and reproducible Jupyter environments - powered by Nix](https://github.com/tweag/jupyenv)
* {juventas} [JupyterWith Next - Tweag](https://www.tweag.io/blog/2022-11-17-jupyter-with-next/)
* Thunor
* Phaethon
* Nike
* [AndrewRadev/inline_edit.vim](https://github.com/AndrewRadev/inline_edit.vim)
* Juniper? Junyper? Junipyr?
* Notebookish.nvim, Daftar.nvim, Zapys.nvim, cuaderno.nvim, lyterate.nvim, Dias (grc)
* [edgarogh/ipynbat](https://github.com/edgarogh/ipynbat)
* name notebat?
* [paw-lu/nbpreview](https://github.com/paw-lu/nbpreview)
* [jsvine/nbpreview](https://github.com/jsvine/nbpreview)
* [r/neovim/comments/wfut6c/introducing_femaco_catalyze_your_fenced_markdown/](https://www.reddit.com/r/neovim/comments/wfut6c/introducing_femaco_catalyze_your_fenced_markdown/)
* maybe save code to a separate tempfile and run lsp on that, then pass lsp feedback to relevant location in nbview.
* [SyntaxRange - Define a different filetype syntax on regions of a buffer. : vim online](https://www.vim.org/scripts/script.php?script_id=4168)
* [chat.openai.com/c/fcf2129c-4772-4537-b029-d1e1fa1f276b](https://chat.openai.com/c/fcf2129c-4772-4537-b029-d1e1fa1f276b) Python Plugin Neovim Setup
* same as Jupyter web, but using text view
* Components: class Converter()

.ipynb to textview nb2text(...)
* textview to .ipynb text2nb(...)
* class Buffer()
* Converter.collect_textview_diffs()
* Converter.collect_ipynb_diffs()
* Converter.update_ipynb_from_textview()
* Converter.update_textview_from_ipynb()
* other concerns:
* connect to server
* syntax highlighting
* LSP
* completion
* multi-language support
* tests
* image rendering (wezterm and kitty)
* > how to write a plugin in python and interact with lua
* make each cell its own buffer? keep separate code-only buffer for LSP?
* [chat.openai.com/c/fcf2129c-4772-4537-b029-d1e1fa1f276b](https://chat.openai.com/c/fcf2129c-4772-4537-b029-d1e1fa1f276b)
* [dccsillag/magma-nvim](https://github.com/dccsillag/magma-nvim)
* [luk400/vim-jukit](https://github.com/luk400/vim-jukit)
* [martibosch.github.io/jupyter-emacs-universe/](https://martibosch.github.io/jupyter-emacs-universe/)
* [emacs-jupyter/jupyter](https://github.com/emacs-jupyter/jupyter)
* [millejoh/emacs-ipython-notebook](https://github.com/millejoh/emacs-ipython-notebook)
* [millejoh.github.io/emacs-ipython-notebook/](https://millejoh.github.io/emacs-ipython-notebook/)
* [isaacganoung.com/articles/tutorials/jupyter-notebook-in-emacs.html](https://isaacganoung.com/articles/tutorials/jupyter-notebook-in-emacs.html)

## Virtual Text

* Yes, you can add virtual text to the beginning of each line in Neovim using a plugin or by directly configuring Neovim. Here's a way to achieve this:
* You can use the `nvim_buf_set_virtual_text()` function provided by Neovim's API to add virtual text to each line. You can invoke this function through a script or by using Neovim's built-in functions.
* Here's an example script in Lua that adds virtual text to the beginning of each line:

```lua

-- Define a function to add virtual text to the beginning of each line
* function add_virtual_text(bufnr)local lines = vim.api.nvim_buf_get_lines(bufnr, 0, -1, false)* for i, line in ipairs(lines) do*     -- Add virtual text "| " to the beginning of each line*     vim.api.nvim_buf_set_virtual_text(bufnr, -1, i - 1, {{'| ', 'Comment'}}, {})* end
* end

-- Call the function on each buffer
* for _, bufnr in ipairs(vim.api.nvim_list_bufs()) do* add_virtual_text(bufnr)
* end

```
* To achieve notebook-style cells with virtual text in Neovim, you can use the `nvim_buf_set_virtual_text()` function to add custom virtual text to specific lines in your buffer. Additionally, you can utilize ASCII art to create the visual boundaries for the cells.
* Here's a Lua script that adds notebook-style cells around each line of Python code:

```lua
* function add_notebook_cells(bufnr)* local lines = vim.api.nvim_buf_get_lines(bufnr, 0, -1, false)* for i, line in ipairs(lines) do*     -- Add notebook-style cells around each line*     local notebook_line = '│  ' .. line .. '  │'*     local notebook_border = '┌' .. string.rep('─', #notebook_line - 2) .. '┐'
*     -- Set virtual text for the notebook cell*     vim.api.nvim_buf_set_virtual_text(bufnr, -1, i - 1, {{notebook_border, 'Comment'}, {notebook_line, 'Comment'}, {notebook_border, 'Comment'}}, {})* end
* end

-- Call the function on each buffer
* for _, bufnr in ipairs(vim.api.nvim_list_bufs()) do* add_notebook_cells(bufnr)
* end

```
* This Lua script iterates over each line of the buffer, adding notebook-style cells around the line content. It then uses `nvim_buf_set_virtual_text()` to add the custom virtual text to the buffer.
* To execute this script, save it as `add_notebook_cells.lua` in your Neovim configuration directory and then invoke it from your Neovim configuration file (`init.lua`) using `:luafile add_notebook_cells.lua`. This will add the notebook-style cells to all buffers currently open in Neovim.
* Please note that virtual text added using this method is purely visual and does not affect the underlying contents of the file. Additionally, you may need to adjust the ASCII art and styling to fit your preferences and display needs.

## filetype-specific keybinds

* Yes, you can define key bindings that are specific to a certain file type (filetype) in Neovim. This is useful for defining mappings or commands that are relevant only when editing files of a particular type, such as Python, Markdown, or JavaScript.
* Here's how you can define filetype-specific key bindings in Neovim:

```vim

" Define a key binding that is valid only for Python files
* autocmd FileType python nnoremap <buffer> <Leader>t :!pytest %<CR>

" Define a key binding that is valid only for Markdown files
* autocmd FileType markdown nnoremap <buffer> <Leader>c :!pandoc -s -o %:r.pdf %<CR>

```
* In these examples:
* `autocmd FileType python` and `autocmd FileType markdown` set up autocmds (autocommands) that trigger when Neovim detects a buffer with the corresponding file type.
* `nnoremap <buffer> <Leader>t :!pytest %<CR>` defines a normal mode mapping (`nnoremap`) that executes the `pytest` command when triggered by the leader key followed by `t` (`<Leader>t`). The `%` represents the current file's path, and `<CR>` simulates pressing the Enter key.
* `nnoremap <buffer> <Leader>c :!pandoc -s -o %:r.pdf %<CR>` defines another normal mode mapping that runs the `pandoc` command to convert the Markdown file to PDF when triggered by the leader key followed by `c`.
* By using `<buffer>` in the mapping command, you ensure that the mapping is local to the current buffer. This means that the mapping will only be active when editing a file of the specified filetype, and it won't affect other buffers.
* You can add these mappings to your `init.vim` or `init.lua` configuration file in Neovim to define filetype-specific key bindings according to your preferences.

## Question for ChatGPT

* What would be the most difficult parts of developing a neovim plugin providing a neovim-native interface to Jupyer notebook (.ipynb) files?
* Developing a Neovim plugin to provide a Neovim-native interface to Jupyter notebook (.ipynb) files could present several challenges, including:
* 1. Parsing and Understanding the .ipynb Format: Jupyter notebook files are JSON-based and have a complex structure. Developing a robust parser to handle this format and extract relevant information such as code cells, markdown cells, outputs, metadata, etc., can be challenging.
* 2. Rendering and Displaying Rich Content: Jupyter notebooks support rich content such as Markdown, HTML, images, LaTeX, and interactive widgets. Implementing a rendering engine within Neovim to display this rich content accurately and interactively could be non-trivial.
* 3. Code Execution and Kernel Interaction: Jupyter notebooks rely on kernels to execute code. Providing a seamless interface for code execution, kernel management, and interaction with kernel outputs within Neovim would require integration with Jupyter's messaging protocol (e.g., Jupyter messaging over ZeroMQ or WebSockets).
* 4. User Interface and Interactivity: Jupyter notebooks offer features like collapsible sections, cell execution status indicators, interactive widgets, and cell metadata. Replicating these features within Neovim while maintaining a consistent and intuitive user interface could be challenging.
* 5. Maintaining Compatibility and Performance: Neovim runs in a terminal environment, which may impose limitations on rendering capabilities and interactivity compared to web-based Jupyter interfaces. Ensuring compatibility with different terminal emulators and maintaining acceptable performance levels for large notebooks could be challenging.
* 6. Handling Notebook Structure and Modifications: Jupyter notebooks can have a hierarchical structure with nested cells and metadata. Implementing functionality to create, modify, rearrange, and delete cells while preserving the integrity of the notebook structure would require careful design and implementation.
* 7. Testing and Documentation: Comprehensive testing, including unit tests, integration tests, and user acceptance tests, would be essential to ensure the plugin's reliability and robustness. Additionally, providing clear and comprehensive documentation to guide users on installation, configuration, and usage would be crucial.
* Overall, while developing a Neovim plugin to interface with Jupyter notebook files could be challenging, it could also be a rewarding project that enhances the productivity and workflow of Neovim users who work with Jupyter notebooks.
* Juventas.nvim (jove.nvim? Giove.nvim? Iuppiter.nvim): full Jupyter notebook functionality for nvim (comparable to VSCode)
* cat/bat for Jupyter Notebooks

# NBEditor.nvim (Plugin without Code Server)

* start simpler: : attractive viewing of jupyter notebooks, with nice frames
* → tricky question: how to allow editing within cell to change contents? (perhaps not the simplest idea, but certainly enlightening)

# Juventas.nvim

* add notebooks to goneovim! or focus on wezterm (yep, probably that)

# VimQTConsole - qtconsole with full vim keybindings and nvim as a backend editing server

* [jupyter/jupyter_console](https://www.google.com/url?q=https://github.com/jupyter/jupyter_console&sa=D&source=editors&ust=1711378556488622&usg=AOvVaw3q1vDtf6fyEQu-p-e70-w_) - [...](https://www.google.com/url?q=https://jupyter-console.readthedocs.io/en/latest/&sa=D&source=editors&ust=1711378556488849&usg=AOvVaw31rrl63oIbbF1NC7VNIqC2)[Docs](https://www.google.com/url?q=https://jupyter-console.readthedocs.io/en/latest/&sa=D&source=editors&ust=1711378556489067&usg=AOvVaw2yjTrOFvZCSeRAVWj0JRKJ)
* [jupyter/qtconsole](https://www.google.com/url?q=https://github.com/jupyter/qtconsole&sa=D&source=editors&ust=1711378556489338&usg=AOvVaw013fqtfUD4k1GUfIc8CgBv) - [...](https://www.google.com/url?q=https://qtconsole.readthedocs.io/en/stable/index.html&sa=D&source=editors&ust=1711378556489553&usg=AOvVaw0yu7A3bpgh5LKBfhA6ZHwb)[Docs](https://www.google.com/url?q=https://qtconsole.readthedocs.io/en/stable/index.html&sa=D&source=editors&ust=1711378556489780&usg=AOvVaw0t2Z5lll7G7F1yf0PN8fXL)
* → download and try out both console and qtconsole
* fork - add vim keybindings and color scheme support, eventually even make controllable from within nvim (wm/launcher pre-configured layout to open both, ready-to-use)
* [Neovim and Qtconsole setup for Data Science with Python | My Blog](https://www.google.com/url?q=https://www.blog.gambitaccepted.com/2020/04/26/neovim-qtconsole-setup/&sa=D&source=editors&ust=1711378556490220&usg=AOvVaw0387vkYb4K8OJ7yBboOGoa)
* [Demonstration of the Jupyter QtConsole + Vim integration](https://www.google.com/url?q=https://youtu.be/Fi_Xd6h4ncw&sa=D&source=editors&ust=1711378556490428&usg=AOvVaw1S3Bijs78WicgnKS6skWpd)
* [glacambre/firenvim](https://www.google.com/url?q=https://github.com/glacambre/firenvim&sa=D&source=editors&ust=1711378556490685&usg=AOvVaw1Ze8i3BaOuiGgY8kdmfquZ) - something like this for qtconsole, but for qt instead of browser
* [Niche Vim/Neovim Plugins. Overview | by alpha2phi | Medium](https://www.google.com/url?q=https://alpha2phi.medium.com/niche-neovim-plugins-722b34f76291&sa=D&source=editors&ust=1711378556491115&usg=AOvVaw0aufc4LSu8XZcajrli6EWN) - maybe some of these

# Related Projects

* [GCBallesteros/NotebookNavigator.nvim](https://www.google.com/url?q=https://github.com/GCBallesteros/NotebookNavigator.nvim&sa=D&source=editors&ust=1711378556491565&usg=AOvVaw2J-w1XlOL7CNE6bHgRunb_) (old: [...](https://www.google.com/url?q=https://www.maxwellrules.com/misc/nvim_jupyter.html&sa=D&source=editors&ust=1711378556491832&usg=AOvVaw2zXrn72PM8EM9qFzngAt-s)[Maxwell Rules - NeoVim Notebooks](https://www.google.com/url?q=https://www.maxwellrules.com/misc/nvim_jupyter.html&sa=D&source=editors&ust=1711378556492003&usg=AOvVaw2k7ufUE6Fb-Bmxx4xxFZaO))
* [benlubas/molten-nvim](https://www.google.com/url?q=https://github.com/benlubas/molten-nvim&sa=D&source=editors&ust=1711378556492218&usg=AOvVaw1TWxLrw7D3c4CHO3Js5Fyd)
* [dccsillag/magma-nvim](https://www.google.com/url?q=https://github.com/dccsillag/magma-nvim&sa=D&source=editors&ust=1711378556492419&usg=AOvVaw3PMJofJ0yMfkGR-pU6aghr)
* [milanglacier/quarto-nvim](https://www.google.com/url?q=https://github.com/milanglacier/quarto-nvim&sa=D&source=editors&ust=1711378556492609&usg=AOvVaw3KO8gZvDA4ET3gC_nTPMFg)
* [lkhphuc/jupyter-kernel.nvim](https://www.google.com/url?q=https://github.com/lkhphuc/jupyter-kernel.nvim&sa=D&source=editors&ust=1711378556492818&usg=AOvVaw3o0KsblC3ojhObBKQXcoxb)
* [luk400/vim-jukit](https://www.google.com/url?q=https://github.com/luk400/vim-jukit&sa=D&source=editors&ust=1711378556493011&usg=AOvVaw0ZoMvlER2o1JRscac8-Joq)
* [WhiteBlackGoose/magma-nvim-goose](https://www.google.com/url?q=https://github.com/WhiteBlackGoose/magma-nvim-goose&sa=D&source=editors&ust=1711378556493222&usg=AOvVaw0oHurKK8svGvGeGx_IBuZl)
* [untitled-ai/jupyter_ascending.vim](https://www.google.com/url?q=https://github.com/untitled-ai/jupyter_ascending.vim&sa=D&source=editors&ust=1711378556493421&usg=AOvVaw2nqMl9eGqrlRDkUFjPQfX_)
* [...](https://www.google.com/url?q=https://generallyintelligent.com/open-source/2021-10-14-jupyter-ascending/&sa=D&source=editors&ust=1711378556493569&usg=AOvVaw1Pm1s3mkILXNmh1ohh_NSL)[generallyintelligent.com/open-source/2021-10-14-jupyter-ascending/](https://www.google.com/url?q=https://generallyintelligent.com/open-source/2021-10-14-jupyter-ascending/&sa=D&source=editors&ust=1711378556493763&usg=AOvVaw3dAdo7zDHNhMKZDHxLJUst)
* [kiyoon/jupynium.nvim](https://www.google.com/url?q=https://github.com/kiyoon/jupynium.nvim&sa=D&source=editors&ust=1711378556493994&usg=AOvVaw2edSaIUAN4R20v-B2_DN6K)
* [...](https://www.google.com/url?q=https://github.com/kiyoon/jupynium.nvim&sa=D&source=editors&ust=1711378556494126&usg=AOvVaw2G5PjyFNMyAB6H-k50MS1W)[Selenium-automated Jupyter Notebook that is synchronised with NeoVim in real-time.](https://www.google.com/url?q=https://github.com/kiyoon/jupynium.nvim&sa=D&source=editors&ust=1711378556494274&usg=AOvVaw2EplP-OuBGb0ce0w8EEziO)
* [ubaldot/vim-replica](https://www.google.com/url?q=https://github.com/ubaldot/vim-replica&sa=D&source=editors&ust=1711378556494580&usg=AOvVaw3aWha7BH_buz6RJjL8ljzJ)
* [davidbrochart/jpterm](https://www.google.com/url?q=https://github.com/davidbrochart/jpterm&sa=D&source=editors&ust=1711378556494835&usg=AOvVaw1WybNLEjR3KjHAcfSjjrvQ) 
* [luk400/vim-jukit](https://www.google.com/url?q=https://github.com/luk400/vim-jukit&sa=D&source=editors&ust=1711378556495091&usg=AOvVaw3l525nq9qylB62CNPXL2lx)
* [WhiteBlackGoose/magma-nvim-goose](https://www.google.com/url?q=https://github.com/WhiteBlackGoose/magma-nvim-goose&sa=D&source=editors&ust=1711378556495361&usg=AOvVaw3IAkwDos8rsnLMqfiNDKZo)
* [untitled-ai/jupyter_ascending.vim](https://www.google.com/url?q=https://github.com/untitled-ai/jupyter_ascending.vim&sa=D&source=editors&ust=1711378556495632&usg=AOvVaw3n1qJPHhWl1ISrXRlKtDJF)
* [szymonmaszke/vimpyter](https://www.google.com/url?q=https://github.com/szymonmaszke/vimpyter&sa=D&source=editors&ust=1711378556495903&usg=AOvVaw3NFiEu8mWqP-avlzKJhqVT)
* [dccsillag/magma-nvim](https://www.google.com/url?q=https://github.com/dccsillag/magma-nvim&sa=D&source=editors&ust=1711378556496170&usg=AOvVaw1niGYImzN8mxJYrhrvSef3)
* [luk400/vim-jukit](https://www.google.com/url?q=https://github.com/luk400/vim-jukit&sa=D&source=editors&ust=1711378556496391&usg=AOvVaw0JIt5aW-X_hSVisglFJvWD)
* [hanschen/vim-ipython-cell](https://www.google.com/url?q=https://github.com/hanschen/vim-ipython-cell&sa=D&source=editors&ust=1711378556496619&usg=AOvVaw0zA8wm8NWK3yoRggJb6k_5)
* [subnut/nvim-ghost.nvim](https://www.google.com/url?q=https://github.com/subnut/nvim-ghost.nvim&sa=D&source=editors&ust=1711378556496846&usg=AOvVaw1DHYdBBp45TSTxb6sQ1cdS)
* [hanschen/vim-ipython-cell](https://www.google.com/url?q=https://github.com/hanschen/vim-ipython-cell&sa=D&source=editors&ust=1711378556497149&usg=AOvVaw26SaJdqVCvyTs12H6y0BJz)
* [mljar.com/blog/jupyter-notebook-presentation/](https://www.google.com/url?q=https://mljar.com/blog/jupyter-notebook-presentation/&sa=D&source=editors&ust=1711378556497485&usg=AOvVaw1hARHPOnXfFOEtKST-Y6HX)
* [http://millejoh.github.io/emacs-ipython-notebook/](https://www.google.com/url?q=http://millejoh.github.io/emacs-ipython-notebook/&sa=D&source=editors&ust=1711378556497784&usg=AOvVaw0CdCo5ywk7O7wjQYxgxqQ2)
* [Jupyter Notebook + Vim/Neovim. Vim/Neovim code editing experience for… | by alpha2phi | Medium](https://www.google.com/url?q=https://alpha2phi.medium.com/jupyter-notebook-vim-neovim-c2d67d56d563&sa=D&source=editors&ust=1711378556498068&usg=AOvVaw1Uwy2xRKtc34g4pZ5615Ue)
* [Demonstrating Vim-Jupyter integration](https://www.google.com/url?q=https://youtu.be/h59cbg4HqpY&sa=D&source=editors&ust=1711378556498319&usg=AOvVaw2s9zSsDiFN1Tv1n8mQ5KAq)
* [richban.tech/python-jupyter-notebooks-development-in-neo-vim](https://www.google.com/url?q=https://richban.tech/python-jupyter-notebooks-development-in-neo-vim&sa=D&source=editors&ust=1711378556498578&usg=AOvVaw0x85OUjMNQp4Q9uP9dJ77d)
* [Reddit - Is there any plugin to edit and run jupyter-notebook in nvim](https://www.google.com/url?q=https://www.reddit.com/r/neovim/comments/mjyrfu/is_there_any_plugin_to_edit_and_run/&sa=D&source=editors&ust=1711378556498888&usg=AOvVaw1OzhuBgs4l7kmPMuoZYA_F)
* [Reddit - Nicer jupyter notebook workflow with neovim thanks to Jupytext and mini.ai](https://www.google.com/url?q=https://www.reddit.com/r/neovim/comments/x0hf25/nicer_jupyter_notebook_workflow_with_neovim/&sa=D&source=editors&ust=1711378556499263&usg=AOvVaw0t2rLTBexNVpi8h4gKFuH2)
* [martibosch.github.io/jupyter-emacs-universe/](https://www.google.com/url?q=https://martibosch.github.io/jupyter-emacs-universe/&sa=D&source=editors&ust=1711378556499570&usg=AOvVaw0GiTcETqWwNGaka1uqYiG1)

# General Resources

* [GitHub - fastai/nbdev: Create delightful software with Jupyter Notebooks](https://www.google.com/url?q=https://github.com/fastai/nbdev&sa=D&source=editors&ust=1711378556500045&usg=AOvVaw2CAoFdFPvKNPkgBuSPDWXS)
* [Related projects — xeus documentation](https://www.google.com/url?q=https://xeus.readthedocs.io/en/latest/related.html&sa=D&source=editors&ust=1711378556500316&usg=AOvVaw3aHR-JG1zAukA3AN49azW1)
* [jupytext.readthedocs.io/en/latest/using-cli.html](https://www.google.com/url?q=https://jupytext.readthedocs.io/en/latest/using-cli.html&sa=D&source=editors&ust=1711378556500596&usg=AOvVaw1FZDj4EZ2IYbQu2FOF2-wz)
* [Installation · IRkernel](https://www.google.com/url?q=https://irkernel.github.io/installation/&sa=D&source=editors&ust=1711378556500859&usg=AOvVaw2PW6qOrsozpEJvd0l91_at)
* [Toomey books](https://www.google.com/url?q=http://libgen.is/search.php?%26req%3Dtoomey%26phrase%3D1%26view%3Dsimple%26column%3Ddef%26sort%3Dyear%26sortmode%3DDESC&sa=D&source=editors&ust=1711378556501132&usg=AOvVaw1rRwEG7oKiPdxWRFAsFzTq) (Jupyter)
* [Quarto - Tutorial: Hello, Quarto](https://www.google.com/url?q=https://quarto.org/docs/get-started/hello/neovim.html&sa=D&source=editors&ust=1711378556501427&usg=AOvVaw0aHpNTtkkPpAWrvI4svgAw)
* [Project Jupyter | Get Involved](https://www.google.com/url?q=https://jupyter.org/community&sa=D&source=editors&ust=1711378556501702&usg=AOvVaw1EFwDrHK5wAWbshaAJcSDR)

# Miscellaneous

* [Make Docker container with all the interesting Jupyter kernels → try on](https://www.google.com/url?q=https://jupyter.org/binder&sa=D&source=editors&ust=1711378556502148&usg=AOvVaw3q-bWaCG8zYJiNSbQl42sj)
* [I don't like notebooks.- Joel Grus (Allen Institute for Artificial Intelligence)](https://www.google.com/url?q=https://youtu.be/7jiPeIFXb6U&sa=D&source=editors&ust=1711378556502459&usg=AOvVaw1SH4n_Id93LGPsGXS90h7u)
* [The Zen of vim VS. Jupyter Notebook](https://www.google.com/url?q=https://youtu.be/c2XFq0k3evA&sa=D&source=editors&ust=1711378556502783&usg=AOvVaw2mE_12osQ4X3kZdGetY6uu)
* [VIM for Data Science [2020]](https://www.google.com/url?q=https://youtu.be/gfa2_6OeOkk&sa=D&source=editors&ust=1711378556503092&usg=AOvVaw2e1ecT4Yhn53Wf7Vhug4Nv)
* [Jupyter Notebook Complete Beginner Guide 2023 - From Jupyter to Jupyterlab, Google Colab and Kaggle! Rob Mulla Rob Mulla • • 39.332 visualizaciones hace 11 meses](https://www.google.com/url?q=https://www.youtube.com/watch?v%3D5pf0_bpNbkw&sa=D&source=editors&ust=1711378556503422&usg=AOvVaw1wj7RX1S_bqpLaC1WbGOrB)
* [Niche Vim/Neovim Plugins. Overview | by alpha2phi | Medium](https://www.google.com/url?q=https://alpha2phi.medium.com/niche-neovim-plugins-722b34f76291&sa=D&source=editors&ust=1711378556503751&usg=AOvVaw0agTGe_81cJmt1cctbdkb_)
* ☐ Jupyter & Notebook-Related [...](https://www.google.com/url?q=https://github.com/justmarkham/scikit-learn-videos&sa=D&source=editors&ust=1711378556504117&usg=AOvVaw1Dj15mms2swMcMKl-bgHdo)[justmarkham/scikit-learn-videos: Jupyter notebooks from the scikit-learn video series](https://www.google.com/url?q=https://github.com/justmarkham/scikit-learn-videos&sa=D&source=editors&ust=1711378556504319&usg=AOvVaw2F8DdSNoEmIxCcOyYiH13O)
* [...](https://www.google.com/url?q=https://www.youtube.com/watch?v%3DutNl9f3gqYQ&sa=D&source=editors&ust=1711378556504684&usg=AOvVaw1noh9YpaGwn_GD7IAsf7Ke)
* [...](https://www.google.com/url?q=https://github.com/jupyterlab/jupyterlab&sa=D&source=editors&ust=1711378556504851&usg=AOvVaw1Q97Bhd6NBhQG2p5sATMne)[jupyterlab/jupyterlab: JupyterLab computational environment.](https://www.google.com/url?q=https://github.com/jupyterlab/jupyterlab&sa=D&source=editors&ust=1711378556505034&usg=AOvVaw1q_rtwO_ECV5jnM2Z4xRW6)
* [...](https://www.google.com/url?q=https://www.youtube.com/watch?v%3DstYs_8quGUM&sa=D&source=editors&ust=1711378556505868&usg=AOvVaw1zQEYPkTz3C0FSCf0ooFxs)
* [...](https://www.google.com/url?q=https://www.youtube.com/watch?v%3DFi_Xd6h4ncw&sa=D&source=editors&ust=1711378556506240&usg=AOvVaw2PPVEFaRxfDOf_xVZZz8mG)
* [...](https://www.google.com/url?q=https://www.youtube.com/watch?v%3DDAXQCJAHiAI&sa=D&source=editors&ust=1711378556506601&usg=AOvVaw1X0UYrErp8q9rXCRwCcg_I)
* [...](https://www.google.com/url?q=https://www.youtube.com/watch?v%3DDnkxaEgen0E&sa=D&source=editors&ust=1711378556507136&usg=AOvVaw0NdWeZrwGCzvgAZUiBXxsW)
* [...](https://www.google.com/url?q=https://github.com/voila-gallery&sa=D&source=editors&ust=1711378556507331&usg=AOvVaw1DoVoLJpx4hINxA2Mrhqk7)[Voilà Gallery](https://www.google.com/url?q=https://github.com/voila-gallery&sa=D&source=editors&ust=1711378556507525&usg=AOvVaw0lEEJZI82ma4LnRVsKsYYm)
* [...](https://www.google.com/url?q=https://youtu.be/l7zS8Ld4_iA&sa=D&source=editors&ust=1711378556507703&usg=AOvVaw2RCzTBanHzLT59r1FICHmL)[nbdev tutorial](https://www.google.com/url?q=https://youtu.be/l7zS8Ld4_iA&sa=D&source=editors&ust=1711378556507889&usg=AOvVaw2Szc9TOcLCVN4HsawLl3d9)
* [...](https://www.google.com/url?q=https://youtu.be/l7zS8Ld4_iA&sa=D&source=editors&ust=1711378556508051&usg=AOvVaw1SS8TSCja2gkifpHhYJyRp)[nbdev tutorial -- zero to published project in 90 minutes](https://www.google.com/url?q=https://youtu.be/l7zS8Ld4_iA&sa=D&source=editors&ust=1711378556508236&usg=AOvVaw1i2PaFOZGzw_K8KutPSHJZ)
* [...](https://www.google.com/url?q=https://quarto.org/docs/get-started/&sa=D&source=editors&ust=1711378556508415&usg=AOvVaw2dlKu6BG0a6_BKPjjEijT5)[quarto.org/docs/get-started/](https://www.google.com/url?q=https://quarto.org/docs/get-started/&sa=D&source=editors&ust=1711378556508593&usg=AOvVaw1R2vbCfSllMvZRhI-m5trd)- [ ]  ‣ - [...](https://www.google.com/url?q=https://nbcommands.readthedocs.io/en/latest/&sa=D&source=editors&ust=1711378556508969&usg=AOvVaw0a78GIcs55ByjHwtwKF4xz)[nbcommands.readthedocs.io/en/latest/](https://www.google.com/url?q=https://nbcommands.readthedocs.io/en/latest/&sa=D&source=editors&ust=1711378556509132&usg=AOvVaw1S9L1h4zENYRxxF6BdcFhp)

## SORT

* [paw-lu/nbpreview](https://github.com/paw-lu/nbpreview)

# nbbat

# cat/bat for Jupyter Notebooks

* also make command-line notebook viewer (way to learn Go?) → catnb, batnb, just like bat for notebooks → or capy (capybara?)
* → [faculty.ai/tech-blog/viewing-jupyter-notebooks-on-the-command-line/](https://faculty.ai/tech-blog/viewing-jupyter-notebooks-on-the-command-line/)
* → [jupyter/nbconvert](https://github.com/jupyter/nbconvert) [docs](https://nbconvert.readthedocs.io/en/latest/)
* → [jsvine/nbpreview](https://github.com/jsvine/nbpreview) [-](https://github.com/jsvine/nbpreview) [towardsdatascience.com/preview-your-jupyter-notebooks-in-the-terminal-with-nbpreview-87601a92d0d1](https://towardsdatascience.com/preview-your-jupyter-notebooks-in-the-terminal-with-nbpreview-87601a92d0d1)
* → eventually extend bat?

# Project 1:

* - nbcat-go repo, nbcat command for simple version

# Project 2: `[bat](https://github.com/sharkdp/bat)` sibling (`nbbat` or  `vampyre`)

* Naming: vampyre, capybara → vampyre is better, but use capybara for something else → also pygmy, from pygmy bats
* create cool logo - vampire (or vampire bat) superimposed on planet Jupiter? or superimposed on a notebook? or both?
* logo

    ![Selection_003.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/e74f0423-4454-4dd0-ae43-e45cbc541e73/2b09fb99-064d-4c2f-8e04-8d7ff2938ddc/Selection_003.png)

    ![Selection_002.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/e74f0423-4454-4dd0-ae43-e45cbc541e73/99071ed2-1591-43ae-8629-67638c2f70cf/Selection_002.png)
* [jupiter logo](https://www.google.com/search?q=jupiter+logo+vector+graphic&tbm=isch&ved=2ahUKEwiWsODT2JmCAxU7rycCHVQPBFcQ2-cCegQIABAA&oq=jupiter+logo+vector+graphic&gs_lcp=CgNpbWcQAzoECCMQJzoFCAAQgAQ6BAgAEB46BggAEAUQHjoGCAAQCBAeUN4UWNY6YOY7aABwAHgAgAFMiAG5CJIBAjE2mAEAoAEBqgELZ3dzLXdpei1pbWfAAQE&sclient=img&ei=6H09ZZacK7vensEP1J6QuAU&bih=726&biw=1472&client=firefox-b-d)
* [vampire logo](https://www.google.com/search?q=vampire+logo&tbm=isch&ved=2ahUKEwjguujc2JmCAxWnXqQEHeOzBpIQ2-cCegQIABAA&oq=vampire+logo&gs_lcp=CgNpbWcQAzIFCAAQgAQyBQgAEIAEMgUIABCABDIFCAAQgAQyBQgAEIAEMgUIABCABDIFCAAQgAQyBQgAEIAEMgUIABCABDIFCAAQgAQ6BAgjECc6BwgAEIoFEENQihNYjyNgkCVoAHAAeACAAUyIAYMHkgECMTOYAQCgAQGqAQtnd3Mtd2l6LWltZ8ABAQ&sclient=img&ei=-309ZaDRK6e9kdUP4-eakAk&bih=726&biw=1472&client=firefox-b-d)
* [notebook logo](https://www.google.com/search?q=notebook+logo&tbm=isch&ved=2ahUKEwjvqM_w2JmCAxVpdKQEHXaPAkMQ2-cCegQIABAA&oq=notebook+logo&gs_lcp=CgNpbWcQAzIFCAAQgAQyBQgAEIAEMgUIABCABDIFCAAQgAQyBQgAEIAEMgUIABCABDIFCAAQgAQyBggAEAUQHjIGCAAQBRAeMgYIABAFEB46BAgjECc6BwgjEOoCECc6BwgAEIoFEENQlgpYmB1g7x5oAXAAeACAAVaIAe0HkgECMTSYAQCgAQGqAQtnd3Mtd2l6LWltZ7ABCsABAQ&sclient=img&ei=JX49Za-CD-nokdUP9p6KmAQ&bih=726&biw=1472&client=firefox-b-d)
* [stablediffusionweb.com/#demo](https://stablediffusionweb.com/#demo)
* fork bat codebase, or build on top of it → or incorporate as a dependency? → maybe use as a template, use syntext and maybe markdown processing

# nand2tetris

* Key Resources
* [Nand2tetris videos](https://www.youtube.com/playlist?list=PLrDd_kMiAuNmSb-CKWQqq9oBFN_KNMTaI)
* → to look into
* [jack-language · GitHub Topics](https://github.com/topics/jack-language)
* [abhaynayar/genesis: Minimal OS written in Jack.](https://github.com/abhaynayar/genesis)

# Other Code Projects

* $$$ wezterm-python-pdf-reader - write a terminal PDF reader for wezterm using python, matplotlib, and matplotlib, together with python pdf library and matplotlib-backend-wezterm
* [neurosciencenews.com/color-perception-retinal-cells-25935/](https://neurosciencenews.com/color-perception-retinal-cells-25935/)
* Make NLP-based automatic sorter for notes (embedding-based). Use clustering and classification, experiment with different embedding approaches.

## Projects

## Software for Projects

* ( ) [...](https://blog.superhuman.com/personal-life-dashboard/)
* ( ) [Horizon: The OpenStack Dashboard Project — horizon 23.4.0.dev76 documentation](https://docs.openstack.org/horizon/latest/)
* ( ) [nand2tetris](https://www.nand2tetris.org/)

## Notes

Idea: get stylus drawing / writing tablet and set it up with rnote and also with a handwriting recognition engine that I train on my handwriting, so that I can write on the pad as an alternative to typing on the keyboard.

* To Sort
* make (Flutter, Gnome, GTK, KDE, or other) GUI app for parallel text creation and viewing
  * Packaging)
* [PyInstaller Manual — PyInstaller 5.7.0 documentation](https://pyinstaller.org/en/stable/)
* [How to Install Windows 10 in VirtualBox in Linux](https://itsfoss.com/install-windows-10-virtualbox-linux/)
* [Install macOS Monterey, Big Sur Or Catalina In A Virtual Machine Using Docker-OSX - Linux Uprising Blog](https://www.linuxuprising.com/2021/03/install-macos-big-sur-or-catalina-in.html)
* [Macos on Linux](https://christitus.com/macos-on-linux/)
* [4+ Ways to Run Windows Software on Linux](https://www.howtogeek.com/133515/4-ways-to-run-windows-software-on-linux/)
* [Wine Alternatives for Mac: Top 10 Compatibility Layer Tools and similar apps | AlternativeTo](https://alternativeto.net/software/wine/?platform=mac)
* [Darling |](https://www.darlinghq.org/)
* [Getting a free Windows virtual machine from Microsoft - ADG](https://www.accessibility-developer-guide.com/setup/windows/virtual-machines/)
* [Welcome to the Accessibility Developer Guide! - ADG](https://www.accessibility-developer-guide.com/)
* [Download a Windows virtual machine - Windows app development | Microsoft Developer](https://developer.microsoft.com/en-us/windows/downloads/virtual-machines/)
* [Installing macOS on a Virtual Machine | Apple Developer Documentation](https://developer.apple.com/documentation/virtualization/installing_macos_on_a_virtual_machine)
* [Creating and Running a Linux Virtual Machine | Apple Developer Documentation](https://developer.apple.com/documentation/virtualization/creating_and_running_a_linux_virtual_machine)

        how to run Windows and Docker VMs (for app testing)
* [MacStadium | Mac Servers and Cloud Solutions on Apple Hardware](https://www.macstadium.com/)
* [pipx](https://pypa.github.io/pipx/)
* [Widdershin/flask-desktop: flask-desktop lets you create first class desktop applications in Python with HTML/CSS](https://github.com/Widdershin/flask-desktop)
* [Electron alternative: Python and Qt. Create desktop apps in minutes.](https://build-system.fman.io/)
* [jordansissel/fpm: Effing package management! Build packages for multiple platforms (deb, rpm, etc) with great ease and sanity.](https://github.com/jordansissel/fpm)
* [Run Linux GUI apps with WSL | Microsoft Learn](https://learn.microsoft.com/en-us/windows/wsl/tutorials/gui-apps)
* [GitHub Packages Documentation - GitHub Docs](https://docs.github.com/en/packages)
* [Publish a package on PyPi using Poetry | Brain Sorting](https://www.brainsorting.com/posts/publish-a-package-on-pypi-using-poetry/)
* [mherrmann/fbs-tutorial: Tutorial for creating Python/Qt GUIs with fbs](https://github.com/mherrmann/fbs-tutorial)
* [leimao/Wine-Docker-Image: Wine Docker Image to Run Windows Applications](https://github.com/leimao/Wine-Docker-Image)
* [Packaging - Debian Wiki](https://wiki.debian.org/Packaging)
* [Python Packaging Guidelines :: Fedora Docs](https://docs.fedoraproject.org/en-US/packaging-guidelines/Python/)
* [Overview — Ubuntu Packaging Guide](https://packaging.ubuntu.com/html/)
* [Python/LibraryStyleGuide - Debian Wiki](https://wiki.debian.org/Python/LibraryStyleGuide)
* [Dependencies Management in Setuptools - setuptools 66.1.1.post20230123 documentation](https://setuptools.pypa.io/en/latest/userguide/dependency_management.html)
* [Build System Support - setuptools 66.1.1.post20230123 documentation](https://setuptools.pypa.io/en/latest/build_meta.html)
* [Options for Python packaging: Wheels, Conda, Docker, and more](https://pythonspeed.com/articles/distributing-software/)
* [Reddit - I made a Python compiler, that can compile Python source down to fast, standalone executables.](https://www.reddit.com/r/Python/comments/w7vlim/i_made_a_python_compiler_that_can_compile_python/)

  * Algorithms
* [TypeScript](https://github.com/TheAlgorithms/TypeScript)
* [C](https://github.com/TheAlgorithms/C)
* [Lua](https://github.com/TheAlgorithms/Lua)
* [Python](https://github.com/TheAlgorithms/Python)
* [Ruby](https://github.com/TheAlgorithms/Ruby)
* [Java](https://github.com/TheAlgorithms/Java)
* [Julia](https://github.com/TheAlgorithms/Julia)
* [Rust](https://github.com/TheAlgorithms/Rust)
* [Go](https://github.com/TheAlgorithms/Go)
* [scripts](https://github.com/TheAlgorithms/scripts)
* [JavaScript](https://github.com/TheAlgorithms/JavaScript)
* [Algorithms-Explanation](https://github.com/TheAlgorithms/Algorithms-Explanation)
* [OCaml](https://github.com/TheAlgorithms/OCaml)
* [Kotlin](https://github.com/TheAlgorithms/Kotlin)
* [Jupyter](https://github.com/TheAlgorithms/Jupyter)
* [R](https://github.com/TheAlgorithms/R)
* [Elm](https://github.com/TheAlgorithms/Elm)
* [Elixir](https://github.com/TheAlgorithms/Elixir)

  * GUI Resources
* [GUI - Things and Stuff Wiki](https://wiki.thingsandstuff.org/GUI)
* [themix-project/themix-gui](https://github.com/themix-project/themix-gui)
* [Use Python? This GUI runs EVERYWHERE!](https://youtu.be/9r13xXMVo4s)

  * Sponsorship
* [8 Best Patreon Alternatives & Competitors For 2023 (Comparison)](https://bloggingwizard.com/patreon-alternatives/)

    browse & build LF_aligner (in pkgs)
* [topics/pdflatex](https://github.com/topics/pdflatex)
* [SDL Trados Studio - A Practical Guide](http://library.lol/main/705A598EFCA8D210EC4FF9638FEF7C37) (language learning tools)

    Make folder for Udemy Cpp Course
* [How to contribute to open source - YouTube](https://www.youtube.com/watch?v=2L0sxPx4C18)
* [topics/pdftex](https://github.com/topics/pdftex)
* [GitHub Sponsors accounts](https://github.com/sponsors/accounts)
* [sirjofri/glossy: a LaTeX package for interlinear glosses](https://github.com/sirjofri/glossy)
* [8 Best Patreon Alternatives & Competitors For 2023 (Comparison)](https://bloggingwizard.com/patreon-alternatives/)

* [keyboard-trainer](git@github.com:yelircaasi/keyboard-trainer-cpp.git)

* Jupyter
* [joouha/euporie](https://github.com/joouha/euporie)
* [Jupyter kernels · jupyter/jupyter Wiki](https://github.com/jupyter/jupyter/wiki/Jupyter-kernels)
* [jupyter-xeus/xeus: Implementation of the Jupyter kernel protocol in C++](https://github.com/jupyter-xeus/xeus)

    develop vim keybindings for google sheets

    Nyxt extension: intelligent (and optionally interactive) page color scheme

    how to hack the color scheme and style of jupyter notebook and jupyterlab
* [ghaiklor/nand-2-tetris: Computer built from the ground up on top of own CPU, while compiler and assembler for it implemented in Rust language](https://github.com/ghaiklor/nand-2-tetris)

    mathematics of dating at macro level, micro too
* [Python Keylogger](https://www.youtube.com/watch?v=hL3rB9ttZFU)

  * **norvig/pytudes -> add to polyglot-projects
* [norvig/paip-lisp: Lisp code for the textbook "Paradigms of Artificial Intelligence Programming"](https://github.com/norvig/paip-lisp)
* [life4/textdistance: Compute distance between sequences. 30+ algorithms, pure python implementation, common interface, optional external libs usage.](https://github.com/life4/textdistance)
* [python - Evaluating a mathematical expression in a string - Stack Overflow](https://stackoverflow.com/questions/2371436/evaluating-a-mathematical-expression-in-a-string)
* [CareScribe](https://github.com/carescribe)
* [datamllab/awesome-game-ai: Awesome Game AI materials of Multi-Agent Reinforcement Learning](https://github.com/datamllab/awesome-game-ai)
* [Leaderboard and Visualization for RLCard with Python](https://morioh.com/p/7428e04ab1c8)
* [RLCard: A Toolkit for Reinforcement Learning in Card Games – arXiv Vanity](https://www.arxiv-vanity.com/papers/1910.04376/)
* [LaTeX Development Code](https://www.latex-project.org/latex3/code/)
* [textual.textualize.io/](https://textual.textualize.io/)
* [Python GUIs – Create GUI applications with Python and Qt](https://www.pythonguis.com/)
* [Rosetta Code](https://rosettacode.org/wiki/Rosetta_Code)
* [adambard/learnxinyminutes-docs: Code documentation written as code! How novel and totally my idea!](https://github.com/adambard/learnxinyminutes-docs)
* [Vigemus/iron.nvim](https://github.com/Vigemus/iron.nvim)

    seriously pursue ancient greek and latin tts - need to pursue serious data collection

    also add TTS option for parallel text
* [everydaycodings/MimicMania](https://github.com/everydaycodings/MimicMania)

    Google Drive dvc server -> look at alternatives like NextCloud

    contrib: Julia pre-commit hooks

    learn about how packageing works on github

    look into wine and darling for building PTTK apps for all 3 major platforms

    make web-based GUI for PTTK apps and find sponsor to host?

    pipx best solution for quick and painless installation?

    web-based GUI (Flask/Django) -> create flask-desktop package? -> contrip by adding to pypi

    distribute as Docker container with associated CLI

    top priority for PTTK apps: 2 (and eventually more) CLI Python apps working for Bash/Zsh

    distribute parallel text apps as flatpaks, nix, and guix

    compare mkdocs and sphinx

    work harder on NLP and SP cheatsheet site

    get serious about code generation with ChatGPT (and competitors)

    make interactive config scripts for parallel text apps

    create directory of template directories to copy

    somehow link to or use The Algorithms in MWE

    MWE: use PE, RC, BeautifulAlgorithms.jl, Hyperpolyglot -> draw upon for polyglot-programming-tasks

    contribute to RosettaCode, Hyperpolyglot, Learn X in Y

    contact clarkgrubb about maintaining hyperpolyglot

    sup up snippets

    WayforPay

    explore and grok nix-env vs nix-shell

    use Rinohtype in PTF?

    add Exercism, Leetcode, Hackerrank to peersonal site

    find better hoster for personal site (ideally same as app server, or free)

    add prolyglot-snippets as counterpart to polyglot-tasks

    add RSA or other crypto algorithm to polyglot-tasks

    write shell functions to locate all relevant nvidia folders/files

    list important programs and where they are installed (all directories)

    read Conda, Miniconda, Anaconda, Mamba docs

    test out boost library

    contribute new useful pre-commits

    re-implement nand2tetris in other languages (Rust, Julia, Python, C++) as part of polyglot-programming-tasks

    PTF workflow: open and validate bitest, open and validate config, use both to create bitext object, generate TeX string, save, compile

    topics (PTF, but also others): packaging as AppImage, FlatPak, .exe (via Pyinstaller) unix container (docker-slim + Alpine) -> WSL, Nix, Guix, alt.: pure Python + system LaTeX

    PTF: implement as Julia, Lua (+C), Perl, Java, C, Haskell, Rust -> add as project(s) to MWE repo; first steps: read files line-by-line and print line pairs side-by-side, then read and save bitext in simple bilingual format (side-by-side, or interlinear)

    get study-notes looking presentable for public viewing on github

    contrib: write onnx exporter for spacy and thinc models

    create a github repo to serve as a repository of ideas and "unfilled gaps" for people looking for a project

    move all small ml & dl projects to polyglot-projects

    make a comparison of string formatting across languages

    develop reader mode in indie browsers: Nyxt, Qutebrowser, Luakit, etc. -> make my own if none exists

    learn to cross-compile C/C#/Rust/Zig to .exe, Mach-O

    work: single-shot vs dialog methods for NLU query parsong

    all pyproject.toml to RLCard

    add color themes to my site, polyglot toolkit site, etc
* [iron.nvim call for help](https://www.reddit.com/r/neovim/comments/tjui61/ironnvim_help_wanted/)
* [gource iron.nvim](https://www.youtube.com/watch?v=mRuJwU2FJkw)

    Python: How to package something with options for usage as API/CLI/TUI/GUI? How to make all apps use vifm as default file browser?

    Build full Zathura in Docker container / get full Zathura via Nix

    Figure out how to edit extension .css stylesheets for browsers (sqlite / IndexedDB)
* [check out](https://github.com/dylanaraps/pywal)

    how to make typing practice app intercept even control keys? → xdotool/wayland equivalent?

    transformer notes → study-notes

    make rlboard analogous to rlcard
* [add to study-notes:](https://github.com/jonasbb/pre-commit-latex-hooks)

    How do VSCode / Gnome intercept prefix keys for redefining shortcuts?

    make gh templates for myself

    MAKE ANKI DECKS FROM PYTHON DOCS (BUILTINS, GLOSSARY, ETC) -> also julia, rust, etc
* [mossr/BeautifulAlgorithms.jl: Concise and beautiful algorithms written in Julia](https://github.com/mossr/BeautifulAlgorithms.jl)

    arabic speech corpus, arctic l2, buckeye, timit, LJSpeech
* [tsoding/ded: Dramatic EDitor](https://github.com/tsoding/ded)
* [TheAlgorithms/contributor_covenant](https://github.com/TheAlgorithms/contributor_covenant)

## SORT

    ```txt
    Neural Networks from Scratch in Python.pdf

    Learn to type Greek polytonic

    Android

    cpp-machine-learning

    fonts

    keyboard-trainer-cpp

    learning-programming-languages

    minimal-working-examples

    nand2tetris

    nlp-and-sp-cheatsheet

    NNfSiX

    ParallelTextToolkit

    personal-website

    playgrounds

    rl-games

    study-notes

    Thesis

    Wiktionary4LL

    SBT- scala build tool

    sdkman

    buka

    chromium

    mdless

    learning-programming-languages

    playgrounds

    git@github.com:yelircaasi/minimal-working-examples.git

    git@github.com:yelircaasi/nand2tetris.git

    git@github.com:yelircaasi/nlp-and-sp-cheatsheet.git

    git@github.com:yelircaasi/NNfSiX.git (pull from upstream)

    git@github.com:yelircaasi/ParallelTextToolkit.git

    git@github.com:yelircaasi/personal-website.git

    git@github.com:yelircaasi/rl-games.git

    git@github.com:yelircaasi/study-notes.git

    git@github.com:yelircaasi/Wiktionary4LL.git
    ```

* [cherylli/pomodoro-kotlin.git](https://github.com/cherylli/pomodoro-kotlin.git)
* [SimpleMobileTools/Simple-Calendar.git](https://github.com/SimpleMobileTools/Simple-Calendar.git)
* [powerline/fonts.git](https://github.com/powerline/fonts.git)
* [tklitschi/Algorithmen-und-Datenstrukturen](https://github.com/tklitschi/Algorithmen-und-Datenstrukturen)

     [codecrafters-io/build-your-own-x](https://github.com/codecrafters-io/build-your-own-x)

    remove *.pdf from .gitignore of study-notes
* [codecrafters-io/build-your-own-x](https://github.com/codecrafters-io/build-your-own-x)
* [Delgan stars](https://github.com/Delgan?tab=stars)
* [yelircaasi/study-notes: LaTeX notes for the various topics I am studying. Focus on NLP, CS, Math. All topics fair game. May be in non-English languages.](https://github.com/yelircaasi/study-notes)
* [Parsing English in 500 Lines of Python · Explosion](https://explosion.ai/blog/parsing-english-in-python)

    I could make a good 3b1b-style video about two's complement.
* [zty.pe/](https://zty.pe/)
* [Writing to learn](https://www.arecadata.com/writing/)

    Make list of general, useful programming tasks to solve in multiple languages (create Gsheet, add to project list) - get from language documentation examples, tutorials

    Create project to write about Nature, Nurture, Aesthetics, Ethics and Free Will
* [python-for-android — python-for-android 0.1 documentation](https://python-for-android.readthedocs.io/en/latest/)
* [kivy/python-for-android: Turn your Python application into an Android APK](https://github.com/kivy/python-for-android)
* [Kivy: Cross-platform Python Framework for GUI apps Development](https://kivy.org/)
* [Perspective Chapter: Evolution of User Interface and User Experience in Mobile Augmented and Virtual Reality Applications](https://www.intechopen.com/chapters/81140)
* [life4/deal-solver: z3-powered solver (theorem prover) for deal](https://github.com/life4/deal-solver)
* [orsinium-labs/re: Elixir library for writing readable regexes in functional style](https://github.com/orsinium-labs/re)
* [craftinginterpreters.com/](http://craftinginterpreters.com/)
* [ForeignGods/Sorting-Algorithms-Blender](https://github.com/ForeignGods/Sorting-Algorithms-Blender)

    nn to predict gender of loan words in German, compare to surveys of Germans, visualize activations from letters and letter combinations, also how edits influence predictions -> topology? (letterwise input, most likely)

    look back into accent transfer

    look into converting someone into a different race
* deskewer
* [lmb.informatik.uni-freiburg.de/Publications/2015/FDB15/image_orientation.pdf](https://lmb.informatik.uni-freiburg.de/Publications/2015/FDB15/image_orientation.pdf)
* [OpenCV: Introduction to Julia OpenCV Binding](https://docs.opencv.org/4.x/d8/da4/tutorial_julia.html)

## rosetta-regex

* [rosettacode.org/wiki/Regular_expressions](https://rosettacode.org/wiki/Regular_expressions)
* [en.wikipedia.org/wiki/Regular_expression](https://en.wikipedia.org/wiki/Regular_expression)
* [en.wikipedia.org/wiki/Comparison_of_regular_expression_engines](https://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines)
* [regexlearn.com/learn/regex101](https://regexlearn.com/learn/regex101)
* [perldoc.perl.org/perlre](https://perldoc.perl.org/perlre)
* [docs.rs/regex/latest/regex/](https://docs.rs/regex/latest/regex/)
* [rdocumentation.org/packages/base/versions/3.6.2/topics/regex](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/regex)
* [docs.python.org/3/library/re.html](https://docs.python.org/3/library/re.html)
* [lua.org/pil/contents.html#20](https://www.lua.org/pil/contents.html#20)
* [en.cppreference.com/w/cpp/regex](https://en.cppreference.com/w/cpp/regex)
* C
* [delftstack.com/howto/c/c-regex/](https://www.delftstack.com/howto/c/c-regex/)
* [geeksforgeeks.org/regular-expressions-in-c/](https://www.geeksforgeeks.org/regular-expressions-in-c/)
* [blog.teamtreehouse.com/regular-expressions-10-languages](https://blog.teamtreehouse.com/regular-expressions-10-languages)

## [keyboard-trainer](https://github.com/yelircaasi/keyboard-trainer-cpp) 🌱

* C/C++ typing test (first character→key mappings)
* [Learning Scripts & Keyboards](https://docs.google.com/spreadsheets/d/1T_qAG4raIhJYq1mlgJCH8TN-ZNcUl9RM-p4a0aVh5EU/edit?usp=sharing)
* [linuxquestions.org/questions/general-10/plain-c-programming-capturing-key-code-in-the-linux-console-printf-keycode-4175606765/](https://www.linuxquestions.org/questions/general-10/plain-c-programming-capturing-key-code-in-the-linux-console-printf-keycode-4175606765/)
* [en.cppreference.com/w/c/io/getchar](https://en.cppreference.com/w/c/io/getchar)
* → later Rust
* [jrnxf/thokr](https://github.com/jrnxf/thokr)
* [max-niederman/ttyper](https://github.com/max-niederman/ttyper)

### Components

* 1) Scripts
* Latin (accessible from U.S. Intl.)
* Russian
* Ukrainian
* Arabic
* Chinese Zhuyin
* Chinese Wubi
* Chinese Cangjie
* Ancient Greek
* Devanagari
* Japanese Kana keyboard
* 2) Keystrokes
* Vim
  * → key snippets from main programming languages
* VSCode
* Firefox + Vim Vixen
* Ubuntu general
* Guake
* Generic Terminal

### References

* [doc.qt.io/](https://doc.qt.io/)
* [gtk.org/](https://www.gtk.org/)
* [doc.qt.io/qt-5/qtvirtualkeyboard-index.html](https://doc.qt.io/qt-5/qtvirtualkeyboard-index.html)
* [wxwidgets.org/](https://www.wxwidgets.org/)
* [stackoverflow.com/questions/29335758/using-kbhit-and-getch-on-linux](https://stackoverflow.com/questions/29335758/using-kbhit-and-getch-on-linux)
* [javascript - Detect pressed modifier keys without triggering keyboard or mouse events - Stack Overflow](https://stackoverflow.com/questions/22086059/detect-pressed-modifier-keys-without-triggering-keyboard-or-mouse-events)

## Android App

* Design: to-do list with routine lists, scheduler, and corresponding notifications

### Page structure

* Day
  * Morning Routine
  * Evening Routine
  * Roadmap Items
* Week
  * Recurring
  * Roadmap Items
* Month
  * Recurring
  * Roadmap Items
* Year
  * Recurring
  * Roadmap Items
* Planner
* Record of accomplishments

### Features

* Notifications
  * start/stop
  * n-minute warning
  * n-minute interval
* Schedule Item Stopwatch
* Daily Score
* Weekly Score
* Statistics
  * score over time
  * statistics for routine items

### Operations

* Schedule Item → add to Planner
* Move Item
  * Year to quarter
  * Quarter to month
  * Month to Week
  * Month to Day
  * Week to Day
* Change time
  * push back in time
  * pull forward in time
  * switch items

## Reading

* [ ]  [developer.android.com/guide/components/fundamentals](https://developer.android.com/guide/components/fundamentals)
* [ ]  [developer.android.com/guide](https://developer.android.com/guide)
* [ ]  [developer.android.com/codelabs/build-your-first-android-app-kotlin#0](https://developer.android.com/codelabs/build-your-first-android-app-kotlin#0)
* [ ]  [developer.android.com/kotlin/androidbasics](https://developer.android.com/kotlin/androidbasics)
* [ ]  [developer.android.com/courses/android-basics-kotlin/course](https://developer.android.com/courses/android-basics-kotlin/course)
* [ ]  [sitepoint.com/starting-android-development-creating-todo-app/-](https://www.sitepoint.com/starting-android-development-creating-todo-app/-) [ ]  read code and explore app features: ~/Projects/Android/Simple-Calendar
* [ ]  read code and explore app features: ~/Projects/Android/pomodoro-kotlin
* [ ]  [android.googlesource.com/platform/packages/apps/DeskClock/-](https://android.googlesource.com/platform/packages/apps/DeskClock/-) [ ]  [andrea-liu87/MyClock](https://github.com/andrea-liu87/MyClock)
* [ ]  [AdamMc331/ToDo-Kotlin](https://github.com/AdamMc331/ToDo-Kotlin)
* [ ]  [wber/ToDoList](https://github.com/wber/ToDoList)
* [ ]  [ehsan-saddique/Checklist](https://github.com/ehsan-saddique/Checklist)
* [ ]  [Faezehyas/Grocery-CheckList](https://github.com/Faezehyas/Grocery-CheckList)
* [ ]  * [ ]  [zaraco/to-do-list-android-kotlin](https://github.com/zaraco/to-do-list-android-kotlin)
* [ ]  [recruit-mp/LightCalendarView](https://github.com/recruit-mp/LightCalendarView)
* [ ]  [ajithvgiri/stopwatch](https://github.com/ajithvgiri/stopwatch)
* [ ]  [Crazy-Marvin/ToDont](https://github.com/Crazy-Marvin/ToDont)
* [ ]  [mohamedebrahim96/ToDoListZIRO](https://github.com/mohamedebrahim96/ToDoListZIRO)
* [ ]  [serbelga/ToDometer](https://github.com/serbelga/ToDometer)
* [ ]  [agustiyann/ToDoList-Room-MVVM](https://github.com/agustiyann/ToDoList-Room-MVVM)
* [ ]  [ziginsider/Foreground-Service-Demo-Android-App](https://github.com/ziginsider/Foreground-Service-Demo-Android-App)
* [ ]  [SimpleMobileTools/Simple-Clock-Abandoned](https://github.com/SimpleMobileTools/Simple-Clock-Abandoned)
* [ ]  [ognev-zair/Kotlin-AgendaCalendarView](https://github.com/ognev-zair/Kotlin-AgendaCalendarView)
* [ ]  [CleverPumpkin/CrunchyCalendar](https://github.com/CleverPumpkin/CrunchyCalendar)
* [ ]  [JonasWanke/com.jonaswanke.calendar](https://github.com/JonasWanke/com.jonaswanke.calendar)
* [ ]

### Steps

### Extensions

* pomodoro-style timer
* Integration with some external service, such as Notion or Google
* [developers.notion.com/reference/intro](https://developers.notion.com/reference/intro)
* [notion.so/my-integrations](https://www.notion.so/my-integrations)
* [notion.so/help/add-and-manage-integrations-with-the-api](https://www.notion.so/help/add-and-manage-integrations-with-the-api)
* [notion.so/help/create-integrations-with-the-notion-api](https://www.notion.so/help/create-integrations-with-the-notion-api)
* [developers.google.com/sheets/api/quickstart/quickstarts-overview](https://developers.google.com/sheets/api/quickstart/quickstarts-overview)
* [zapier.com/blog/best-android-to-do-list-apps/](https://zapier.com/blog/best-android-to-do-list-apps/)
* [zapier.com/platform/partner-program](https://zapier.com/platform/partner-program)
* [zapier.com/apps/google-sheets/integrations/webhook](https://zapier.com/apps/google-sheets/integrations/webhook)

## [Proofs Book](...)

## Other

* Missing Semester 🌱
* TensorFlow Certification (with Jesse)
* Book: Programming Language Concepts Illustrated: A Contrastive Guided Tour
* Reference / Inspiration: [hyperpolyglot.org/,](https://hyperpolyglot.org/,)  [rosettacode.org/wiki/Rosetta_Code](https://rosettacode.org/wiki/Rosetta_Code)

    Preferred languages:

  * C
  * C++
  * Python
  * Julia
  * Go
  * Rust
  * Scala
  * Kotlin
  * Java
  * JavaScript
  * Bash
  * Haskell
  * Perl
  * Prolog
  * SQL (PostgreSQL)
  * GASM
  * Racket/Scheme
  * Other
  * OCaml
  * Erlang
  * Fortran
  * Ada
  * Lua
  * TypeScript
  * LaTeX
  * Dart
  * Ruby
  * COBOL
  * PHP
  * Nim
  * Tcl

## hosted if-then game web app

* Idea: use Genie.jl to host an if-then application on a Raspberry Pi
* → [google.com/search?q=code your own jackbox](https://www.google.com/search?q=code%20your%20own%20jackbox&ie=utf-8&oe=utf-8&client=firefox-b-m)
* Readings:
* [ ]  [funprojects.blog/2022/01/02/julia-programming-on-a-raspberry-pi/-](https://funprojects.blog/2022/01/02/julia-programming-on-a-raspberry-pi/-) [ ]  [genieframework.github.io/Genie.jl/dev/tutorials/4-1--Developing_MVC_Web_Apps.html](https://genieframework.github.io/Genie.jl/dev/tutorials/4-1--Developing_MVC_Web_Apps.html)
* [ ]  [raspberry-projects.com/pi/projects/raspberry-pi-running-web-app](https://raspberry-projects.com/pi/projects/raspberry-pi-running-web-app)
* [ ]  [fireship.io/lessons/host-website-raspberry-pi/-](https://fireship.io/lessons/host-website-raspberry-pi/-) [ ]  [ngrok.com/pricing](https://ngrok.com/pricing)
* [ ]  [thepihut.com/products/raspberry-pi-400-personal-computer-kit?src=raspberrypi](https://thepihut.com/products/raspberry-pi-400-personal-computer-kit?src=raspberrypi)
* [ ]  [opensource.com/article/21/3/web-hosting-raspberry-pi](https://opensource.com/article/21/3/web-hosting-raspberry-pi)
* [ ]  [juliaberry.github.io/-](https://juliaberry.github.io/-) [ ]  [geniejl.readthedocs.io/en/latest/-](https://geniejl.readthedocs.io/en/latest/-) [ ]  [genieframework.com/docs/tutorials/Overview.html](https://genieframework.com/docs/tutorials/Overview.html)
* [ ]  [softwareengineering.stackexchange.com/questions/184047/how-do-you-handle-multiple-users-editing-the-same-piece-of-data-in-a-webapp](https://softwareengineering.stackexchange.com/questions/184047/how-do-you-handle-multiple-users-editing-the-same-piece-of-data-in-a-webapp)
* [ ]  [genieframework/GenieAuthentication.jl](https://github.com/genieframework/GenieAuthentication.jl)
* [ ]  [GenieFramework/GenieAuthorisation.jl](https://github.com/GenieFramework/GenieAuthorisation.jl)
* [ ]  [genieframework.github.io/Genie.jl/dev/tutorials/1--Overview.html](https://genieframework.github.io/Genie.jl/dev/tutorials/1--Overview.html)
* [ ]  [zdnet.com/article/best-raspberry-pi-kit/-](https://www.zdnet.com/article/best-raspberry-pi-kit/-) [ ]  [pimylifeup.com/raspberry-pi-web-server/-](https://pimylifeup.com/raspberry-pi-web-server/-) [ ]   [tomshardware.com/how-to/raspberry-pi-buying-guide](https://www.tomshardware.com/how-to/raspberry-pi-buying-guide)
* [ ]  [genieframework.github.io/Genie.jl/dev/tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html](https://genieframework.github.io/Genie.jl/dev/tutorials/92--Deploying_Genie_Server_Apps_with_Nginx.html)
* YouTube channel
  * Multilingual YouTube channel: ml, math, languages, book reading, philosophy

        name ideas: Wannabe Polyglot Polymath
* [ ]  graphics: Manim Community
* [ ]  screen capture + camera
* [ ]  keystroke capture
* [ ]  which playlists?
* [video](https://www.youtube.com/hashtag/manim?app=desktop)
* [video](https://www.youtube.com/@TheoremofBeethoven)
  * Ideas

        How a Desktop is Built

        How 2’s Compliment Works

        nand2tetris video
* neural-image-processing-cheatsheet
* [ ]  create

## Trip Planner app (with Jesse) 🌱

* messages with Jesse:
* [ ]  identify key inputs first; worry about getting them later via API
* [ ]  natural language query consisting of a travel plan
* [ ]  query apis
* [ ]  lay down a route to optimize money, time, some combination → add additional constraints
* NNfSiX 🌱
* Lyrics Syncing App (with Jesse)
* RosettaDL - parallel reference (Rosetta-style)

    → start with PyTorch, TF, MXNet, and Flux.jl

  * PyTorch
  * TensorFlow Python (with Keras)
  * MXNet
  * Flux.jl -
  * PyTorch Lightning
  * FastAI
  * HuggingFace
  * PyTorch C++
  * TensorFlow C++
  * Sonnet
  * CNTK
  * DyNet
  * SparkML
  * Deeplearning4j
  * C++ libraries →
* [ ]  PyTorch and TensorFlow pocket references - create spreadsheet of functionalities & corresponding snippets
* [ ]  multiple code options ← D2L book source

## algorithms (Beautiful Algorithms - Julia) 🌱

* learning-programming-languages 🌱
* Code Deep Dives 🌱
* [ ]  binaries
* [opensource.com/article/20/4/linux-binary-analysis](https://opensource.com/article/20/4/linux-binary-analysis)
* [ ]  [linux-audit.com/elf-binaries-on-linux-understanding-and-analysis/](https://linux-audit.com/elf-binaries-on-linux-understanding-and-analysis/)
* [ ]    * [ ]  l
* [ ]  c
* [ ]  pytho
* [ ]  juli
* [ ]  bas
* [ ]  zs
* [ ]  LaTe
* [ ]  XeLaTe
* [ ]  LuaTe
* [ ]  OpenJDK)
* [ ]  [vi](https://sourceforge.net/p/ex-vi/code/) and [vim/vim](https://github.com/vim/vim)
* [Cube9999/vi](https://github.com/Cube9999/vi)
* [hosiet/vi](https://github.com/hosiet/vi)
* [ex-vi.sourceforge.net/](http://ex-vi.sourceforge.net/)
* [aligrudi/neatvi](https://github.com/aligrudi/neatvi)
* [ ]  Git source code: [git/git](https://github.com/git/git)
* [ ]  TensorFlow
* [ ]  PyTorch
* [ ]  NumPy
* [ ]  Pandas
* [ ]  Flux.jl
* [ ]  Scikit-Learn
* [ ]  MXNet
* [ ]  Knet.jl
* [ ]  TextAnalysis.jl
* [ ]  deeplearning4j
* [ ]  Python 3.10 source
* [python/cpython/tree/3.10](https://github.com/python/cpython/tree/3.10)
* [getkt.com/blog/compile-and-install-python-from-source-on-linux/](https://getkt.com/blog/compile-and-install-python-from-source-on-linux/)
* [ ]  Julia 1.6 source
* [JuliaLang/julia](https://github.com/JuliaLang/julia)
* [JuliaLang](https://github.com/JuliaLang)
* [ ]  LaTeX
* [tug.org/texlive/doc/tlbuild.html](https://www.tug.org/texlive/doc/tlbuild.html)
        -
* [ ]  Linux kernel
* [torvalds/linux](https://github.com/torvalds/linux)
* [kernel.org/doc/html/latest/](https://www.kernel.org/doc/html/latest/)
* [kernelnewbies.org/](https://kernelnewbies.org/)
* [ ]  .)
* [ ]  [wch/r-source](https://github.com/wch/r-source)
* language-learning 🌱
* cpp-machine-learning 🌱

## Proverbs Project 🌱

* → see also CLSEC, child project of Wiktionary4LL
* [Polyglot Phraseological Database](https://docs.google.com/spreadsheets/d/1HYEgCsnmjhulEnM7tq53AV7IrRbYhFcUnfjAp0cCAGI/edit?usp=sharing)
* [(PDF) Idiomatic Equivalence between English and Arabic: Understanding and Recognizing ( M A Dissertation ) | Gamal M A Abdullah - Academia.edu](https://www.academia.edu/27132535/Idiomatic_Equivalence_between_English_and_Arabic_Understanding_and_Recognizing_M_A_Dissertation_)
* [(PDF) The Proverb and Its 44 Definitions (Part I): A Ka:rmik Linguistic Review with a Checklist | Bhuvaneswar Chilukuri - Academia.edu](https://www.academia.edu/4295188/The_Proverb_and_Its_44_Definitions_Part_I_A_Ka_rmik_Linguistic_Review_with_a_Checklist)
* [(PDF) Translation of Idioms across Languages | Sabir Hasan - Academia.edu](https://www.academia.edu/37045180/Translation_of_Idioms_across_Languages)
* **Пословицы, поговорки, выражения на русском и немецком языках. Аналогия русских и немецких пословиц и поговорок.
* [300 Proverbs and Sayings / Proverbios y Refranes](http://cogweb.ucla.edu/Discourse/Proverbs/English-Spanish.html)
* [Amazon.com: A Dictionary of English and Italian Equivalent Proverbs eBook: Teodor Flonta: Kindle Store](https://www.amazon.com/-/de/dp/B005U1FGJY/ref=sr_1_fkmr2_2?__mk_de_DE=%C3%85M%C3%85%C5%BD%C3%95%C3%91&keywords=flont+romanian+proverbs+9+languages&qid=1582120445&sr=8-2-fkmr2)
* [Amazon.com: A Dictionary of English and Romance Languages Equivalent Proverbs eBook: Teodor Flonta: Kindle Store](https://www.amazon.com/-/de/dp/B006KRRBS6/ref=sr_1_fkmr2_1?__mk_de_DE=%C3%85M%C3%85%C5%BD%C3%95%C3%91&keywords=flont+romanian+proverbs+9+languages&qid=1582120445&sr=8-1-fkmr2)
* [Amazon.com: A Dictionary of English and Romanian Equivalent Proverbs eBook: Teodor Flonta: Kindle Store](https://www.amazon.com/-/de/dp/B00FEI57BA/ref=sr_1_fkmr0_1?__mk_de_DE=%C3%85M%C3%85%C5%BD%C3%95%C3%91&keywords=flont+romanian+proverbs+9+languages&qid=1582120445&sr=8-1-fkmr0)
* [Amazon.com: A Multilingual Dictionary of Maxims and Proverbs (9781443873307): Panos Karagiorgos: Books](https://www.amazon.com/Multilingual-Dictionary-Maxims-Proverbs/dp/1443873306)
* [Amazon.com: God and the Devil: Proverbs in 9 European Languages (9781546653356): Teodor Flonta: Books](https://www.amazon.com/God-Devil-Proverbs-European-Languages/dp/154665335X)
* [Cordry, H: The Multicultural Dictionary of Proverbs: Over 20, 000 Adages from More Than 120 Languages, Nationalities and Ethnic Groups: Amazon.de: Harold V. Cordry: BÃ¼cher](https://www.amazon.de/Multicultural-Dictionary-Proverbs-Languages-Nationalities/dp/0786422629/ref=sr_1_1?__mk_de_DE=%C3%85M%C3%85%C5%BD%C3%95%C3%91&keywords=Multicultural+dictionary+of+Proverbs&qid=1582109813&s=books&sr=1-1)
* [God and the Devil: Proverbs in 9 European Languages - Teodor Flonta - Google Книги](https://books.google.de/books?id=anr2T1TJ0goC&pg=PA108&lpg=PA108&dq=Flonta+Romanian+Proverbs+9+Languages&source=bl&ots=50HxLxRSUa&sig=ACfU3U0l1ZVVZEGvHi9OH7JfwU2UXyUBlA&hl=ru&sa=X&ved=2ahUKEwj9gMLo3t3nAhWlPOwKHbXWAjUQ6AEwCnoECAoQAQ#v=onepage&q=Flonta%20Romanian%20Proverbs%209%20Languages&f=false)
* [citati.hr/hrvatske-poslovice](http://citati.hr/hrvatske-poslovice)
* [de.wikihow.com/G%C3%A4ngige-Ausdr%C3%BCcke-und-Redewendungen-in-verschiedenen-Sprachen-beherrschen](http://de.wikihow.com/G%C3%A4ngige-Ausdr%C3%BCcke-und-Redewendungen-in-verschiedenen-Sprachen-beherrschen)
* [edukacija.rs/izreke-i-citati/narodne-poslovice](http://edukacija.rs/izreke-i-citati/narodne-poslovice)
* [edukacija.rs/izreke-i-citati/narodne-poslovice/srpske](http://edukacija.rs/izreke-i-citati/narodne-poslovice/srpske)
* [mudremisli.net/hrvatske-izreke/](http://mudremisli.net/hrvatske-izreke/)
* [ordtak.org/](http://ordtak.org/)
* [pixelizam.com/narodne-poslovice/](http://pixelizam.com/narodne-poslovice/)
* [przyslowia-polskie.pl/](http://przyslowia-polskie.pl/)
* [croatianhistory.net/etf/poslovice.html](http://www.croatianhistory.net/etf/poslovice.html)
* [notesinspanish.com/2011/05/02/common-spanish-expressions-getting-up-on-the-wrong-side-of-the-bed/](http://www.notesinspanish.com/2011/05/02/common-spanish-expressions-getting-up-on-the-wrong-side-of-the-bed/)
* [ordsprak.se/svenska_ord.asp](http://www.ordsprak.se/svenska_ord.asp)
* [ordtak.com/forfatter.php?fn=Ordtak&ln=](http://www.ordtak.com/forfatter.php?fn=Ordtak&ln=)
* [poslovice.org/hrvatske-poslovice/](http://www.poslovice.org/hrvatske-poslovice/)
* [poslovice.org/srpske-poslovice/](http://www.poslovice.org/srpske-poslovice/)
* [proverbia.net/default.asp](http://www.proverbia.net/default.asp)
* [woorden.org/spreekwoord.php](http://www.woorden.org/spreekwoord.php)
* [brainly.pl/wypracowanie/Najpopularniejsze_polskie_przyslowia-18014](https://brainly.pl/wypracowanie/Najpopularniejsze_polskie_przyslowia-18014)
* [de-roliga-skamt.se/svenska-ordsprak/](https://de-roliga-skamt.se/svenska-ordsprak/)
* [hr.wikiquote.org/wiki/Hrvatske_poslovice](https://hr.wikiquote.org/wiki/Hrvatske_poslovice)
* [learningapps.org/view1558402](https://learningapps.org/view1558402)
* [livet.se/ord/k%c3%a4lla/Svenskt_ordspr%c3%a5k](https://livet.se/ord/k%c3%a4lla/Svenskt_ordspr%c3%a5k)
* [no.wikiquote.org/wiki/Norske_ordtak](https://no.wikiquote.org/wiki/Norske_ordtak)
* [pl.wikiquote.org/wiki/Przys%C5%82owia_polskie](https://pl.wikiquote.org/wiki/Przys%C5%82owia_polskie)
* [przyslowia.net/](https://przyslowia.net/)
* [spreekwoorden.nl/](https://spreekwoorden.nl/)
* [sv.wikipedia.org/wiki/Lista_%C3%B6ver_svenska_ordspr%C3%A5k](https://sv.wikipedia.org/wiki/Lista_%C3%B6ver_svenska_ordspr%C3%A5k)
* [ordtak.no/](https://www.ordtak.no/)
* [polskatradycja.pl/folklor/przyslowia.html](https://www.polskatradycja.pl/folklor/przyslowia.html)
* [spreekwoord.nl/](https://www.spreekwoord.nl/)
* [Lexical and Semantic Aspects of Proverbs - Čermák, František - Google Книги](https://books.google.de/books?id=Xua9DwAAQBAJ&pg=PA233&lpg=PA233&dq=proverbs+and+their+equivalents+in+other+languages&source=bl&ots=ckopOIGFd_&sig=ACfU3U3xQeffXByhK-YudKRCbDpwKzQ1gA&hl=ru&sa=X&ved=2ahUKEwix_du0493nAhWJM-wKHS8XAak4FBDoATAJegQICRAB#v=onepage&q=proverbs%20and%20their%20equivalents%20in%20other%20languages&f=false)
* [Library Genesis: Fisher, Suzanne Woods - Amish Proverbs : Words of Wisdom from the Simple Life](https://libgen.is/book/index.php?md5=8F8AC63DA86509B2A545FDBE0480F5C9)
* [Collection of Ambiguous or Inconsistent/Incomplete Statements](http://www.gray-area.org/Research/Ambig/)
* [mymemory.translated.net/doc/spec.php](https://mymemory.translated.net/doc/spec.php)
* [Library Genesis: Wood, James - Dictionary of quotations from ancient and modern, English and foreign sources : including phrases, mottoes, maxims, proverbs, definitions, aphorisms, and sayings of the wise men, in their bearing on life, literature, speculation, science, art, religion, and morals, especially in the modern aspects of them](https://libgen.is/book/index.php?md5=754E7204F484ABE220E9E146AAE9A910)
* [Polyglot Phraseological Database - Hojas de cálculo de Google](https://docs.google.com/spreadsheets/d/1xQE30iCryMege8m63T-KdK3JYeIry2oDZ1YU_EiFftM/edit#gid=0)
* [Pr](https://docs.google.com/spreadsheets/d/13UNAdR0u_uLzgJPf-Tb8AtxpcD_m46rzCJYSQQB9ATs/edit#gid=1229256882)
* [The Multicultural Dictionary of Proverbs: Over 20,000 Adages from More Than ... - Harold V. Cordry - Google Книги](https://books.google.com/books?id=OhSBCgAAQBAJ&pg=PA55&lpg=PA55&dq=THE+POOR+MAN+AND+DEATH+latin&source=bl&ots=ItGv3f2wqX&sig=nODIqoYqiy0WJdUQwSI02kADAXk&hl=ru&sa=X&ved=2ahUKEwjczeGtkeXfAhWDCjQIHR1ICuYQ6AEwAXoECAgQAQ#v=onepage&q=THE%20POOR%20MAN%20AND%20DEATH%20latin&f=false)
* [The Son of a Duck Is a Floater and other Arabic Proverbs with English Equivalents: Illustrated Book of Arab Proverbs: Amazon.co.uk: Primrose Arnander, Ashkhain Skipwith, Kathryn Lamb: 9780905743417: Books](https://www.amazon.co.uk/Floater-Arabic-Proverbs-English-Equivalents/dp/0905743415)
* [multi-word expression database - Поиск в Google](https://www.google.com/search?q=multi-word+expression+database&rlz=1C5CHFA_enUS800US800&oq=multi-word+expression+database&aqs=chrome..69i57.6955j0j4&sourceid=chrome&ie=UTF-8)
* [MyMemory API technical specifications](https://mymemory.translated.net/doc/spec.php)
* proverbs in NLP
* [Distinguishing antonymy, synonymy and hypernymy with distributional and distributed vector representations and neural networks](https://elib.uni-stuttgart.de/handle/11682/9973)
* [sciencedirect.com/search?qs=Natural%20Semantic%20Metalanguage](https://www.sciencedirect.com/search?qs=Natural%20Semantic%20Metalanguage)
* [nsm-approach.net/](https://nsm-approach.net/)
* [nsm-approach.net/archives/category/broad-topics/lexicography](https://nsm-approach.net/archives/category/broad-topics/lexicography)
* [b-ok.cc/s/cliff%20goddard](https://b-ok.cc/s/cliff%20goddard)
* [b-ok.cc/s/anna%20wierzbicka](https://b-ok.cc/s/anna%20wierzbicka)
* [sciencedirect.com/science/article/abs/pii/S0378216609000228](https://www.sciencedirect.com/science/article/abs/pii/S0378216609000228)
* [researchgate.net/search.Search.html?type=publication&query=Natural%20Semantic%20Metalanguage](https://www.researchgate.net/search.Search.html?type=publication&query=Natural%20Semantic%20Metalanguage)
* Studies in Ethnopragmatics, Cultural Semantics, and Intercultural Communication: Meaning and Culture
* proverb classification scheme
* [4 Semiotic and Semantic Aspects of the Proverb](https://www.degruyter.com/downloadpdf/books/9783110410167/9783110410167.4/9783110410167.4.xml)
* [[КНИГА] Introduction to paremiology: A comprehensive guide to proverb studies](https://books.google.com/books?hl=ru&lr=&id=-AnuCAAAQBAJ&oi=fnd&pg=PP14&dq=Proverb+classification&ots=G-U2hhSoml&sig=sxDiG_vDjlkGWOHPCoXEi90yQSg)
* [A proverb in mind: The cognitive science of proverbial wit and wisdom](https://content.taylorfrancis.com/books/download?dac=C2007-0-04595-2&isbn=9781134741304&format=googlePreviewPdf)
* [Openness, closure, and transformation in proverb translation](https://pdfs.semanticscholar.org/e9b4/06768cc883ffedfc76c8ad6caf435cc762db.pdf)
* [КЛАСИФІКАЦІЯ ПРИСЛІВ'ЇВ З ГЕНДЕРНОЮ СЕМАНТИКОЮ](http://elar.kpnu.edu.ua:8081/xmlui/bitstream/handle/123456789/2286/Anhliiska-mova-v-mizhdystsyplinarnomu-konteksti-bezperervnoi-osvity-zbirnyk-materialiv-VI-Mizhnarodnoi-studentskoi-Internet-konferentsii.pdf?sequence=1&isAllowed=y#page=64)
* [Semantics and pragmatics of anti-proverbs](http://darhiv.ffzg.unizg.hr/id/eprint/10091/)
* [3 Categorization of Proverbs - De Gruyter - Sciendo](https://content.sciendo.com/downloadpdf/book/9783110410167/10.2478/9783110410167.3.xml)
* 6 Classifications of Proverbs:proverbs expressing a general attitude.ethical proverbs.proverbs expressing a system of values.proverbs expressing general truths.humorous proverbs.miscellaneous proverbs
* [Classification of Proverbs](https://studfile.net/preview/5427909/page:3/)
* [500 Common Chinese Proverbs and Colloquial Expressions. An annotated frequency dictionary](https://b-ok.cc/book/3023312/7d77eb)
* [Phraseographie](https://tidsskrift.dk/her/article/view/25841)
* [Corrientes actuales de la investigación fraseológica en Europa](http://www.euskaltzaindia.net/dok/euskera/25886.pdf)
* [Dormir el sueño de los justos. Fraseología y valores pragmáticos a partir de corpus textuales en alemán y español](http://www.academia.edu/download/37343670/Part_I_A-K_Language_windowing_through_corpora_5-2010.pdf#page=133)
* [Anti-proverbs and mass communication: The interplay of traditional and innovative folklore](https://akademiai.com/doi/abs/10.1556/AEthn.52.2007.1.2)
* [Paremiology Google Scholar](https://scholar.google.de/scholar?hl=it&as_sdt=0%2C5&as_vis=1&q=paremiology&btnG=)
* [Γνώμη](http://www.martinezdecarnero.com/glossword/index.php)
* [Базовые категории паремиологии. В.А. Крыжановская](https://youtu.be/tGxhhi8F1c4)
* [Amazon.com: Introduction to Paremiology: A Comprehensive Guide to Proverb Studies](https://www.amazon.com/Introduction-Paremiology-Comprehensive-Proverb-Studies/dp/311041015X)
* [en.m.wikipedia.org/wiki/Anna_T._Litovkina](https://en.m.wikipedia.org/wiki/Anna_T._Litovkina)
* [sites.google.com/site/philologyroundtable/categories/language-units-in-text-and-discourse/communicativeclassificationofproverbs](https://sites.google.com/site/philologyroundtable/categories/language-units-in-text-and-discourse/communicativeclassificationofproverbs)
* [STUDY OF MACHINE TRANSLATION IN NLP SYSTEMS: NON COMPOSITIONAL IDIOMS AND PROVERBS](https://www.researchgate.net/publication/264286974_STUDY_OF_MACHINE_TRANSLATION_IN_NLP_SYSTEMS_NON_COMPOSITIONAL_IDIOMS_AND_PROVERBS)
* [UNIVERSAL VS. SPECIFIC: CULTURALLY SALIENT PROVERBIAL EXPRESSIONS IN A CROSS-LINGUISTIC PERSPECTIVE](https://www.academia.edu/keypass/MHNwM2o5V2ZmVTVYNmRkTGtqSC8rMWgrRm5FYmhVRzBzNUpxS0Z1ZEFVZz0tLTk2TkpqaW9mOVNqTUxsTDhwcHlGVnc9PQ==--c3eb2e4192b2e97fd9358597bbf60db4f1f3938b/t/drT8b-PjJjMgS-bfcpqK/resource/work/30634430/UNIVERSAL_VS_SPECIFIC_CULTURALLY_SALIENT_PROVERBIAL_EXPRESSIONS_IN_A_CROSS_LINGUISTIC_PERSPECTIVE_in_9th_Interdisciplinary_Colloquium_ob_Proverbs_ICP15_eds_O_Lauhakangas_R_JB_Soares_Tipografia_Tavirense_Tavira_2016_pp_447_457?email_work_card=title)
* [Fishing for productive models in the troubled waters of figurative language](https://www.academia.edu/keypass/blF2OEl6YjNybnkyMFJxZjF2TkQ2QmlXZW1DTFA4OEdYWTE1M05pMW55bz0tLUlPc015VXRyUVlYRDJBY2xSOHBUemc9PQ==--8bc8674f0c599867218b4a812cfc9dc0f520440e/t/drT8b-Potoiyn-PrkiN/resource/work/8529430/PAMIES_Antonio_CRAIG_Margaret_and_GHALAYINI_Yara_2014_Fishing_for_productive_models_in_the_troubled_waters_of_figurative_language_In_Arsenteva_E_F_ed_Phraseology_in_Multilingual_Society_Cambridge_Cambridge_Scholars_Publishing_ISBN_978_1_4438_5584_6_47_70)
* Combine WordNet and NSM with my own syntax to create paremiological (ontology and semrel set) markup language
* [academia.edu/22245450/THE_METHODOLOGICAL_ASPECTS_OF_A_ROMANIAN_ENGLISH_CONTRASTIVE_COLLECTION_OF_FOOD_IDIOMS_AND_PROVERBS](https://www.academia.edu/22245450/THE_METHODOLOGICAL_ASPECTS_OF_A_ROMANIAN_ENGLISH_CONTRASTIVE_COLLECTION_OF_FOOD_IDIOMS_AND_PROVERBS)

## RLCard

* [RLCard: A Toolkit for Reinforcement Learning in Card Games – arXiv Vanity](https://www.arxiv-vanity.com/papers/1910.04376/)
* [Development — RLcard 0.0.1 documentation](https://rlcard.org/development.html#adding-new-environments)

## “philosophers and philosophies on the issues”

    → automated search and question answering

    → matrix completion?

    → product: database of answers to questions of the form “What does X say about Y?”

    → also interesting to do by hand / with a hybrid approach

## Book idea: Ancient Greek through the Stoics; Latin through the Stoics (or GR and LA in one book)

## Sheet Music Player: OCR for scanned sheet music, audio generation (MIDI as intermediate?)

## Other Projects 🌱

## rl-games

### Projects Links

* [ ]  [Drive link](https://drive.google.com/drive/folders/16RpQL0XysyuoJbsrwiZntbL1coD8CigE?usp=sharing)

### Brainstorming

* → use evolutionary algorithm?
* → combine RL and evolutionary algorithm?
* → compare end-to-end with system that uses dynamic internal marking of cards (”need to win” / “need to get rid of”, etc.) and with system that uses probability of winning with each card
* → comparing systems that focus solely on making the bet with systems that also try to ruin the game for others (aggressive strategy)
* → different vector for each number of cards → output vector a score (softmax?) over cards in the hand, → action is to play the highest-scoring card
    → drawback: many different models; advantage: each model is fixed-size and relatively straightforward: $N = \sum^{15}_{i=1} i = 120$ → or N = 15?
    → parameters:
        — $p_c(\textbf{c}) \in [0,1]^{k}$: probability of each card being out there — easy to calculate
        — $p_d(\textbf{c}) \in [0,1]^{k}$: probability of each card being played by someone else — calculate via MC

        — $w(\textbf{c}) \in [0,1]^{k}$: win probability of each card ← (remaining available to be made, wanted for each player, two probability vectors) — calculate via MC

        — $d(\textbf{c}) \in \mathbb{R}^{k}: ||d(c)||=1$: win desirability of each card ← (remaining available, wanted, two probability vectors, win probabilities) — calculate via MC? policy gradient?

        — $s(\textbf{c}) \in [0,1]$: overall hand strength ← (win probability, win desirability)

        — $u(\textbf{c}) \in \mathbb{R}^{k}$: score (utility) per card ← (win probability, win desirability, expected change in overall hand strength)

        — $m \in \{0, 1\}^{k}$: use a card mask to only update values for cards in my hand

        — alternative: recursive formulation, beginning with last card of the round

        — another option: $f(\textbf{c}) \in \{0,1\}^{211}$: card score distribution ← (surplus tricks, size 2k+1, cards in my hand, probability of cards still being out there, position in queue, cards already played) → dimensionality 2k+1+60+60+4+60 = 2k+185 → add number still wanted by each opponent

### References for RLCard

* [datamllab/rlcard](https://github.com/datamllab/rlcard) —> should contribute to as well
* [medium.com/applied-data-science/how-to-train-ai-agents-to-play-multiplayer-games-using-self-play-deep-reinforcement-learning-247d0b440717](https://medium.com/applied-data-science/how-to-train-ai-agents-to-play-multiplayer-games-using-self-play-deep-reinforcement-learning-247d0b440717)
* [davidADSP/SIMPLE](https://github.com/davidADSP/SIMPLE)
* [JaeHunRo/boardgame-rl](https://github.com/JaeHunRo/boardgame-rl)
* [juliareinforcementlearning.org/ReinforcementLearning.jl/](https://juliareinforcementlearning.org/ReinforcementLearning.jl/latest/)
* [juliareinforcementlearning.org/](https://juliareinforcementlearning.org/)
* [JuliaReinforcementLearning](https://github.com/JuliaReinforcementLearning)
* [paperswithcode.com/task/board-games](https://paperswithcode.com/task/board-games)
* [Reinforcement Learning for Board Games: The Temporal Difference Algorithm](http://www.gm.fh-koeln.de/ciopwebpub/Kone15c.d/TR-TDgame_EN.pdf)
* [Deep Reinforcement Learning in Strategic Board Game Environments](https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&cad=rja&uact=8&ved=2ahUKEwiAz57rnKr1AhXu7rsIHYUkAOMQFnoECAkQAQ&url=https%3A%2F%2Fhal.archives-ouvertes.fr%2Fhal-02124411%2Fdocument&usg=AOvVaw1NDASnrKIng5GH9xoS0AHh)
* [r/reinforcementlearning/comments/rpvlf7/what_are_the_best_practices_for_creating_a_rl/](https://www.reddit.com/r/reinforcementlearning/comments/rpvlf7/what_are_the_best_practices_for_creating_a_rl/)
* [r/reinforcementlearning/comments/i3367m/rl_for_turnbased_ai/](https://www.reddit.com/r/reinforcementlearning/comments/i3367m/rl_for_turnbased_ai/)
* [blog.tensorflow.org/2021/10/building-board-game-app-with-tensorflow.html](https://blog.tensorflow.org/2021/10/building-board-game-app-with-tensorflow.html)
* Wizard RL Paper: [ieeexplore.ieee.org/document/6664846](https://ieeexplore.ieee.org/document/6664846)
* ** Recent Advances in Deep Reinforcement Learning Applications for Solving
* Partially Observable Markov Decision Processes (POMDP) Problems: Part 1 -
 Fundamentals and Applications in Games, Robotics and Natural Language
* [Processing](https://www.semanticscholar.org/paper/Recent-Advances-in-Deep-Reinforcement-Learning-for-Xiang-Foo/0a50454605da864cc4e1ac949e7a43055be11717)**
* [Improving Bidding and Playing Strategies in the Trick-Taking game Wizard using Deep Q-Networks](https://www.semanticscholar.org/paper/Improving-Bidding-and-Playing-Strategies-in-the-Schumacher-Pleines/c68ea00041d84f90c2a443292a98c34146941481)
* [ai.stackexchange.com/questions/17942/how-to-represent-a-state-in-a-card-game-environment-wizard](https://ai.stackexchange.com/questions/17942/how-to-represent-a-state-in-a-card-game-environment-wizard)
* ?? [Towards Modern Card Games with Large-Scale Action Spaces Through Action Representation](https://arxiv.org/pdf/2206.12700.pdf)

### Games

#### wizard

* model for each round: jester, wizard, trump, color A, color B, color C → how to achieve interchangeability between non-trump colors? will it learn this automatically if colors are assigned randomly to letters?
* states:
  * betting state: number of players, round number, trick number, cards in hand
  * playing state: number of players, round number, trick number, tricks to make, cards already played → probability of cards , cards in hand
* actions: bet made, card played
* policies:
  * betting policy: betting state → bet
  * playing policy: playing state → card
* → how to learn? simultaneously? iteratively? (seems better)
* [semanticscholar.org/paper/Application-of-reinforcement-learning-to-the-card-Backhus-Nonaka/346bc4eaad1a89e84aa8cda08b623973ec0a2fb7](https://www.semanticscholar.org/paper/Application-of-reinforcement-learning-to-the-card-Backhus-Nonaka/346bc4eaad1a89e84aa8cda08b623973ec0a2fb7)
* Combinatoric-probabilistic features:
* Probability that each player can beat each card
* Probability that each player wants to beat each card

#### blackjack

#### bridge

#### canasta

#### codenames

#### haiclue

#### hanabi

#### lucky_numbers

#### mastermind

#### poker

#### rook

#### rush_hour

#### scum

#### skyjo

#### stratego

#### sushigo

#### ticket_to_ride

#### whist

## Daily Prophet 🌱

* [hackaday.com/2021/10/29/muggle-uses-e-paper-for-daily-prophet-replica/](https://hackaday.com/2021/10/29/muggle-uses-e-paper-for-daily-prophet-replica/)
* [deeptronix.wordpress.com/2020/09/02/a-proper-harry-potter-newspaper-irl/](https://deeptronix.wordpress.com/2020/09/02/a-proper-harry-potter-newspaper-irl/)
* [deeptronix/dithering_halftoning](https://github.com/deeptronix/dithering_halftoning)

    create an Anki extension 🌱

    Build (Android / web) NN-driven app for pronunciation training 🌱

    Attic Greek TTS 🌱

    Classical Latin TTS 🌱

    contribute to [VSCode](https://github.com/microsoft/vscode) 🌱

    fork & contribute to [Anki](https://apps.ankiweb.net/docs/manual20.html#translations) 🌱

    create board game analog of RLCard - or contribute a third-party environment to [Gymnasium](https://gymnasium.farama.org/environments/third_party_environments/)?

    make verb and noun grammar trainers (C++? other language? GUI?)

    create reader for texts with grammatical parsing and translation

    book "Philosophy of Proverbs" or "Proverbs and Ethics" → read on paremiology
* [aclanthology.org/2021.emnlp-main.664.pdf](https://aclanthology.org/2021.emnlp-main.664.pdf)
* [configs-and-scripts](https://github.com/yelircaasi/configs-and-scripts)
* [rl-games](https://github.com/yelircaasi/rl-games)
* [segmented-pdf-generator](https://github.com/yelircaasi/segmented-pdf-generator)
* [listen-attend-transcribe](https://github.com/yelircaasi/listen-attend-transcribe)
* [tacotron2-ppg](https://github.com/yelircaasi/tacotron2-ppg)
* [waveglow](https://github.com/yelircaasi/waveglow)
* [nlp-and-sp-cheatsheet](https://github.com/yelircaasi/nlp-and-sp-cheatsheet)
* [wikpedia-ideology-mapping](https://github.com/yelircaasi/wikpedia-ideology-mapping)
* [restaurant-chatbot](https://github.com/yelircaasi/restaurant-chatbot)
* [learning-programming-languages](https://github.com/yelircaasi/learning-programming-languages)
* [NNfSiX](https://github.com/yelircaasi/NNfSiX)
* [minimal-working-examples](https://github.com/yelircaasi/minimal-working-examples)
* [ml-glossary](https://github.com/yelircaasi/ml-glossary)
* [tacotron2](https://github.com/yelircaasi/tacotron2)
* [ml-data](https://github.com/yelircaasi/ml-data)
* [rl-course](https://github.com/yelircaasi/rl-course)
* [trip-planning](https://github.com/yelircaasi/trip-planning)
* [manim](https://github.com/yelircaasi/manim)
* [scikit-learn-videos](https://github.com/yelircaasi/scikit-learn-videos)
* [cltk](https://github.com/yelircaasi/cltk)
* [JuliaBoxTutorials](https://github.com/yelircaasi/JuliaBoxTutorials)
* [cheatsheet-translation](https://github.com/yelircaasi/cheatsheet-translation)
* [java-algo-learning](https://github.com/yelircaasi/java-algo-learning)
* [babynets](https://github.com/yelircaasi/babynets)
* [img2img](https://github.com/yelircaasi/img2img)
* [data-science-bootcamp](https://github.com/yelircaasi/data-science-bootcamp)
* [text-activity-classification](https://github.com/yelircaasi/text-activity-classification)
* [citation-analysis](https://github.com/yelircaasi/citation-analysis)
* [nothing-but-numpy](https://github.com/yelircaasi/nothing-but-numpy) (deleted - reactivate? first look at similar projects)
* [yelircaasi.github.io](https://github.com/yelircaasi/yelircaasi.github.io)
* [natural-language-processing](https://github.com/yelircaasi/natural-language-processing)
* [byu_econ_applied_machine_learning](https://github.com/yelircaasi/byu_econ_applied_machine_learning) → [tfolkman/byu_econ_applied_machine_learning](https://github.com/tfolkman/byu_econ_applied_machine_learning)
* [pltk](https://github.com/yelircaasi/pltk) → divide into smaller projects; see [README](http://README.md) in ~/Downloads/tmp_from_hank/repos/pltk
* [scikit-and-tensorflow-workbooks](https://github.com/yelircaasi/scikit-and-tensorflow-workbooks) → deleted; see [bjpcjp/scikit-and-tensorflow-workbooks](https://github.com/bjpcjp/scikit-and-tensorflow-workbooks)
* [lltk](https://github.com/yelircaasi/lltk) → port to Python 3 or
  * Directory of Notes - clean up, clean out
  * Favorite
* [ ]  [Your Projects - Overleaf](https://www.overleaf.com/project)
* [ ]  [Resumen de Drive](https://docs.google.com/spreadsheets/d/19eeTBMKWrGLmp5VjTYbqJB2EiltURuQMNR7TOwMvHh8/edit)
* [ ]  [Betsy and iPhone](https://docs.google.com/spreadsheets/d/15SxjiP8gScdGW2ayp0YEUmdejTaMPzNx6C-L9nQGALc/edit)
* [ ]  [Anki Deck Control Center](https://docs.google.com/spreadsheets/d/1Lzr3GcZ2fpCONyJkTht8G-Ehn415gB2as3wXOvGlLHU/edit)
* [ ]  [Jornada](https://docs.google.com/document/d/1KkXQtsJNd2LhFRGPRrSYs0cO_5afTuIQtbRD4tDfRwk/edit)
* [ ]  [Recursos por idioma](https://docs.google.com/spreadsheets/d/1dzhICu3pdzn8pdR-Q_BeDq3mwBAf3KwPZb-KqY5_Log/edit)
* [ ]  [Scratch](https://docs.google.com/spreadsheets/d/1R_ROr2OD94U8y6DtSUSDPsqCpu3p5n4JKh7TKV-Pam4/edit#gid=753172436)
  * Favorites - F.
* [ ]  [F.B - General Programming and CS](https://docs.google.com/spreadsheets/d/1ZAD2DxQQu5nG9RX95rW4250OLx_C6AbmpiXfafvL51E/edit)
* [ ]  [F.B - ML & DS](https://docs.google.com/spreadsheets/d/14drcOT1whQKBifgXc6-2JdRJDYGFM6teuEHCHfzQnqw/edit)
* [ ]  [F.B - CL/NLP](https://docs.google.com/spreadsheets/d/1YGD7RvRwiA1kmBo-5yMOtL3jx7Q1cmZ08b20pi6mEwk/edit)
* [ ]  [F.B - Low-Level](https://docs.google.com/spreadsheets/d/19PZheI9Gc7wwVLcbAqHDh97CLlIpmIQfOihQUpqZTmM/edit)
* [ ]  [F.B - Python](https://docs.google.com/spreadsheets/d/117h3iHi0DKFU-sW7XYufLcBh2yn7dArJTwWPKBndjRQ/edit)
* [ ]  [F.B - Julia](https://docs.google.com/spreadsheets/d/1Zuj1t7KTaGK4w9kJW7ZdJvGiQ4U6OeKWGwti84nT7wk/edit)
* [ ]  [F.B - C/C++](https://docs.google.com/spreadsheets/d/1mbCPF1OcxkxBqBa_s7g1TDZdIhdN25LgPnihLPYox-8/edit)
* [ ]  [F.B - Other Languages](https://docs.google.com/spreadsheets/d/1Mhy78EW6AWEsy-UgwR54BcBoxbIKGUEExpYHC3LfhHo/edit)
* [ ]  [F.B - Web and App Development](https://docs.google.com/spreadsheets/d/1TOHm_TRVWf3GSUbtpLWVTtK0OYNffOGpAeePBhKAMtU/edit)
* [ ]  [F.B - Linux, shell, etc.](https://docs.google.com/spreadsheets/d/1gt8l7tLt_DgK8rhZlAvCiJxuFzW2uzxUzEIyVsLHvT0/edit)
* [ ]  [F.B - TeX](https://docs.google.com/spreadsheets/d/1eM-0jRNZNUa0FNGVzYiQTGWHdlqvzAdzVQArqnnStJc/edit)
* [ ]  [F.B - Other Tools](https://docs.google.com/spreadsheets/d/1m-Zbr7bQx02t3ZydwI4UVz5U5eckmsCi2wYP7OwGmTI/edit)
* [ ]  [F.B - Research](https://docs.google.com/spreadsheets/d/18Oe5bJqSVBJ8BqRtzVx0qMeF_amp1Je1SKb7DMgRuqs/edit)
* [ ]  [F.B - Idea Space Modelling](https://docs.google.com/spreadsheets/d/1kLXQGddoY9BwLnKqsrLnGDUauguHxbyjqkCNrJtR4C0/edit?usp=sharing)
  *
* [ ]  [A. Formación general (notas)](https://docs.google.com/spreadsheets/d/1ysAz4Pkp-w7bkOp_IIL_mt3YTrJZRWU8MwbSSdfxTLk/edit)
* [ ]  [A. Áreas de estudio](https://docs.google.com/document/d/15TTyLIIJeueV6HiK8mlDhmiv_XskDxrIlwOHnoJmFBM/edit)
* [ ]  [A. Atributos (multilingual)](https://docs.google.com/spreadsheets/d/1_cPrkA2tBYtWeLQ3vYXkQypGH7-mUQtXti-t8FLnl5o/edit)
* [ ]  [A. Atributos](https://docs.google.com/document/d/1nlgTQ2TQPiRvCSyBYSo4Vgn_avboWnlRizBWG-ka48s/edit)
* [ ]  [A. Plan maestro](https://docs.google.com/document/d/1oC_SmU4r0mNfkb6ObB9yzG8nd28T3B67sfassdNoZPs/edit)
* [ ]  [B. Visión](https://docs.google.com/document/d/1NeKK3PwQ6nMzSKQoXkG3VpSVkUS2ywUwz-Yxtv_DuXA/edit)
* [ ]  [C. Metas y visión](https://docs.google.com/spreadsheets/d/1U2Ebh3xXNuHqyeXifwFgrGKJJtHCZJRGmB596AMcfPw/edit)
* [ ]  [F. Alte Büchernotizen (Liste)](https://docs.google.com/spreadsheets/d/1AHWBETbkFMMv1-GlaPEu_-YSzU_G7oNpRUKaL_TYT7M/edit)
* [ ]  [F. Formación general (notas)](https://docs.google.com/spreadsheets/d/1ysAz4Pkp-w7bkOp_IIL_mt3YTrJZRWU8MwbSSdfxTLk/edit)
* [ ]  [F. Forschungsideen](https://docs.google.com/spreadsheets/d/1rNVRuFLNaP9OdelR0cKgQ6tHPCsvVLsYNRK9-Bt-Ce4/edit)
* [ ]  [F. Jornada](https://docs.google.com/document/d/1KkXQtsJNd2LhFRGPRrSYs0cO_5afTuIQtbRD4tDfRwk/edit)
* [ ]  [F. Leseliste](https://docs.google.com/spreadsheets/d/11X7Evh_VfQvDbbrV2t-xxFk7aqWeOwMuE27TiuTO55w/edit)
* [ ]  [A recordar](https://docs.google.com/spreadsheets/d/1ggkd27EALrmXt_XdMpUsXiIsD-x5qB0984Tyg8qpQj0/edit)
* [ ]  [Lectura y escucha de noticias](https://docs.google.com/spreadsheets/d/1jG9KnhSZOZTL6KP4uC2Rohz3jBr6tcwToyHMst5_fVY/edit)
* [ ]  [Marcadores A-F](https://docs.google.com/spreadsheets/d/1AuevTOz8FmxwfR65k9FlZ6VqUbHnmpmSKDymJ77Mc94/edit)
* [ ]  [Marcadores F.B](https://docs.google.com/spreadsheets/d/14bxspzSzlaMBfSW6H2Y3SXjerI2jHmh7ElwhwmW1lmU/edit)
* [ ]  [Marcadores G-J](https://docs.google.com/spreadsheets/d/1pT_QS2geaxZS7Q-KzLWD0FvrhsM-z5Va3Aj1vQMK5PA/edit)
* [ ]  [Materials on iPhone](https://docs.google.com/spreadsheets/d/1WTLakNSnCUooWmY-qugXnoer6D69LSmtUS5Smd8m0ck/edit)
* [ ]  [Pensadores importantes](https://docs.google.com/spreadsheets/d/11IuIZ4rJMfA1VL1dGcdGKEdtM5KIJUjlqDD--aHTC3k/edit)
* [ ]  [Resumen de Drive](https://docs.google.com/spreadsheets/d/125i-W4g-_oeoa2kBz4xUPZSoSkmvPiNRrJ2ctTn2GTo/edit)
* [ ]  [Data Science & Analysis](https://docs.google.com/spreadsheets/d/1_LQINiT3S_deoYRgQJPKtS6feY4BRWgHHt5AFyFfaNM/edit)
* [ ]  [Allusions and Quotations](https://docs.google.com/spreadsheets/d/1Sa0oUd5Pn6Vg1r8zleA13Vv4kGbA_lxV8KY-uvGQcS0/edit)
* [ ]  [F. Complete Problem List](https://docs.google.com/spreadsheets/d/1aRvrDUZG_cFTfEIvTaHTXhPTKwwg3ru6yJ4mqF36png/edit)
* [ ]  [F. Explicaciones (podcast, escritura, etc.)](https://docs.google.com/spreadsheets/d/1DYGQDmnzt54w_Pw9URyZdZi2mPA6__hRHE8qIMihYPM/edit?usp=sharing)
  *
* [ ]  [B. Filosofía (notas)](https://docs.google.com/spreadsheets/d/1rbAgqYURMknyNv3jQiawtbeasDPcR8ucgEfXoLbS94Y/edit)
* [ ]  [B. Religión (notas)](https://docs.google.com/spreadsheets/d/1Dr-0auuh3GhvQ-czgWVG8JMXEYI5UW5ag3IBriG7Ka4/edit)
* [ ]  [Philosophiæ quaestiones](https://docs.google.com/spreadsheets/d/1mckR1sqUcyY33UCJAi2-2yJ-BwXFONEPwI44tGdRmVk/edit)
* [ ]  [Philosophia (auxilia adnotationesque)](https://docs.google.com/spreadsheets/d/1bNSU1p60BjwY9GbnfCa6pqkKL8GFU-3h57RI80KsXj0/edit)
* [ ]  [B. Filosofía (notas)](https://docs.google.com/spreadsheets/d/1rbAgqYURMknyNv3jQiawtbeasDPcR8ucgEfXoLbS94Y/edit)
* [ ]  [Historia philosophiae](https://docs.google.com/spreadsheets/d/1mPipcSaDcknV_ECyJWt2nKF48A2G5RhyQzDc4j-WRaw/edit)
* [ ]  [Philosophiae quaestiones](https://docs.google.com/spreadsheets/d/1mckR1sqUcyY33UCJAi2-2yJ-BwXFONEPwI44tGdRmVk/edit)
* [ ]  [Philosophia (auxilia adnotationesque)](https://docs.google.com/spreadsheets/d/1bNSU1p60BjwY9GbnfCa6pqkKL8GFU-3h57RI80KsXj0/edit)
* [ ]  [Notas - Философия языка](https://docs.google.com/document/d/1LTekd-q8UYYKUR8kpM5cnFgiNNxa_xidprVNCKQKL74/edit)
* [ ]  [Book Outline - Faith and Doubt in the LDS Experience](https://docs.google.com/document/d/1-dlr8rEp3mKIZCz9zXnk0oJfuh5BsFDgMhydUz6TUDA/edit)
* [ ]  [G.G.D Religión (notas)](https://docs.google.com/spreadsheets/d/1hnuEOUh-srbXPiYvTsEQ2dMy4ZabMxlmm9MMFkyK3q0/edit)
* [ ]  [Analysis of Faith](https://docs.google.com/document/d/12nMQJME0ml6C3fT6gs5EYC_HGtIr0PHmrKZbR-_YKWU/edit)
* [ ]  [Announcement Post](https://docs.google.com/document/d/15d7PG0zDJyYiL3lqJ0-P1c7hLOX8CUlviCusVh3UO_o/edit)
* [ ]  [Autoepistography](https://docs.google.com/document/d/1m5Pm4MnoBPGYLARF-_Z-dahJXF6d2728FItreNVABTk/edit)
* [ ]  [CES Letter French](https://docs.google.com/document/d/1BZ50LO54-IW-bIu5-0FPe8FZO6SznDoyd4VQDfCdhHs/edit)
* [ ]  [Letter](https://docs.google.com/document/d/15fyw7T20f66wh6WM6VWwMFiYNoIKTevWN_U9rwj8uLU/edit)
* [ ]  [Lista y análisis de fuentes de la duda](https://docs.google.com/document/d/1G8h7gHIsgixGQPm4V4F2axJFxdTK7ZcjwTK4yeIEISU/edit?usp=sharing)
  *
* [ ]  [C. Matemáticas](https://docs.google.com/spreadsheets/d/1RU8z6sIVkcinPuUW3Im6C2fMvHrU-mgwCOiowgSBQLM/edit#gid=140458224)
* [ ]  [Math Vocab](https://docs.google.com/spreadsheets/d/1fPE4qalO6j9YSgpg8pyKpeT_-AHFDYadi1Yg1lLLuTE/edit#gid=1690798565)
* [ ]  [C. Matemática (notas)](https://docs.google.com/spreadsheets/d/1NVzPirGXFwfEUs90QEIs5RzJo18xwNbmGC3QHhHxNp4/edit)
* [ ]  [Math Vocab](https://docs.google.com/spreadsheets/d/1fPE4qalO6j9YSgpg8pyKpeT_-AHFDYadi1Yg1lLLuTE/edit)
* [ ]  [Math Writing & Gh Planning](https://docs.google.com/spreadsheets/d/1WnsXzqcTxX9fCDidLo2JrfkT-XYw7u2vWged71LphoY/edit)
* [ ]  [Transition to Advanced Mathematics (4E)](https://docs.google.com/spreadsheets/d/1Sc-XCYLl1Xi4I2cus4UBpWlDDssVbB_r4xg6NqrY3Q4/edit)
* [ ]  [Справочник по высшей математике](https://docs.google.com/spreadsheets/d/18IpHGQqxDgWaxXvtc6SkioOhP-e3ygD2EuNT_zViCf8/edit)
* [ ]  [Vocabulario de los fundamentos de matemática](https://docs.google.com/spreadsheets/d/10_eZUbW0dYwySJ2vyacxlrq4TpSOMNyFeBP2ib6oyiA/edit)
* [ ]  [Proofs Book(s)](https://drive.google.com/drive/folders/1YjuRYps_5IEkdG8btYqFL0xqjsoj4vD2)
* [ ]  [Carta de matemática](https://docs.google.com/spreadsheets/d/1HBui2KLsznSGssVB-3C-lavu9_iZx-VpXTX_IumxnBc/edit)
* [ ]  [Definitions from Linear Algebra and Its Applications (Lay)](https://docs.google.com/spreadsheets/d/1xS7Dimpgg835el4Y5tLaETsbjxbDkTla9SvsrhT1X2s/edit)
* [ ]  [Definitions from Understanding Analysis](https://docs.google.com/spreadsheets/d/165M103FD8XrG8PZXNmXNMNQpI9qsN7YFSIs1B6NCwgs/edit)
* [ ]  [Definitions from Ordinary Differential Equations (Boyce & DiPrima)](https://docs.google.com/spreadsheets/d/1N7uLmkmwwZBU46XgPVH3RjglBMNJ_V9VJn7-H1L2lFc/edit)
* [ ]  [Definitions from Multivariable Calculus (Stewart)](https://docs.google.com/spreadsheets/d/1uUGJVxTGl9QlzP7vWbG-tDzOCRwdTe8KZgGDQJttZQU/edit)
* [ ]  [Definiciones de estadística](https://docs.google.com/spreadsheets/d/1ghHu6HPbeG0zqHXWzWAykKBMoEEKQG3NE3-_kjIzh9w/edit)
* [ ]  [Aprendizaje de econometría](https://docs.google.com/spreadsheets/d/10bj9Fv43MMke7JzGWb5mfkst-5mhVZado7DZK05Wpu8/edit?usp=sharing)
  *
* [ ]  [D. Ciencias naturales físicas y generales](https://docs.google.com/spreadsheets/d/1FL7sBeBoRsOOCQM0kzLRWfL7idNvr3NrMslAGqI4xa8/edit)
* [ ]  [Relativitätstheorie](https://docs.google.com/spreadsheets/d/1DMo8h1khrRGSJdv7OYimsSG6AvjfIgvG9egnQXqCXT8/edit)
* [ ]  [Elementos](https://docs.google.com/spreadsheets/d/1WHg_pIVjjb-zFLwKB8VJqQHy48xzL6L1NbL-7CRmHy0/edit)
* [ ]  [La chimica per tutti - appunti](https://docs.google.com/spreadsheets/d/10AmI9Z9qB_IuX17iibelRodQxt0r_1KqJ4vk5QcVXWI/edit)
* [ ]  [Vocabulario de geografía](https://docs.google.com/spreadsheets/d/1XjvH5vrkGrOoghjDJzDwcfG3Fxd4WqLyrJwONU8MGcs/edit)
* [ ]  [Constelaçãos](https://docs.google.com/spreadsheets/d/1ISRAXZWEyIJCZve6PTlk88VLvKPDff5h7BIgryorwbo/edit)
* [ ]  [Conocimiento de geografía](https://docs.google.com/spreadsheets/d/11GfA0dKo3b9zHWNmCji8gzg-_26LczoSBM4sMULgqVg/edit?usp=sharing)
  *
* [ ]  [E. Ciencias naturales biológicas (notas sin neurociencias)](https://docs.google.com/spreadsheets/d/1Fpy-Ko7UaFJkYYbqaPmthhqAOqDMFekXVfzPs8BHPh4/edit)
* [ ]  [E.I Neurociencias y ciencias de la mente](https://docs.google.com/spreadsheets/d/1YCNWNzdZUDMhZJWF9Kq6TPs8BT3mhwFnW4vkGBw2hjo/edit)
* [ ]  [Conscience et le problème corps-esprit](https://docs.google.com/spreadsheets/d/1MGgr_K5b2VjWkdsZohy0VAXF16cvLo5uZJmsD3e1Fko/edit)
* [ ]  [Neuroanatomie](https://docs.google.com/spreadsheets/d/18vXt_gnMp3vUvDNdW-zgIgb6eE4tu5zz8-mxW50x2yY/edit?usp=sharing)
  *
* [ ]  [F. Tecnología (notas, sin informática)](https://docs.google.com/spreadsheets/d/1NskNrlvu17kUy75viEYF-aiCUyz2mfAa07U14QolffA/edit)
* [ ]  [Minimal Working Examples](https://docs.google.com/spreadsheets/d/1hzRM9NpjLdlBnZmU2H2UTX_eWDRXf9jujuw61ov9Yso/edit)
* [ ]  [Speech and Language Processing (Jurafsky & Martin)](https://docs.google.com/spreadsheets/d/1QuIFPdJl9ZhciUuDkuKMI9msvhEs6BCdQdsdc9K1S-0/edit)
* [ ]  [Data Science Q&A](https://docs.google.com/spreadsheets/d/1E2Ccv02R_r3rqLACsDiq_bP5S6JjTL35_VCCbXn1D9U/edit)
* [ ]  [SICP](https://docs.google.com/document/d/1fULWNz6F-n1iYS6OBVsD1szC0DdVe_Xpd3KatZMA2oU/edit)
* [ ]  [CompLing Vocab & Resources](https://docs.google.com/spreadsheets/d/1bkSvoQyYNKS914uqTOgltb7Df29i0Mgv8ZXM5PJ6VTc/edit)
* [ ]  [Polyglot Phraseological Database](https://docs.google.com/spreadsheets/d/1HYEgCsnmjhulEnM7tq53AV7IrRbYhFcUnfjAp0cCAGI/edit)
* [ ]  [Jobsuche](https://docs.google.com/spreadsheets/d/1SbjoI1o-rux4wCdp5HyKwadxxB6G1wDAh9S2iIodDzo/edit)
* [ ]  [Helpful Tips and Tricks (MSc CompLing 2019)](https://docs.google.com/document/d/173KSzQufTDKxob8JdEYYRVxPpmhpwe2TIw89VXfmvEM/edit)
* [ ]  [Data Science Books](https://docs.google.com/spreadsheets/d/1_LQINiT3S_deoYRgQJPKtS6feY4BRWgHHt5AFyFfaNM/edit)
* [ ]  [Language Similarity Research](https://docs.google.com/document/d/1p92Sselx5tUMEUNHleaE8408_AeCNBIga8IbmjvWy0g/edit?usp=sharing)
  *
* [ ]  [G. Ciencias sociales y humanas (notas)](https://docs.google.com/spreadsheets/d/1nrMklgQOga5wjFj1IVz4QBNLzl9kxxcXcd1oCibPb_0/edit)
* [ ]  [Think Tanks](https://docs.google.com/spreadsheets/d/19wsrIOJfPn_iS0n4NYBMiLBlqF2x1OY8C8nGqQ46ioE/edit)
* [ ]  [Book Idea: The West](https://docs.google.com/document/d/11pVuBO2RwletNDGHTOys0IaiLqxWNZeHKacDBDjVDGI/edit?usp=sharing)
      *
* [ ]  [G.B. Historia](https://docs.google.com/spreadsheets/d/14XUzC2EKy5nfGu5KxebK5wpmqBP6RlLP1M7JAqN_2Xg/edit)
* [ ]  [9 anni casuali](https://docs.google.com/spreadsheets/d/1bgt9rx2Rbg2O0VOe23vU85yfLpjlRKOleE5WbLlH2dk/edit)
* [ ]  [Outline History of the World](https://docs.google.com/document/d/12Mfd3KyIj3ZWc9du_ADFUGNbWhWLBByj28jaM_SDq4A/edit)
* [ ]  [Storia nelli grandi individui](https://docs.google.com/spreadsheets/d/18Z3oAP6AAA67q5kKWDAkaGZ5cJxIEEoJOQTOP3AdpEI/edit)
* [ ]  [B.C.E.](https://docs.google.com/spreadsheets/d/1yN6HWlrddTzvlkP3lcV4Pu7_iyfU6OpA40smuVYgA7A/edit)
* [ ]  [0-500 C.E.](https://docs.google.com/spreadsheets/d/19JZGNVL5SxSvkZFy3JCYI01VyzmOg33J51AR5CeYHAk/edit)
* [ ]  [500-1000 C.E.](https://docs.google.com/spreadsheets/d/1tr5iKwcD9ydZzj6fC8UkAAo8hqKmDl7EgSoqjdKaSYA/edit)
* [ ]  [1000-1400 C.E.](https://docs.google.com/spreadsheets/d/1l6AcDQy24TiARwDWEyaaIj9Ly1y622-vYufJzlRNWZY/edit)
* [ ]  [1400-1700 C.E.](https://docs.google.com/spreadsheets/d/1BjFiRHDhwOgk4me_04j2V-3nv-KtKk4VhwpK5fFiTTs/edit)
* [ ]  [1700-1900 C.E.](https://docs.google.com/spreadsheets/d/1kMKKxlHgiiUqdtV2VVL-Pvq7VMLt66OGW_3ClpkK65E/edit)
* [ ]  [1900 C.E. - Present](https://docs.google.com/spreadsheets/d/106Z9LpEgWTKEHEf48p6yz8a7nRekQYqMGCn3aX4crGk/edit?usp=sharing)
      *
* [ ]  [G.C. Derecho y política](https://docs.google.com/spreadsheets/d/1H2WMSzPcuIzfjoqwT-H5itqwUA_-duFIv_g7KgJB7f8/edit)
* [ ]  [Политические дебаты](https://docs.google.com/spreadsheets/d/1RWN2pNGlZSP8K4d6FhEuIZp3d_0lNIeMx5o3E54_XHY/edit)
* [ ]  [Partidos políticos de 48 países](https://docs.google.com/spreadsheets/d/1dxuWE2UpH9U4ge77rN8J91GeBWMuZvIxnCZyUM2ooK4/edit)
* [ ]  [Políticos de 20 paises](https://docs.google.com/spreadsheets/d/1OjbpYqrWQy3A-NLloHLNu11BeSZZduyUJiwNeLhV8Yg/edit)
* [ ]  [Ukraine (Schlögel)](https://docs.google.com/spreadsheets/d/1eJ7ruWmaENaShA5cFhEQw-H3vpYNR5fpXidEOFohpH4/edit?usp=sharing)
      *
* [ ]  [G.D. Economía](https://docs.google.com/spreadsheets/d/1kP0OPfimGDpAWGVkKIahcppab9MlJDWXXcKJGmc6vhA/edit)
* [ ]  [Revistas, sitios y blogs de la economía](https://docs.google.com/spreadsheets/d/1W7Ix1WbAkMgp-p2eBw7cvGNbUcLrzJzExyaZODFiNQc/edit)
* [ ]  [OD Economics](https://docs.google.com/spreadsheets/d/1r2fNHlDQK0SBQgnmk19QEdeljN04v64T1fcA8gV_3KE/edit)
* [ ]  [Topics List](https://docs.google.com/document/d/1To8muzK1fRTIanmAx1xYuxd1z3q_KXihY5u9EEbonyQ/edit)
* [ ]  [36 Artikel](https://docs.google.com/spreadsheets/d/1oVCWFvtR8AnXTwxWftesoTGJipbp6JKZZ9VsMQQpXjk/edit?usp=sharing)
      *
* [ ]  [G.E. Lingüística](https://docs.google.com/spreadsheets/d/1porlMtn2iTGC2klBwUHq9HWzgTSg0NfFAyojRtufo_I/edit)
* [ ]  [Ling Vocab](https://docs.google.com/spreadsheets/d/1szKVLhrPEg41hbtwYWEnK-rVYgh0Py_MkBZkHElYVxk/edit)
* [ ]  [Dialectos del Inglés](https://docs.google.com/spreadsheets/d/1xbCtjynvwB0VtriHV7Oj8oPZyQNrK1IdIyF99KpuTHI/edit)
* [ ]  [AFI](https://docs.google.com/spreadsheets/d/1TZ4pvVbKtxGTVRWnEiuU8TZUgOikjHmYcO7JYoZgGJo/edit)
* [ ]  [IPA Transcriptions](https://docs.google.com/spreadsheets/d/1CaWnCErryTugDXFin6bJ3anFb7Wxn-wL5vpYlpRQ2JY/edit)
* [ ]  [Квиз по МФА (doc)](https://docs.google.com/document/d/19bF_hHuDFGjzX01ZEicN4mA8MJlHKRNSQaAZ6Fz_eo8/edit)
* [ ]  [Квиз по МФА (gsheet)](https://docs.google.com/spreadsheets/d/1QL-HCcDg8jv8kGKOBtEGiNg5waRyGUTiK3DDgf6KpOA/edit)
* [ ]  [Квиз по МФА (doc2)](https://docs.google.com/document/d/1Y1BFapn66PkJ2Yi-XbbYTTpwY69xPDkAB-bXV75kJzg/edit)
* [ ]  [Aussprache und Phonetik](https://docs.google.com/spreadsheets/d/1TCjz-h6ToI5MnJ3djlm7SESEuyZo3Iqminlrj3zyBkg/edit)
* [ ]  [G.F. Antropología y sociología](https://docs.google.com/spreadsheets/d/1Ut0rayUd1t5jr2i6YFBv5HS95GZV17dmyEdbe6Iyl-U/edit#gid=0)
      *
* [ ]  [G.G. Psicología](https://docs.google.com/spreadsheets/d/1rk4fE-L93iuDsPYF5yhk_9WC_s6YWVf68ZHuaL3soQw/edit#gid=0)
* [ ]  [Psychologues](https://docs.google.com/spreadsheets/d/1xXHyEpE1zOmcKYTbVFAn2c5FxmgTc3KTxkFES-a0cOI/edit)
* [ ]  [Thinking Errors](https://docs.google.com/document/d/1d-xPgeeXFf665C6edZjvOAPwlIEjVTBtqI5lNXFg_2Y/edit)
* [ ]  [S1S2](https://docs.google.com/spreadsheets/d/1pyZ23VGHvqUppBaCwT6fxGOgbCXnDtDRIFxtSlCPntM/edit?usp=sharing)
      *
* [ ]  [G.H. Pedagogía](https://docs.google.com/spreadsheets/d/1qUEnXX6FZZCr6lMI7Ky1gARTwbpBYK4EcCCMIjrCfEQ/edit))
* [ ]  [Study Resources and Methods](https://docs.google.com/document/d/1Q0ATMEuD9Qz6caRsr1vbLc1FOHD5UC0H9M42HYKPy-c/edit)
* [ ]  [Principles for Question Analysis](https://docs.google.com/document/d/1C7QR0dFCUecvkRJivQQsDIMmkxxEcZ1sI-Weyjdrro0/edit)
* [ ]  [Meilleures practiques de l'enseignement](https://docs.google.com/spreadsheets/d/1y2gtbiRdLExR0_4b6uKiAWVpOUnTzOfruRczHmTlbng/edit)
* [ ]  [List of Groups of Different Possible Worldviews](https://docs.google.com/document/d/1rnGFHBw-J_knklojkxl7YOZ_68MAhSqLvVTTp1EsHIQ/edit)
* [ ]  [Técnicas - Memorización de vocabularios](https://docs.google.com/document/d/1h4IXJsUt_FkYM52iM6O5YyhgOM9T9pJtc_yp0b9bOBQ/edit)
* [ ]  [Técnicas para lectura](https://docs.google.com/document/d/1VzA5tlrIxapyNJD6ISRlTQfl5MoYgB8ojZXVLPevE6A/edit)
* [ ]  [Técnicas para memorización de textos](https://docs.google.com/document/d/1Zfa9VmxlaKEYMX41Ktagj77Gmy1N4Kw_zyURz0eLWpA/edit)
* [ ]  [Técnicas para memorización y masterización de música](https://docs.google.com/document/d/1wL0qGWC_FsUB9lnsvs94F1jYc2LJIXnd32s2B15czRw/edit)
* [ ]  [A Mind for Numbers](https://docs.google.com/document/d/1hOImn6C7z1EEsZaOIsXDxYfVxHijMlfj-ZS6mBiRLsA/edit)
* [ ]  [Revistas sobre teoría de formación y pedagogía](https://docs.google.com/spreadsheets/d/19baKmNuooUwFUi5XtvIQr9VlrGuvuU6opXNTLNbdqkQ/edit)
* [ ]  [Idées pour la recherche](https://docs.google.com/spreadsheets/d/1HPHjjnXVPOF34yAweN456ecgC-66A9g2Kz5ck9jDsyE/edit)
* [ ]  [Education par pays](https://docs.google.com/spreadsheets/d/1xhTqCvgq5Ch-aS4iOy6Mm6YDMGUVDwEMDlC08fPk0PA/edit)
* [ ]  [Investigadores y libros de pedagogía](https://docs.google.com/spreadsheets/d/11AxNDOjDxRwYDZKCmrIOPWRmzTcioxjRu9Kd1F8O1cI/edit)
* [ ]  [Mejores investigadores de la teoría formacional](https://docs.google.com/document/d/1tiHmPcCorDDDwoSujJ_LdRTzfzPMoza8Wc2rpLKA-_g/edit?usp=sharing)

  *
* [ ]  [H. Humanidades (notas sin H.F)](https://docs.google.com/spreadsheets/d/101_rcqnW1XwIlpF0uZl9vrzPOOI5SvauswM-PzpX3HI/edit?usp=sharing)
      *
* [ ]  [Música y cantantes](https://docs.google.com/spreadsheets/d/1edx4RS8SLYLl3O-5zOk04iG1zb-rHAQI7ouCRQSGIsk/edit)
* [ ]  [Música clásica para escuchar](https://docs.google.com/spreadsheets/d/1KsOjWpzPTw4HfRaDcV63GPFRU6YODVvcisbrjAOomNk/edit)
* [ ]  [Music Plans](https://docs.google.com/spreadsheets/d/1Tw7GV_PonLHXvYoRVOlEnX69nABG7hqADBjQYpl6g1s/edit)
* [ ]  [Scales and Arpeggios](https://docs.google.com/spreadsheets/d/17lGmEiORK4R4OHgEOcvXB_0RqBVx98KMVxPMq5gzDPY/edit)
* [ ]  [Migliori prattiche del discurso publico](https://docs.google.com/document/d/1h4_KBZL6vER9KxBFvoDdg-bhfbtQ8sx3BcY6Rosr6EU/edit?usp=sharing)
      *
* [ ]  [H.F. Idiomas y lenguaje (notas)](https://docs.google.com/spreadsheets/d/1rhFUPMWYuGUUCYWlw8VyyBMJIKhJhmvoiH3Im_spClI/edit)
* [ ]  [Altri testi paralleli](https://docs.google.com/spreadsheets/d/1DcDOEBc7ta_nah0C47MTdklou34TQ4VJr-uBSaO4sEw/edit)
* [ ]  [Enfoque analítico al aprendizaje de Idiomas](https://docs.google.com/spreadsheets/d/1XBOvzs5FmwRxLJ_kM_FSBr9Ob4LmWwBjBfvlE2gYwZU/edit)
* [ ]  [Enfoque analítico limitado - listas](https://docs.google.com/spreadsheets/d/13qUtzTMBwOmvN7tMZhQf-ijC_bX1_LAMjRyaHk-hS5w/edit)
* [ ]  [Etimología, raices y interentendimiento](https://docs.google.com/spreadsheets/d/1uaedyBSMUBr6GvDPeHg8bIpnSOyzuFhaXWFKD2Ty6BY/edit)
* [ ]  [Vocabulario actual](https://docs.google.com/spreadsheets/d/1ye6g1FY7ptUnrpqtD3fBzrcJR-Hr_2F4IOEZVdEj7fs/edit)
* [ ]  [Recursos](https://docs.google.com/spreadsheets/d/1PzmZEvav97a8s2B8-RXPsaXlyRqU0Ot7wbGJJC4a3L8/edit)
* [ ]  [Columnistas de PS](https://docs.google.com/spreadsheets/d/1j5vfA-_DOAUiSjub6FCqMgwnQWVEZ4waXyrwWoQJulU/edit)
* [ ]  [Escritura 1-12](https://docs.google.com/document/d/1oX8rD0iaidfZNyVETZUzxpf7FJ6I1CtSJHA9WcYN7oQ/edit)
* [ ]  [Learning Scripts & Keyboards](https://docs.google.com/spreadsheets/d/1T_qAG4raIhJYq1mlgJCH8TN-ZNcUl9RM-p4a0aVh5EU/edit)
* [ ]  [Jesus Film](https://docs.google.com/spreadsheets/d/1pQrobumm9sgcsvJi7bZ76_JGpEI5lb2g1FtSg-cPJyo/edit?usp=sharing)
* Tests
* [ ]  [Linguae per Carmina](https://docs.google.com/spreadsheets/d/1dPj6PNHYxvdu8o69EnLkLnaHmCzOs4rEncdqlnVm_mE/edit?usp=sharing)
* [ ]  [Sprachtests](https://docs.google.com/spreadsheets/d/1EL_g5Oz7RxGVw-T2HH3VxPxQ_At5F6zKUbItyHEbg7k/edit?usp=sharing)
* [ ]  [Tests sobre las listas de Swadesh](https://docs.google.com/spreadsheets/d/1Tbugky1_uPaK6eDQSalbcvksGZXXh3XncPyD49VcA9g/edit?usp=sharing)

* Phraséologie
* [ ]  [Modismos diversos (borrador)](https://docs.google.com/spreadsheets/d/1_gtGJ-aPb-L98F3ylU9ADCoFLIPPo55waoiDgtvwgtU/edit?usp=sharing)
* [ ]  [Database of Figurative Language](https://docs.google.com/spreadsheets/d/1xQE30iCryMege8m63T-KdK3JYeIry2oDZ1YU_EiFftM/edit?usp=sharing)
* [ ]  [European Proverbs (Strauss)](https://docs.google.com/spreadsheets/d/1iSrCKxJ7R98VF8t1vFX7dTR4X_8MmE6afhjD4uglL5Q/edit?usp=sharing)
* [ ]  [Tatoeba](https://drive.google.com/drive/folders/1dd-EYNpoCvW6B_b6QFyJqjWgFNpQ679P?usp=sharing)
* [ ]  [Parallel Phrases](https://docs.google.com/spreadsheets/d/1TG-GLGQ4WB1i3JmsP6muTQav4IfqNMoibBgXyFRTxR0/edit?usp=sharing)
* [ ]  [Argot](https://docs.google.com/spreadsheets/d/1-5ctnb9XxTkk9W5mekoJ7hZZXZ-bzuY8ONlk8vXUA0o/edit?usp=sharing)
* [ ]  [Wikiquote](https://docs.google.com/spreadsheets/d/1fwE6O9pobi5PJHYKGYR0ZFOnc6LjzBWne4p_NYM6LGU/edit?usp=sharing)
* Diálogo
* [ ]  [Vocabolario e frasi situazionali 1](https://docs.google.com/spreadsheets/d/1751MXDe2PDUhfydMaYwOBr1NeUV8j4pLaOsrkZXYiVk/edit?usp=sharing)
* [ ]  [Vocabolario e frasi situazionali 2](https://docs.google.com/spreadsheets/d/1maHknb4dimca6brfxPZVFLzf_9P_l4nmRlUsxOWxLJY/edit?usp=sharing)
* [ ]  [Vocabolario e frasi situazionali 3](https://docs.google.com/spreadsheets/d/1B5-Yt4gpYhSNZkJRIy20dGgCBVHeVDVk1VkoxFG7d00/edit?usp=sharing)
* [ ]  [Preguntas conversacionales (con acento en OPI)](https://docs.google.com/spreadsheets/d/1UuUemcLt0c3nsjWtEKJV5xTaIAgU5cJzO4tP0YwRrYo/edit?usp=sharing)
* [ ]  [Diálogos personalizados](https://docs.google.com/spreadsheets/d/1iRbBC40GJGlaLykiCGLgSxRXW4l87AfYXz734_ks9kA/edit?usp=sharing)
* [ ]  [50languages](https://docs.google.com/spreadsheets/d/1bzQdoFHUgfYLgR6Y9llvm92P6jW5He9eQsa7wSTuqKc/edit?usp=sharing)
* [ ]  [50languages la, grc (réserve)](https://docs.google.com/spreadsheets/d/1L1DQn2_eA4DPtNx9q-krDwCFbelgl_hICx40RaWxNE4/edit?usp=sharing)
* Vocab
* [ ]  [Vocabulario viejo](https://docs.google.com/spreadsheets/d/1zgem1Eq1I_3dQWDIiC4ui77kBr3r7IU91uYS5JB_x6k/edit?usp=sharing)
* [ ]  [Vocabulario viejo 2](https://docs.google.com/spreadsheets/d/1JIIM60n5CC99KTiJOBhaxz-bBf1P_4iWVnmNqI1WmXU/edit?usp=sharing)
* [ ]  [Multilingual vocabulary](https://docs.google.com/spreadsheets/d/1iMZFXJ9fNNjMm1egDv4WuoWatQsiGbrbgEB-FdW5nIE/edit?usp=sharing)
* [ ]  [Swadesh](https://docs.google.com/spreadsheets/d/1aOLwIYI5_WGdX9rm4bEi4R9vVr3WOTL5QZLdLaKGkZw/edit?usp=sharing)
* [ ]  [Quiz de Swadesh 1](https://docs.google.com/spreadsheets/d/1tFgoUKVRkW4BKeD9Ak6SycPX8EFQdtZYU9UpffQgta4/edit?usp=sharing)
* [ ]  [Worthäufigkeiten (Ordner)](https://drive.google.com/drive/folders/1O6k36bVvTWdAo-2ukF-JVkKlQyCumK3r?usp=sharing)
* Traducción
* [ ]  [Panoramica delle traduzioni e scritture](https://docs.google.com/spreadsheets/d/199q_9h2xxIeNYQRTVyqLTCocQL8GLtcfTUfJ_SlwI00/edit?usp=sharing)
* [ ]  [Traducciones de inosmi](https://docs.google.com/spreadsheets/d/19TmdPCxbciaVkiAQhK5ibFLswwEf3-uhp6lPTmSoMVs/edit?usp=sharing)
* [ ]  [Traduciones de TED (ted2srt)](https://docs.google.com/spreadsheets/d/1CgwpXFQY8WIsJESK1cpavK-kSW-JE_4EcA8euxCXXg4/edit?usp=sharing)
* [ ]  [Traducciones (viejos)](https://drive.google.com/drive/folders/0B2W5kumU32IMV2FiVEZKaG1EU1k?usp=sharing)
* [ ]  [Traducciones de las notas](https://drive.google.com/drive/folders/0B2W5kumU32IMU0RBNVNGM2ZIRDg?usp=sharing)
* 9
* [ ]  [Lectura 9](https://docs.google.com/spreadsheets/d/12vU4oT6fnCabBA1kVZ0sIH2IbdCJEjQpfUmlc9D55iU/edit?usp=sharing)
* [ ]  [Ali Baba (Anki)](https://docs.google.com/spreadsheets/d/1eioeveZMYgejYa0BBnvo5WGyhWQR8-lbgjcaWPWwcM8/edit?usp=sharing)
* [ ]  [1300 y Madinah (Anki)](https://docs.google.com/spreadsheets/d/12184OKThkTmKAPeL_BLyu5sf-yuUEKUa8SJpr2PQoX8/edit?usp=sharing)
* [ ]  [Mots arabes en exemples](https://docs.google.com/spreadsheets/d/1-0RJpsGACFvjP8zNskphn4aHrOf7kRTnAH5ZqQyX-XQ/edit?usp=sharing)
* [ ]  [Vocabulario árabe](https://docs.google.com/spreadsheets/d/11-968xcbcfLvdxn35CytWUVnyEEPkgu7yc5KooR522E/edit?usp=sharing)
* [ ]  [Арабские корни](https://docs.google.com/spreadsheets/d/1HZFYmbq8yeygsncAliUONmsgVmsexpE-ashVlDIf0cc/edit?usp=sharing)
* [ ]  [Anki - conyugación árabe](https://docs.google.com/spreadsheets/d/1rQVp5rMG1RQFKqRnetQlIhKVIup22swPGHM5xqjEsJU/edit?usp=sharing)
* [ ]  [فلسفة](https://docs.google.com/spreadsheets/d/1SKH-0JfyOEg4jEWGSZEXbZTR8MMs8qKGkQ933H89Z_Y/edit?usp=sharing)
* 10
* [ ]  [Детские книги на китайском](https://docs.google.com/spreadsheets/d/1useOYO52CnRP3MEwd72Wvpv1GWeWtaBth1Bw6wiL_MM/edit?usp=sharing)
* [ ]  [美国反对美国 (America vs America)](https://docs.google.com/spreadsheets/d/18HFlxFg3_7xXvAvFkgRgNxPvo4NIkXg2xkwQjVVWraA/edit?usp=sharing)
* [ ]  [Carácteres y radicales chinos](https://docs.google.com/spreadsheets/d/1Yhh-DjbaI3fxzkLzdpSnqz25xg5oWCqoyn-cj_KLQ3s/edit?usp=sharing)
* [ ]  [HSK](https://docs.google.com/spreadsheets/d/1asid2JHKhIZ_cDD-ocB-pHya4TDltHvSF8488GgV9gc/edit?usp=sharing)
* [ ]  [Frases mandarines](https://docs.google.com/spreadsheets/d/1IxyJ_VpmSehBvwnNVkEqzx2VDQANMbCKt0pwgQyG7WY/edit?usp=sharing)
* 11
* [ ]  [Beispiele GR 11](https://docs.google.com/spreadsheets/d/1_LpmsO5mSihCK4Mr1Myzx_0JgqG7FUjcvUkQoqUUrGY/edit?usp=sharing)
* [ ]  [Coniugazione latina](https://docs.google.com/spreadsheets/d/1SGIkkfi_r0VZMwsruw5YJTF-_Aa9FaMmgch87kf7Duw/edit?usp=sharing)
* [ ]  [Declinazione latina](https://docs.google.com/spreadsheets/d/1f6f37EScyQ5kCC_8XYNSs1SyJqU8ddlG6bgHyK_kMBw/edit?usp=sharing)
* [ ]  [Latin for All Occasions](https://docs.google.com/spreadsheets/d/1wi_5at3d9qazBwUiiwcUmn8S4jbvXY1lxDuHwoD4b4o/edit?usp=sharing)
* 11-12
* [ ]  [11/12 per esempi](https://docs.google.com/spreadsheets/d/1zDXL9z2yBBiT3I8a8lSJl1HaoeC1EXU6aJ_0RyMaZx4/edit?usp=sharing)
* [ ]  [50languages la,grc](https://docs.google.com/spreadsheets/d/1n1QruvLYcmAGR0frpCjGFqWVNdpg-OuJqPRIlwdPhNM/edit?usp=sharing)
* [ ]  [Loeb Classical Library List](https://docs.google.com/spreadsheets/d/1o9zmt1YU96aCDl-PYmwLV5--xRYOq6ctC_M0jvnOReM/edit?usp=sharing)
* [ ]  [Anki - Dickinson 11/12](https://docs.google.com/spreadsheets/d/1E-8VlApLrTmJZsruCNig2p4darGHwZ3n3yhYvmxUkrY/edit?usp=sharing)
* [ ]  [Ejercicios de traducción del griego y latín al español](https://docs.google.com/spreadsheets/d/1P4bL71QIYoQy8HnnBSlAkQ9_7wbEMQ908mPO8joU_3Y/edit?usp=sharing)
* [ ]  [Lectura 11/12](https://docs.google.com/spreadsheets/d/1sNfUyl6zCRT16ONWkBYchVcx6iKkn-gqp2BzwiZv8Uo/edit?usp=sharing)
* [ ]  [Quiz 11/12](https://docs.google.com/spreadsheets/d/113Mpa6gBkmQy3CnS-bmB4pLdsed3vzt7xQucTP1CPGw/edit?usp=sharing)
* [ ]  [Raizes latines y griegos](https://docs.google.com/spreadsheets/d/1WQc2PG3Uh5JgxEyf91JAWc0tQ1aBUoCijiCnJ0Pk1sQ/edit?usp=sharing)
* [ ]  [Anki - Athenaze / Familia Romana](https://docs.google.com/spreadsheets/d/1r4rCqHIcILUID2KiiTvGDV-Ux5IaMTbVZO0Fh37SHsU/edit?usp=sharing)
* 12
* [ ]  [Beispiele GR 12](https://docs.google.com/spreadsheets/d/109OLDgecr_sFe7zpN-qq1TfumrvYRI8rTApy273wJog/edit?usp=sharing)
* [ ]  [Coniugazione greca](https://docs.google.com/spreadsheets/d/13IWIAK_SSb4z4GJxTclpy8WzmliSpHTWLdG5ke9xbWE/edit?usp=sharing)
* [ ]  [Declinazione greca](https://docs.google.com/spreadsheets/d/1LuuyaQ5GPd8BQyx0j_T6PuMsfCixQsuRCknLALBnEME/edit?usp=sharing)
* [ ]  [Anki - Polis](https://docs.google.com/spreadsheets/d/1naChjDjjq6HDjuQbe1YmT2qpwqEIPWqXAy9aR8J4lsw/edit?usp=sharing)
* [ ]  [12 Dickinson Core](https://docs.google.com/document/d/19CrGvrFLLRAl9h4-pVw1_kvyVIDJtWLEwdoLXCC5lFw/edit?usp=sharing)
* Proyectos / Misc.
* [ ]  [Verbi delle lingue romanze](https://docs.google.com/spreadsheets/d/17on63jV2r4-AfYunSikeC0cDm0iCOPjB0t9frMDkGJY/edit?usp=sharing)
* [ ]  [HYPIA Application Essay](https://docs.google.com/document/d/1uYlIW4JkhH6xQ2E817B4eKKsBVErB2fGMKJCpYJXLgs/edit?usp=sharing)
* [ ]  [Bitext Alignment Scratch - Crime and Punishment](https://docs.google.com/spreadsheets/d/16T3CBWVa_DRHx7OgiU4MaVYu_-ZK7zoqmgxDhV9fiiA/edit?usp=sharing)
* [ ]  [Sprachprojekte mit LaTeX](https://docs.google.com/spreadsheets/d/1HbJNTwWqB1EeseHEtNs_kRcXuDdQBZ8grP-PwdX4InQ/edit?usp=sharing)

* [ ]  [Blog Ideas](https://docs.google.com/document/d/1h4_KBZL6vER9KxBFvoDdg-bhfbtQ8sx3BcY6Rosr6EU/edit)
* [ ]  [Book or Article Ideas](https://docs.google.com/document/d/1v1vMlqKs1TMlaB0b0YWiygbUUzxI5M38yBvCtNRfjSY/edit)
* [ ]  [Website-Ideen](https://docs.google.com/document/d/1TThU49kUfFUD1mODjcQ6c7R7SL9Utmiv0_hzb7beMdM/edit?usp=sharing)

* [ ]  [Literature List](https://docs.google.com/spreadsheets/d/1TxfdNQxmp-A1vBmlXtn2m5hBqmPAnY569q3Paaok4UY/edit)
* [ ]  [Lectura actual (carpeta)](https://drive.google.com/drive/folders/0B2W5kumU32IMTFRaT3Q3U3R1V1U?usp=sharing)

* [ ]  [I. Salúd física (notas)](https://docs.google.com/spreadsheets/d/1GvtjsGWekXDLf2XqoSA0tTpfDBpVSKkio3EBuUlJx_c/edit)
* [ ]  [Pratos possíveis](https://docs.google.com/spreadsheets/d/1PAQx0zhtSgnPlwcUDl7o3I1bifEhbNGvjJ68fIgk8yg/edit?usp=sharing)

* [ ]  [J. Práctica (notes)](https://docs.google.com/spreadsheets/d/1_bVOxXvRsGQdqWSp9YHEatzHmy8aOH8PtcouDmNzZ1k/edit#gid=0)

* [ ]  [Date Ideas](https://docs.google.com/document/d/1ajLsoCmkFdrP_66AlczjhosrCNanphVPVPwUW-LAzMw/edit)
* [ ]  [Questions for Conversation](https://docs.google.com/document/d/1XCO7v2Qkoz8mwQibt2oCzi1jIfnKOlF2SmMGRldB3sY/edit)
* [ ]  [Relationship Strategies](https://docs.google.com/document/d/1i83bClfHxMqI-RwUE3ooEfgZwTFUQOMxPH-fczdkOMU/edit)
* [ ]  [Social Skills and Etiquette](https://docs.google.com/document/d/1AxjcE0W1Hx3cGUF-Vkw-Ljh2kAfQXtP8rtONL7dqZQg/edit?usp=sharing)

* [ ]  [Finanzen](https://docs.google.com/spreadsheets/d/18CmKfa2xxEYrTFcuytDVcbJiaeXK4xOD1qSXOA7fdIY/edit)
* [ ]  [Financial Worksheet](https://docs.google.com/spreadsheets/d/1NyAJlC2IPwf-SCm9yDUgUd-wpWu3RspIF9RhTPaanL8/edit?usp=sharing)

* [ ]  [Examples to Emulate](https://docs.google.com/document/d/1k4lUEfvd6e-cW9G6n7eZYXno7z7Jhj2l-GCJfLH58Ko/edit)
* [ ]  [Personal Evaluations](https://docs.google.com/document/d/1XylbZWRbF-DbIQh2FH2qQFHmU6yzE291bKL1rDdKxfY/edit)
* [ ]  [Family history Work](https://docs.google.com/document/d/1SwmFGRNhKQ0O9ABrz3IW-16EcKwltI4vN3qlCWfX9Vk/edit)
* [ ]  [Life Timeline](https://docs.google.com/document/d/1KPMgWCl2wHXawghHqq6J594mwQGkHtCrjK8Wczsnwb4/edit)
* [ ]  [Meaningful Compliments, Advice, and Criticism](https://docs.google.com/document/d/10pgS2nOpqv2uFxvd9Nt1zwdFl0QF7bOx6oROeoQ09F4/edit)
* [ ]  [Mission Outline](https://docs.google.com/document/d/1B1mOqM4WTGEKayKLC2aPyv97Bl6yWWPbnXfm3erdUUs/edit)
* [ ]  [Journal (Questions) Feb 2016](https://docs.google.com/document/d/1cnPWF7CaIfOwZe8gcuUuMLMpVau9iQ55edrj1RHiyU8/edit?usp=sharing)

  * Contrib Ideas

        update notion-sdk

        make taskw compatible with Python 3.11-12

        improve pytest documentation (more like the pytest book)

        type hints in loguru

        type hints in dynaconf

        make pre-commit PR -> find gap

        format pyenv output

        fix pyenv for use in scripts

        eventually: contribute to zathura-pdf-mupdf get running for Ubuntu 22.04

  * Nautilus fix

            need to make it possible to remove Music, Videos, Pictures from Nautilus sidebar

            → get involved with Gnome project and understand the codebase

  * model of optimal amount of information (informedness)
  * related: idea system of aggregation of knowledge and insights - “How can everybody’s (informed) view matter?” (“trickle-up?”)
  * related to optimal organizing forms ( → modeling, see Networks, Crowds, and Markets book)
  * → write and article of different models/views of news media consumption
        -
  * Word Translation Graph
  * start with prepositions
  * use embeddings and compare embeddings to weighted combinations of translations’ embeddings?
* add to rosetta-projects: Rust port of nand2tetris suite
* IDEA: AI-driven tool to generate or check git commit messages on the basis of the diff. → how does copilot work? how does codex work? how do alternative tools work?
* Deskewer
* [Write your own Linux Keylogger.](https://www.youtube.com/watch?v=89k3llI51fU)
* [libsdl.org/release/SDL-1.2.15/docs/html/guideinputkeyboard.html](https://www.libsdl.org/release/SDL-1.2.15/docs/html/guideinputkeyboard.html)
* [nist.gov/itl/ssd/software-quality-group/safer-languages](https://www.nist.gov/itl/ssd/software-quality-group/safer-languages)

## my projects

* [makeuseof.com/set-up-raspberry-pi-as-server/](https://www.makeuseof.com/set-up-raspberry-pi-as-server/)
* [toptal.com/raspberry-pi/how-to-turn-your-raspberry-pi-into-a-development-server](https://www.toptal.com/raspberry-pi/how-to-turn-your-raspberry-pi-into-a-development-server)
* [toptal.com/raspberry-pi/how-to-turn-your-raspberry-pi-into-a-development-server](https://www.toptal.com/raspberry-pi/how-to-turn-your-raspberry-pi-into-a-development-server)
* [json-schema.org/understanding-json-schema/structuring](https://json-schema.org/understanding-json-schema/structuring)

    qutebrowser due to frozen teams:
* [112:152:0100/000000.790507:ERROR:broker_posix.cc(46)] Received unexpected number of handles  * [112:152:0100/000000.791120:ERROR:broker_posix.cc(46)] Received unexpected number of handles

    move “other” from Recursos por idioma to Notion

    → make Configurability Github organization with forks of apps that support custom colors and keybindings (or just patches?)

    Wie kann ich mich mehr politisch engagieren?

    Just re-write plt code in typescript/JavaScript to use a good highlighting library pre-html; use Perl for something else, like shell scripts
* [google.com/search?client=firefox-b-m&sca_esv=584934822&sxsrf=AM9HkKm9ojvgZM44drVwG0h7TGXNOfu28g%3A1700779676233&q=drop-down+library+ui+design+javascript&oq=drop-down+library+ui+design+javascript&aqs=heirloom-srp](https://www.google.com/search?client=firefox-b-m&sca_esv=584934822&sxsrf=AM9HkKm9ojvgZM44drVwG0h7TGXNOfu28g%3A1700779676233&q=drop-down+library+ui+design+javascript&oq=drop-down+library+ui+design+javascript&aqs=heirloom-srp)

    Install Ubuntu server 23.10 and use complete install script for i3, picom, etc. - then install Nix and home-manager
* [nix.dev/tutorials/nixos/installing-nixos-on-a-raspberry-pi.html](https://nix.dev/tutorials/nixos/installing-nixos-on-a-raspberry-pi.html)

    DON'T Use Raspberry Pis for Servers! [video](https://www.youtube.com/watch?v=aKmKo_Ua7rQ&pp=ygUYbml4b3Mgb24gcmFzcGJlcnJ5IHBpIDQg)

    look into how to make aliases for different programming languages and projects

    xdg-settings set default-web-browser firefox.desktop → make work on hank with flatpak, vs [askubuntu.com/questions/16621/how-to-set-the-default-browser-from-the-command-line](https://askubuntu.com/questions/16621/how-to-set-the-default-browser-from-the-command-line)
* [karabiner-elements.pqrs.org/docs/json/](https://karabiner-elements.pqrs.org/docs/json/) → see for ideas for Clavix format
* [manwar/perlweeklychallenge-club/tree/master](https://github.com/manwar/perlweeklychallenge-club/tree/master) - many languages
* [briandfoy/PerlPowerTools](https://github.com/briandfoy/PerlPowerTools) → for RosettaProjects
* [wpdatatables.com/javascript-table-library/](https://wpdatatables.com/javascript-table-library/)
* [pencilandpaper.io/articles/ux-pattern-analysis-enterprise-data-tables/](https://pencilandpaper.io/articles/ux-pattern-analysis-enterprise-data-tables/)
* [smashingmagazine.com/2019/01/table-design-patterns-web/](https://www.smashingmagazine.com/2019/01/table-design-patterns-web/)
* [medium.com/design-bridges/complex-tables-356826d11861](https://medium.com/design-bridges/complex-tables-356826d11861)
* [google.com/search?q=web design select which columns and rows of table to show&ie=utf-8&oe=utf-8&client=firefox-b-m](https://www.google.com/search?q=web%20design%20select%20which%20columns%20and%20rows%20of%20table%20to%20show&ie=utf-8&oe=utf-8&client=firefox-b-m)
* [blog.logrocket.com/exploring-best-syntax-highlighting-libraries/](https://blog.logrocket.com/exploring-best-syntax-highlighting-libraries/)
* [virola.io/articles/how-to-make-your-server-app-publicly-accessible](https://virola.io/articles/how-to-make-your-server-app-publicly-accessible)
* [r/rust/comments/15xl4ew/inkjet_a_batteriesincluded_syntax_highlighting/](https://www.reddit.com/r/rust/comments/15xl4ew/inkjet_a_batteriesincluded_syntax_highlighting/)
* [rdbo/sigma-linux](https://github.com/rdbo/sigma-linux)
* [opensource.com/article/21/7/custom-raspberry-pi-image](https://opensource.com/article/21/7/custom-raspberry-pi-image)

    HN Guix [news.ycombinator.com/item?id=17083209](https://news.ycombinator.com/item?id=17083209)
* [thiagowfx.github.io/2022/01/alpine-linux-on-raspberry-pi-diskless-mode-with-persistent-storage/](https://thiagowfx.github.io/2022/01/alpine-linux-on-raspberry-pi-diskless-mode-with-persistent-storage/)
* [gitlab.com/raspi-alpine/builder](https://gitlab.com/raspi-alpine/builder)
* [instructables.com/Booting-Raspberry-Pi-3-B-With-a-USB-Drive/](https://www.instructables.com/Booting-Raspberry-Pi-3-B-With-a-USB-Drive/)
* [tomshardware.com/news/raspberry-pi-web-server,40174.html](https://www.tomshardware.com/news/raspberry-pi-web-server,40174.html)
* [macmpi/alpine-linux-headless-bootstrap](https://github.com/macmpi/alpine-linux-headless-bootstrap)
* [itsfoss.com/screenshot-login-screen-ubuntu-linux/](https://itsfoss.com/screenshot-login-screen-ubuntu-linux/)
* [rdbo/sigma-linux](https://github.com/rdbo/sigma-linux)
* [askubuntu.com/questions/1329599/dual-boot-two-linux-distributions-on-one-disk](https://askubuntu.com/questions/1329599/dual-boot-two-linux-distributions-on-one-disk)

    next step: figure out how to ssh into my work computer -> good for planager access from phone, etc

    Open Weather Map API KEy 39f576bf65c9e540357e993fc955c7e5

    inthe_am/isaac.r.riley/f616213f-e590-4a3c-9b73-40733e137ad5

    Look for software that can apply a complex (and continuous) color remapping to a PDF file, or patch my own!!!

    Re-write tree command to show view proportional to LoC or other metrics (tree + tokei, etc)
* [mypy-lang.org/](https://www.mypy-lang.org/) → make PR: roadmap on site not found

    → use mypyc for planager? → compile with codon / mypyc / rewrite in cython and compile?

    Write Python script to parse poetry lockfile, query most recent version (pypi / [Github](https://stackoverflow.com/questions/76133390/how-to-use-github-api-to-retrieve-the-latest-version-of-a-package)) to identify which can be updated
* [braille-txt.github.io/](https://braille-txt.github.io/)

    Fork terminal matrix video and use braille for an improved image → even unicode [xahlee.info/comp/unicode_ascii_art.html](http://xahlee.info/comp/unicode_ascii_art.html)

    → simple pixelwise regression → pixelwise regression weighted relative to edges? →

    write library for terminal art like ascii art, but with unicode!

    → [elpa.gnu.org/packages/ascii-art-to-unicode.html](https://elpa.gnu.org/packages/ascii-art-to-unicode.html)

    Cool for images, but also for text → box lines and block characters, as well as curves

    Braille text art would also be cool → “brailletters” → write CLI in Nim, Zig, Vlang or something?
* [snyde875/ASCII-Art-Tool](https://github.com/snyde875/ASCII-Art-Tool)

    Re-write Matrix terminal to use braille and alternatively to use (a suitable set of) unicode characters

    Which font processing libraries already exist? How to interface with them?

  * alignment

        let "word" = "lemma" in what follows

        given 2 sentences which may be a match:

        what
         is the probability of word ai and word bj co-occurring in a correct
        match vs in an incorrect match? -> ratio, i.e. certainty gain

        add up log certainty gain for all relevant word pairs found in the sentence

        find most predictive words (i.e. word pairs)

        Also negative aspect? -> words highly likely to be translated with another word should decrease certainty if it is not found
* [ugarit.ialigner.com/userProfile.php?userid=3721](https://ugarit.ialigner.com/userProfile.php?userid=3721)
* [ugarit.ialigner.com/about.php](https://ugarit.ialigner.com/about.php)
* [huggingface.co/UGARIT](https://huggingface.co/UGARIT)
* [Image Dithering: Eleven Algorithms and Source Code | tannerhelland.com](https://tannerhelland.com/2012/12/28/dithering-eleven-algorithms-source-code.html)

* Get Chawan updated in nix-config
* Build nix tool for checking if hashes are up-to-date, updating them, outputting (json, etc.) a document of all installed packages, all config files, etc
* nvim tool for more easily and intelligently navigating a nix directory -> use nixel or rnix-parser (name: nixjump? nixnav?)

# Polyglot Toolkit

### PolyglotToolkit

* Reader features (browser-based?) for parellel text, interlineator, etc.: make reference-languuage small and faint (and customizable) or togglable to make it easier to focus on the target language

```
* i \in [j-3, j + diff + 3]
* r > c: j-3 \leq i \leq j+d+3
* c > c: i-3 \leq j \leq i+d+3

```
* other PolyglotToolkit Projects: translation-trainer: use tatoeba or supplied parallel text (optimally with multiple translations), compute metrics, show diff, display dashboard, etc.language utility (pre-processor) packages, esp for Arabic, Ancient Greek, ChineseAlignment Tool(s)make GUI tool (or nvim plugin) for manual sentence/word alignmentCLI for viewing parallel texts in the terminalVocalizer: add diacritics to language (seq2seq package) - for arabic, hebrew, ancient greek, latin (with macros → [Alatius/latin-macronizer),](https://github.com/Alatius/latin-macronizer),) [ictibus.blogspot.com/,](http://ictibus.blogspot.com/,) [ilovegooglebooks.blogspot.com/search/label/macrons,](http://ilovegooglebooks.blogspot.com/search/label/macrons,) russian → [russiangram.com/,](https://russiangram.com/,) easy test case for training data, ukrainianLatin error detector: fix wrong endings → right architecture for finding single location (here error) in a sequenceMaybe start with Ancient Greek diacritics: easy data, learnable objectiveuse PoS tagging, Wiktionary word info (via Wiktionary tool) → later dependency parsing?

## Expression Translation Tables (→ Multi-Word Expression Project, Proverbs Project)

* [en.wiktionary.org/wiki/Category:Multiword_terms_by_language](https://en.wiktionary.org/wiki/Category:Multiword_terms_by_language)

## Parallel Text Aligner

# Parallel Text Alignment (and Formatting)

* [yelircaasi/parallel-text-aligner](https://github.com/yelircaasi/parallel-text-aligner)
* [yelircaasi/parallel-text-finisher](https://github.com/yelircaasi/parallel-text-finisher)

 example: [2books.su/](https://2books.su/)
* saved links to sort
    * PTF

        PTF Roadmap: simple end-to-end case: 2 aligned files, simple config, simple output PDFrefine project structurerefine config structure % options: first sample text, add book form with chapterswrite unit testswrite integration testsinstall texlive with all necessary packages in alpine container-> learn texlive structure & content of various packages (deb, but especially apk)-> slim down alpine texlive container (dockerslim? graph of files read during command execution?)

        make config format for book, chapter, article, simple, etc.
* [Converting Markdown to Beautiful PDF with Pandoc - jdhao's digital space](https://jdhao.github.io/2019/05/30/markdown2pdf_pandoc/)
* [mirror/busybox: BusyBox mirror](https://github.com/mirror/busybox)
* [Alpine Linux](https://wiki.alpinelinux.org/wiki/Main_Page)
* [alpinelinux/apk-tools: [MIRROR] Alpine package manager](https://github.com/alpinelinux/apk-tools)
* [try this:](https://dvc.org/doc/user-guide/data-management/remote-storage/google-drive) → for parallel text data and also for my own pdfs
* [Wandmalfarbe/pandoc-latex-template](https://github.com/Wandmalfarbe/pandoc-latex-template)

        add Epictetus' works:
* [Encheiridion Epictetus - Documentos de Google](https://docs.google.com/document/d/1sXjcRTugUiL0UN-QQUzfKv7BpZwJL-h6UTaQCpSlxSo/edit#)
* [Sfoglia per autore | Traduci Versioni](https://traduciversioni.it/authors)

    Free bilingual book French / English, The Adventures of Tom Sawyer,    CHAPITRE XIV —    CHAPTER XIV.
* [http://bilinguis.com/book/tomsawyer/fr/en/c14/](https://languagefixation.wordpress.com/2011/02/23/how-to-create-parallel-texts-for-language-learning-part-2/)
* [How to create parallel texts for language learning, part 2 | Language Fixation](https://languagefixation.wordpress.com/2011/02/23/how-to-create-parallel-texts-for-language-learning-part-2/)
* [hunalign – sentence aligner | Média Oktató és Kutató Központ](http://mokk.bme.hu/resources/hunalign/)
* [hunalign/src at master · danielvarga/hunalign](https://github.com/danielvarga/hunalign/tree/master/src)
* [kindlychung/af-aligner: LF Aligner helps translators create translation memories from texts and their translations. It relies on Hunalign for automatic sentence pairing. Input: txt, doc, docx, rtf, pdf, html. Output: tab delimited txt, TMX and xls. With web features.](https://github.com/kindlychung/af-aligner)

    Forced Alignment with Wav2Vec2 — Torchaudio nightly documentation
* [SimAlign: High Quality Word Alignments Without Parallel Training Data Using Static and Contextualized Embeddings - 2020.findings-emnlp.147.pdf](https://aclanthology.org/2020.findings-emnlp.147.pdf)
* [LF Aligner - Browse Files at SourceForge.net](https://sourceforge.net/projects/aligner/files/)
* [SuperAlign download | SourceForge.net](https://sourceforge.net/projects/superalign/)
* [bitext2tmx CAT bitext aligner/converter download | SourceForge.net](https://sourceforge.net/projects/bitext2tmx/)
* [OmegaT - multiplatform CAT tool download | SourceForge.net](https://sourceforge.net/projects/omegat/)
* [Государство (Платон) — Викитека](https://ru.wikisource.org/wiki/%D0%93%D0%BE%D1%81%D1%83%D0%B4%D0%B0%D1%80%D1%81%D1%82%D0%B2%D0%BE_(%D0%9F%D0%BB%D0%B0%D1%82%D0%BE%D0%BD))
* [What Does Exodus 15:17 Mean? "Thou wilt bring them in, and plant them in the mountain of thine inheritance, The place, O Jehovah, which thou hast made for thee to dwell in, The sanctuary."](https://www.biblestudytools.com/exodus/15-17-compare.html)
* [Are JRR Tolkien's works in the public domain since most of them were written in the 1940s and 30s? - Quora](https://www.quora.com/Are-JRR-Tolkiens-works-in-the-public-domain-since-most-of-them-were-written-in-the-1940s-and-30s)
* [Aristotle - Wikisource, the free online library](https://en.wikisource.org/wiki/Author:Aristotle)
* [The Prophet (Gibran) - Wikisource, the free online library](https://en.wikisource.org/wiki/The_Prophet_(Gibran))
* [The World’s Most Translated Books - Day Translations Blog](https://www.daytranslations.com/blog/the-worlds-most-translated-books/)
* [Free bilingual book German / English, Alice's Adventures in Wonderland,    Inhalt. —    CO](http://bilinguis.com/book/alice/de/en/)NTENTS
* [Download Quran Text - Tanzil](https://tanzil.net/download/)
* [Quran Translations - Tanzil](https://tanzil.net/trans/)
* [Al-Quran [1]](https://al-quran.info/#1)
* [Über das Projekt | Corpus Coranicum](https://corpuscoranicum.de/de/about)
* [The Most Translated Documents in History - ITC USA](https://www.itcglobaltranslations.com/blog/the-most-translated-documents-in-history/)
* [Manifesto of the Communist Party - Wikisource, the free online library](https://en.wikisource.org/wiki/Manifesto_of_the_Communist_Party)
* [بيان الحزب الشيوعي](https://www.marxists.org/arabic/archive/marx/1848-cm/01.htm)
* [Index Translationum - Wikipedia](https://en.wikipedia.org/wiki/Index_Translationum)
* [10 books you can read on Karl Marx in Arabic - Books - Ahram Online](https://english.ahram.org.eg/NewsContent/18/0/299375/Books/-books-you-can-read-on-Karl-Marx-in-Arabic.aspx)
* [Tokenizer](https://huggingface.co/docs/transformers/main_classes/tokenizer)
* [Summary of the tokenizers](https://huggingface.co/docs/transformers/tokenizer_summary)
* [python - Plotting a 2D heatmap - Stack Overflow](https://stackoverflow.com/questions/33282368/plotting-a-2d-heatmap)
* [OHCHR | Universal Declaration of Human Rights - German (Deutsch)](https://www.ohchr.org/en/human-rights/universal-declaration/translations/german-deutsch)
* [Universal Declaration of Human Rights | United Nations](https://www.un.org/en/about-us/universal-declaration-of-human-rights)
* [SynWMD: Syntax-aware Word Mover's Distance for Sentence Similarity Evaluation](https://arxiv.org/abs/2206.10029)
* [How to Make a Language Translator - Intro to Deep Learning #11](https://youtu.be/nRBnh4qbPHI)
* [Word alignment - Cutting the chicken-egg problem | MT talks #8](https://youtu.be/mqyMDLu5JPw)
* [JelteF/PyLaTeX: A Python library for creating LaTeX files](https://github.com/JelteF/PyLaTeX)

    Alignment approach:1) predict probability of text problems, use this to set k (number of superdiagonals)2) create length-based grid structure3) load models4) find anchor points5) solve alignment sub-problems between anchor points6) flag low-scoring alignments

    Alignment:A) create grid visualization -> how to draw an uneven grid in Matplotlib -> view implementations in different gantt reposB) visualize diagonal distortion from deletion / insertion: how many additional sub-/superdiagonals are needed to cover the true alignment?C) create absolute length-based predictor for each language pair: fit distribution to absolute lengths  -> normal distribution with delta a function of lengths (2 lengths in pair), could be: OLS, quantile regression, logistic regression with 2 inputs -> use as text problem predictor

    Alignment: function word translation probabilities, BoW, BoW with relative position information
* [Sentence alignment - Gale & Church | MT talks #7](https://www.youtube.com/watch?app=desktop&v=_4lnyoC3mtQ)
* [Beam Search in Seq2Seq Model. We learnt about a basic seq2seq model… | by Dharti Dhami | Medium](https://medium.com/@dhartidhami/beam-search-in-seq2seq-model-7606d55b21a5)
* [Beam Search in Seq2Seq Model. We learnt about a basic seq2seq model… | by Dharti Dhami | Medium](https://medium.com/@dhartidhami/beam-search-in-seq2seq-model-7606d55b21a5)
* [What is Beam Search? Explaining The Beam Search Algorithm | Width.ai](https://www.width.ai/post/what-is-beam-search)
* [dbamman/latin-bert: Latin BERT](https://github.com/dbamman/latin-bert)
* [pranaydeeps/Ancient-Greek-BERT · Hugging Face](https://huggingface.co/pranaydeeps/Ancient-Greek-BERT)
* [pranaydeeps/Ancient-Greek-BERT: Pre-trained BERT Models for Ancient and Medieval Greek, and associated code for LaTeCH 2021 paper titled - "A Pilot Study for BERT Language Modelling and Morphological Analysis for Ancient and Medieval Greek"](https://github.com/pranaydeeps/Ancient-Greek-BERT)
* [alvations/NTU-MC/blob/master/ntumc/toolkit/gale_church.py](https://github.com/alvations/NTU-MC/blob/master/ntumc/toolkit/gale_church.py)
* [dowobeha/Gale_and_Church_1993](https://github.com/dowobeha/Gale_and_Church_1993)

    Supervised Mover s Distance [google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&cad=rja&uact=8&ved=2ahUKEwjN8dyrmYL-AhXP-6QKHXaoBAoQFnoECAYQAQ&url=https%3A%2F%2Fpeerj.com%2Fpreprints%2F26847.pdf&usg=AOvVaw0U0yhoLXnJ1lxl0sbmIRCp](https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&cad=rja&uact=8&ved=2ahUKEwjN8dyrmYL-AhXP-6QKHXaoBAoQFnoECAYQAQ&url=https%3A%2F%2Fpeerj.com%2Fpreprints%2F26847.pdf&usg=AOvVaw0U0yhoLXnJ1lxl0sbmIRCp)
* [Massively Multilingual Document Alignment with Cross-lingualSentence-Mover’s Distance](https://youtu.be/0GmRL4rj_dA)

## Roadmap

* [x]  Find good text sources
* [x]  Open a .txt file in Julia
* [x]  Tokenize sentences in Julia using WordTokenizer.jl
* [ ]  [JelteF/PyLaTeX](https://github.com/JelteF/PyLaTeX) → import, vendor, or recreate what I need from scratch?- [ ]  look at this for epub: [yihong0618/bilingual_book_maker](https://github.com/yihong0618/bilingual_book_maker)
* [ ]  split [pltk repo](https://github.com/yelircaasi/pltk) into multiple projects → decide which language for which one
* [ ]  Bitext Alignment book
* Gale-Church
* [ ]  [Gale-Church Paper](https://aclanthology.org/J93-1004.pdf)
* [ ]  [TakeLab/Coral](https://github.com/TakeLab/Coral)
* [ ]  [NLTK Gale-Church](https://github.com/nltk/nltk/blob/a915791ad501d41dbb7e3c13c4877a734505eaab/nltk/translate/gale_church.py)
* [ ]  [alvations/gachalign](https://github.com/alvations/gachalign)
* [ ]  [vosmann/galechurch](https://github.com/vosmann/galechurch)
* [ ]  [alvations/NTU-MC/blob/master/ntumc/toolkit/gale_church.py](https://github.com/alvations/NTU-MC/blob/master/ntumc/toolkit/gale_church.py)
* [ ]  [dowobeha/Gale_and_Church_1993](https://github.com/dowobeha/Gale_and_Church_1993)
* [ ]  [amake/JAlignRegions](https://github.com/amake/JAlignRegions)
* [ ]  [gitpan/Text-GaleChurch](https://github.com/gitpan/Text-GaleChurch)
* [ ]  [sbert.net/index.html](https://www.sbert.net/index.html)
* [ ]  [Triplet Transformer Network for Multi-Label Document
* Classification](https://dl.acm.org/doi/pdf/10.1145/3558100.3563843)- [ ]  [abarthakur/multilabel-deep-metric](https://github.com/abarthakur/multilabel-deep-metric)
* [ ]  [rsennrich/Bleualign](https://github.com/rsennrich/Bleualign)
* [ ]  [bfsujason/bertalign*](https://github.com/bfsujason/bertalign*) [doi.org/10.1093/llc/fqac089](https://doi.org/10.1093/llc/fqac089)
* [ ]  [thompsonb/vecalign](https://github.com/thompsonb/vecalign)
* [Vecalign: Improved Sentence Alignment in Linear Time and Space](http://aclanthology.lst.uni-saarland.de/D19-1136.pdf)- [ ]  [facebookresearch/LASER](https://github.com/facebookresearch/LASER)
* [ ]  [bojone/labse*](https://github.com/bojone/labse*) [huggingface.co/sentence-transformers/LaBSE](https://huggingface.co/sentence-transformers/LaBSE)
* [ ]  [danielvarga/hunalign](https://github.com/danielvarga/hunalign)
* [ ]  [LowResourceLanguages/champollion](https://github.com/LowResourceLanguages/champollion)
* [ ]  [A survey on parallel corpora alignment](http://andrefs.github.io/publications/files/1102_corpalignment_mistar.pdf)- [ ]  [Revisiting sentence alignment algorithms for alignment visualization and evaluation](https://aclanthology.org/www.mt-archive.info/10/BUCC-2012-Yu.pdf)- [ ]  [Improve Sentence Alignment by Divide-and-conquer](https://arxiv.org/abs/2201.06907)- [ ]  [Very Low Resource Sentence Alignment: Luhya and Swahili](https://arxiv.org/abs/2211.00046)- [ ]  [Sentence Alignment with Parallel Documents Facilitates Biomedical Machine Translation](https://arxiv.org/abs/2104.08588)- [ ]  [Bilingual alignment transfers to multilingual alignment for unsupervised parallel text mining](https://arxiv.org/abs/2104.07642)- [ ]  [A New Aligned Simple German Corpus](https://arxiv.org/abs/2209.01106)- [ ]  [Exploiting Parallel Corpora to Improve Multilingual Embedding based Document and Sentence Alignment](https://arxiv.org/abs/2106.06766)- [ ]  [PMIndia -- A Collection of Parallel Corpora of Languages of India](https://arxiv.org/abs/2001.09907)- [ ]  [Robust Cross-lingual Embeddings from Parallel Sentences](https://arxiv.org/abs/1912.12481)- [ ]  [A Large Parallel Corpus of Full-Text Scientific Articles](https://arxiv.org/abs/1905.01852)- [ ]  [Vicinity-Driven Paragraph and Sentence Alignment for Comparable Corpora](https://arxiv.org/abs/1612.04113)- [ ]  [Learning Bilingual Sentence Embeddings via Autoencoding and Computing Similarities with a Multilayer Perceptron](https://arxiv.org/abs/1906.01942)- [ ]
* [ ]  [bitbucket.org/tiedemann/lingua-align/wiki/Home](https://bitbucket.org/tiedemann/lingua-align/wiki/Home)
* [ ]  [robertostling/efmaral](https://github.com/robertostling/efmaral)
* [ ]  Later: add desktop gui app using these as dependencies → [build-system.fman.io/](https://build-system.fman.io/) (or simply pyinstaller) with Darling and Wine to build for all 3 platforms (first try small toy example)
* OLDER
* [ ]  [docs.julialang.org/en/v1/manual/types/](https://docs.julialang.org/en/v1/manual/types/)
* [ ]  write general visualization functions for grids and matrice
* [ ]  plot(0:0.1:1, 0:0.1:1, xticks=[0,0.5,1], yticks=[0,0.5,1])
* [docs.juliaplots.org/latest/generated/attributes_axis/](http://docs.juliaplots.org/latest/generated/attributes_axis/)
* [ ]  Make geometric weight grid and develop algorithm to find diagonal alignments
* [ ]  create visualizations of the above
* [ ]  Make score vector matrix (tensor?)
* [ ]  Read [Bitext Alignment](https://drive.google.com/file/d/1q7olx20hWgCb85vW4F6YfHiK58JPmYEG/view?usp=sharing)
* [ ]  Read [Overview of BA Algorithms](https://drive.google.com/file/d/1cVFNvbJ1Tjr-14yQh_l8kYnaOhVumxsp/view?usp=sharing)
* [ ]  read neural alignment papers / tools

* [ ]  ‣            * [ ]  ‣            * [ ]  [hunalign – sentence aligner | Média Oktató és Kutató Központ](http://mokk.bme.hu/resources/hunalign/)
* [ ]  [farkastranslations.com/alignment.php](https://farkastranslations.com/alignment.php)
* [ ]  ‣            * [ ]  ‣            * [ ]  The protein-protein interaction network alignment using recurrent neural networ
* [ ]  [Neural Network Alignment for Sentential Paraphrases](https://aclanthology.org/P19-1467.pdf)
* [ ]  Accelerating DNA pairwise sequence alignment using FPGA and a customized convolutional neural networ
* [ ]  [Enhanced Self-Organizing Map Neural Network for DNA Sequence Classification](https://file.scirp.org/pdf/IIM_2013012416282128.pdf)
* [ ]  [Neural Time Warping For Multiple Sequence Alignment](https://arxiv.org/abs/2006.15753)
* [ ]  [A Neural Multi-sequence Alignment TeCHnique (NeuMATCH)](https://openaccess.thecvf.com/content_cvpr_2018/papers/Dogan_A_Neural_Multi-Sequence_CVPR_2018_paper.pdf)
* [ ]  [Gapped sequence alignment using artificial neural networks: application to
            the MHC class I system](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6402319/)
* [ ]  [NN-align. An artificial neural network-based alignment algorithm for MHC class II peptide binding prediction](https://pubmed.ncbi.nlm.nih.gov/19765293/)
* [ ]  [TEMPORAL ALIGNMENT PREDICTION FOR SUPER- VISED REPRESENTATION LEARNING AND FEW-SHOT SEQUENCE CLASSIFICATION](https://openreview.net/pdf?id=p3DKPQ7uaAi)
* [ ]  [High-speed all-optical DNA local sequence alignment based on a three-dimensional artificial neural network](https://www.osapublishing.org/josaa/abstract.cfm?uri=josaa-34-7-1173)
* [ ]  [deepai.org/publication/mask-align-self-supervised-neural-word-alignment](https://deepai.org/publication/mask-align-self-supervised-neural-word-alignment)
* [ ]  [A Discriminative Neural Model for Cross-Lingual Word Alignment](https://www.arxiv-vanity.com/papers/1909.00444/)
* [ ]  [Bitext Maps and Alignment via Pattern Recognition](https://www.researchgate.net/publication/2478530_Bitext_Maps_and_Alignment_via_Pattern_Recognition)
* [ ]  [An Empirical Investigation of Word Alignment Supervision for Zero-Shot Multilingual Neural Machine Translation](
* [ ]  [Lesan -- Machine Translation for Low Resource Languages](https://arxiv.org/abs/2112.08191)
* [ ]  [Link-Intensive Alignment for Incomplete Knowledge Graphs](https://arxiv.org/abs/2112.09266)
* [ ]              * [ ]  [en.wikipedia.org/wiki/Parallel_text](https://en.wikipedia.org/wiki/Parallel_text) (see links!
* [ ]  [www-i6.informatik.rwth-aachen.de/web/Tools/GIZA++.html](http://www-i6.informatik.rwth-aachen.de/web/Tools/GIZA++.html)
* [ ]  [terminotix.com/index.asp?content=item&item=49&lang=en](https://terminotix.com/index.asp?content=item&item=49&lang=en)
* [ ]  [nlp.jhu.edu/parabank/](https://nlp.jhu.edu/parabank/)
* [ ]  [Towards Neural Machine Translation with Partially Aligned Corpora](https://arxiv.org/abs/1711.01006)
* [ ]  [WikiMatrix: Mining 135M Parallel Sentences in 1620 Language Pairs from Wikipedia](https://arxiv.org/abs/1907.05791)
* [ ]
* [ ]  Read SMT Tutorial Workbook)
* [ ]  Read [Neural Machine Translation and Sequence-to-sequence Models: A Tutorial](https://arxiv.org/pdf/1703.01619)
* [ ]  Julia Programming Projects.pdf
* [ ]  Read Hands-on Design Patterns and Best Practices with Julia
* [ ]  Read Julia 1.0 Programming Dynamic and High-Performance Programming to Build Fast Scientific Applications
* [ ]  Read Julia Docs, especially sections on packaging and high-performance tips
* [ ]  learn about diff algorithms → application to bitext alignment?        * [ ]  [4 Diff Algorithms in Git](https://link.springer.com/article/10.1007/s10664-019-09772-z)
* [ ]  [git-scm.com/docs/git-diff](https://git-scm.com/docs/git-diff)
* [ ]  [en.wikipedia.org/wiki/Diff](https://en.wikipedia.org/wiki/Diff)
* [ ]  [luppeng.wordpress.com/2020/10/10/when-to-use-each-of-the-git-diff-algorithms/](https://luppeng.wordpress.com/2020/10/10/when-to-use-each-of-the-git-diff-algorithms/)
* [ ]  [malvikasharan/Alignment-Algorithms](https://github.com/malvikasharan/Alignment-Algorithms)
* [ ]  for sentence matching classifier: [Inter-Weighted Alignment Network for Sentence Pair Modeling](https://aclanthology.org/D17-1122.pdf)
* [ ]  [Improving neural sentence alignment with word translation](https://link.springer.com/article/10.1007/s11704-019-9164-3)
* [ ]  [Cross-Sentence Alignment with Deep Neural Networks](https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&ved=2ahUKEwj11fSdpaz1AhUG8rsIHQ7JCRUQFnoECAgQAQ&url=https%3A%2F%2Flink.springer.com%2Fchapter%2F10.1007%2F978-3-030-27947-9_16&usg=AOvVaw0r6O7LmghTzp_vvABO6PyI)
* [ ]  [Word Alignment Modeling with Context Dependent Deep Neural Network](https://aclanthology.org/P13-1017.pdf)
* [ ]  [Neural network alignment for sentential paraphrases](https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&ved=2ahUKEwj11fSdpaz1AhUG8rsIHQ7JCRUQgAMoAXoECAEQAw&url=https%3A%2F%2Fscholar.google.de%2Fscholar_url%3Furl%3D)
        https%3A%2F%2Fwww.aclweb.org%2Fanthology%2FP19-1467.pdf%26hl%3Dit%26sa%3DX%26ei%3D1NPeYbnfC8CVy9YPkO25qAM%26scisig%3DAAGBfm2d9BeLWAihhOGm-qVK6R3pxYm9Yw%26oi%3Dscholarr&usg=AOvVaw3inDZXW5pNu1YjIykpxWeF)
* [ ]  The TransBank Aligner: Cross-Sentence Alignment with Deep Neural Networks
* [ ]  [Iterative, MT-based Sentence Alignment of Parallel Texts](https://www.semanticscholar.org/paper/Iterative%2C-MT-based-Sentence-Alignment-of-Parallel-Sennrich-Volk/b74b3e52011a0b55f6f7187d3486fb3ae34d1e6e)
* [ ]  [Inter-Weighted Alignment Network for Sentence Pair Modeling](https://aclanthology.org/D17-1122.pdf)
* [ ]  [Neural CRF Model for Sentence Alignment in Text Simplification](https://cocoxu.github.io/publications/ACL2020_sentence_alignment.pdf)
* [ ]  [A Deep Neural Network Approach To Parallel Sentence Extraction](https://arxiv.org/pdf/1709.09783)
* [ ]  [Folder](https://drive.google.com/drive/folders/1e0e4dfhe6Ln8rBy9P_DFI9mJOfPxbyN0?usp=sharing)
* [ ]  [Text Technology Project (Quality Resources)](https://docs.google.com/spreadsheets/d/1U0VKGtTF4XOXSPsnb8SFIP5z87IOiDTcwSgDv_SUQww/edit?usp=sharing)
* [ ]  [downsub.com](http://downsub.com/)
* [ ]  [mp3cut.net/es/#](http://mp3cut.net/es/#)
* [ ]  [toolster.net/mp3_cutter](http://toolster.net/mp3_cutter)
* [ ]  [audiotrimmer.com/fr/](https://audiotrimmer.com/fr/)
* [ ]  [onlinevideoconverter.com/es/video-converter](https://www.onlinevideoconverter.com/es/video-converter)
* [ ]  translation practice
* [ ]  create parallel text (.txt → python → tex)
* [ ]  vocab test
* [ ]  reader (with functiion words / basic list removed); list words & lemmas to learn
* [ ]  reverso-type context display for lemma (multiple translations for each context)
* [ ]  tool to identify well-known words & words to work on (ML?)
* [ ]  [Bitext Maps and Alignment via Pattern Recognition (1999)](https://www.aclweb.org/anthology/J99-1003.pdf)
* [ ]  [Bilingual Lexicon Induction via Unsupervised Bitext Construction and Word Alignment](https://arxiv.org/abs/2101.00148)
* [ ]  [Bitext alignment for statistical machine translation](https://dl.acm.org/doi/book/10.5555/1195091)
* [ ]  [Segmentation and alignment of parallel text for statistical machine translation](https://www.researchgate.net/deref/http%3A%2F%2Fdx.doi.org%2F10.1017%2FS1351324906004293)
* [ ]  Book: Bitext Alignment
* [ ]  [Gale Church Paper](https://www.aclweb.org/anthology/J93-1004.pdf)
* [ ]  bitext alignment with word embeddings - Cerca con Google
* [ ]  [Building an Italian-Chinese Parallel Corpus for Machine ...](https://dl.acm.org/doi/abs/10.1145/3411170.3411258)
* [ ]  [Sentence alignment using feed forward neural network](https://pubmed.ncbi.nlm.nih.gov/17285688/)
* [ ]  [Deep Neural Networks at the Service of Multilingual Parallel ...](https://aclanthology.org/C18-1116.pdf)
* [ ]  [A Supervised Word Alignment Method based on Cross ...](https://aclanthology.org/2020.emnlp-main.41.pdf)
* [ ]  [Neural machine translation: A review of methods, resources, and tools](https://www.sciencedirect.com/science/article/pii/S2666651020300024)
* [ ]  → how to use beam search in neural network (Flux.jl, PyTorch, TensorFlow)
* [ ]  how do namespaces work in Julia?
* [ ]  read about Julia plotting libraries

## Architecture

* 1. Text input methods
* 2. Text tokenization
* 3. Text alignment → alternative entry point for pre-aligned texts
* 4. Manual verification of aligned texts
* 5. Formatting options for LaTeX (choice between manual / YAML file)
* 6. LaTeX compilation and outpu

## Tech Stack

* Julia

    → which gui?
         → [towardsdatascience.com/6-julia-frameworks-to-create-desktop-guis-and-web-apps-9ae1a941f115](https://towardsdatascience.com/6-julia-frameworks-to-create-desktop-guis-and-web-apps-9ae1a941f115)

    → [syl1.gitbook.io/julia-language-a-concise-tutorial/language-core/11-developing-julia-packages](https://syl1.gitbook.io/julia-language-a-concise-tutorial/language-core/11-developing-julia-packages)
* LaTeX
* Docker
* Web interface

    → which tools?

    → how to host?

## Text Sources

* [gutenberg.org/](https://www.gutenberg.org/)
* [en.wikisource.org/wiki/Main_Page](https://en.wikisource.org/wiki/Main_Page)
* [ws-export.wmcloud.org/?lang=en&title=The_Brothers_Karamazov](https://ws-export.wmcloud.org/?lang=en&title=The_Brothers_Karamazov)
* [fb2bookfree.com/](https://fb2bookfree.com/)
* [archive.org/](https://archive.org/) (good for imperfect texts, OCR, etc.)

## Preprocessing

* Input formats:
* .txt
* .csv
* .epub
* .fb2
* .htm(l)
* .xml (also common intermediate format?)
* Hierarchy:

      Chapter > Paragraph > Sentence > Phrase > Word (?)
* Tokenization at each level given above → see [WordTokenizers.jl](https://www.theoj.org/joss-papers/joss.01956/10.21105.joss.01956.pdf) for sentence and word level; use regex and pattern recognition for others
* Data structure:

## Bitext Alignment Component

* Data structures:
* text segment structures: string array?
* alignment structure: text segment structures, corresponding alignment index arrays → how to most structure indices to allow for efficient frequent shifting of indices? mutable struct?
* n x m grid of alignment scores → filled in on “diagonal” (relative positional overlap) and within k of the “diagonal” to be learned with a max-margin approach: softmax regression over features?
* geometric grid, where side lengths represent relative weight → use to find diagonal
* feature vector for each proposed alignment: punctuation counts, stop word counts, capitalization counts (where applicable), word length, relative word length, relative character length, basic part of speech counts, etc. → tensor? dataframe with vector entries? → einsum notation for computations?
* n x m score matrix
* segment type annotations (predicted probabilities, types: paragraph, chapter title, page number, footnote):  → to feature vector?
* Scoring Models: TODO: [Draw diagram](https://app.diagrams.net/)
* concatenation of both feature vectors (→ their difference will be learned internally in the small neural network) as input to a small scoring model (FFNN?)
    * trained by max margin: gold alignment given 1, each alignment in both directions with neighbors no further than j positions away scored 0 → triplet loss?
    * 1 basic relative weight-based model (linear regression likely sufficient) and many language-pair-specific models (FFNN likely superior)
* Triplet / Siamese network to learn sentence pair scores from a relatively small set of function words (stop words) (and other very high-frequency lemmas?):
* sentence → representation → aggregation → dense embedding model (except for models where aggregation and embedding occur together) → dot product / cosine distance as score (to be minimized)
* Key assumption: this score will be - with very high probability - higher for correct than for incorrect alignments (especially for true alignments vs neighboring alignments)
* → idea: add normalized length measures (character, token)
    * function-word translation probabilities - using a small set of frequent (i.e. function) words, their co-occurrence probabilities (or perhaps relative probabilities → log-odds ratio?) can be used to generate a score for each sentence pair
    * bag-of-words-based score
    * expanded bag-of-words-based scores (many variations possible): use positional encodings / positional embeddings (as in Transformer, or more simply one-hot for word being in part k → see part about 2D input)? additional token types such as before/after function words, i.e. words mapped to likely types
    → how to use positional encodings?
    * very low-dimensional embeddings for k most frequent words (PCA or other dimensionality reduction technique from pre-trained)
    * 2D input, convolutional element → variation on each model below
    * LSTM-based embeddings
    * simple encoder-decoder-based embeddings
    * Transformer/attention-based embeddings
* Approaches:
* 1. Relative Weight-Based (i.e. length-based)
    1. paragraph
    2. sentence
* 2. Content overlap-based
    1. lexicon-based
        1. stop-words (N most frequent) - more efficient
        2. larger or even practically-full lexicon (or lemma) set to learn co-occurrence probabilities from - less efficient, greater accuracy possible → see above
        3. recognition and use of proper nouns
        4. word embedding-based? → see above
    2. punctuation-based
    3. consecutive n-gram overlap scores (with transliteration mapping rules)
* 3. Neural approach
    1. one idea: all easy-to-compute features as input to alignment model (cf. non-neural?)
        1. baseline language-agnostic model from relative weight-based features
        2. language pair-specific additional features: bigrams, punctuation, stop words (→ possibly better to have overlap of possible translations of stop words, potentially weighted by translation probability), proper noun recognition, etc.
* 4. Parameter tuning from training data (for all or most of the above) - possible (more primitive) alternative to the neural approach
* 5. binary predictor for matching segment pairs: match / no match → possibility of using and tuning word embeddings
* → embed sentence and use triplet network training to maximize “closeness” of respective embeddings
* → predict PoS for all words, use filler PoS embeddings for all words not in stop words, punctuation, N most common lemmas
* → embed each token, use two sequence models to each output a “sentence” (text unit) embedding, tor input to triplet loss
* → use beam search on the output of this to find most likely alignments
* 6. translation-based approach
    1. full neural / statistical MT
    2.  → [opennmt.net/,](https://opennmt.net/,)
* [huggingface.co/docs/transformers/model_doc/marian](https://huggingface.co/docs/transformers/model_doc/marian)
* [marian-nmt.github.io/](https://marian-nmt.github.io/)
     [opus.nlpl.eu/Opus-MT/](https://opus.nlpl.eu/Opus-MT/)
* 7. RL-based approach: advantage of relatively small action space, typically limited number of look-aheads → how to parametrize environment, policy, etc.? → which algorithm(s) to use?
* Other ideas:
* use “breakpoints” - likely paragraph, section, chapter etc. breaks → indicator of likelihood of certain alignments (naturally not ironclad)
* proper noun anchoring approach: identify proper nouns (NER + pattern matching?) → different approaches for different language pairs
* Modules
* Noiser: take clean and aligned texts (alignment data structure) and add noise, split some segments, combine some segments, to imitate look of Wiktionary or Project Gutenberg, etc. formats → input to training algorithms, with ground truth available (use break point tags to keep track of equivalences → one set for each version, clean and noisy, and in master data structure both)

### Relevant Algorithms

* 1. Beam Search (adapted to bitex alignment
* 2. Anchor point seeded beam search
    1. diagonal max overlap
    2. k steps in either direction for $4k^2$  possible alignments
    3. search over proposed alignments, narrowing the search space as much as possible when high-quality alignments are found
    4. → see Bitext Alignment (2) for ideas on how to implement this
    5. above, but with max lookahead, before selecting anchor points above a certain threshold and continuing from there
* 3. multilingual alignment with modified version of 1. (more than 2 languages at a time for greater robustness)
* → [en.wikipedia.org/wiki/Category:Search_algorithms](https://en.wikipedia.org/wiki/Category:Search_algorithms)
* 1. RL-powered search?
* 2. Score grid traversal: 7 lookaheads (possible next alignments), need to re-evaluate 4 of those to see if alignment scores improve after combining segments
* 3. anchor traversal: once p reliable good anchors are found (scores above a pre-determined threshold), reduce search space to feasible paths between anchors → algorithm to compute permissible paths / re-compute diagonals
* 4.

## Extensions

* juxtalinear LaTeX generator
* interlinear LaTeX generator
    * including from parallel texts
* GUI app (in Rust? in Julia? in C++?)
* [stackoverflow.com/questions/35328468/how-to-make-a-gui-in-julia](https://stackoverflow.com/questions/35328468/how-to-make-a-gui-in-julia)
* [dev.to/davidedelpapa/rust-gui-introduction-a-k-a-the-state-of-rust-gui-libraries-as-of-january-2021-40gl](https://dev.to/davidedelpapa/rust-gui-introduction-a-k-a-the-state-of-rust-gui-libraries-as-of-january-2021-40gl)
* Other
* → make interlinear reading app and interlinear pdf generator
* [Animenosekai/translate](https://github.com/Animenosekai/translate)
* [jekbradbury/SpaCy.jl](https://github.com/jekbradbury/SpaCy.jl)
* [genieframework.com/#stipple-section](https://genieframework.com/#stipple-section)
* [genieframework.com/](https://genieframework.com/)
* [JuliaGizmos/Interact.jl](https://github.com/JuliaGizmos/Interact.jl)
* [plotly/Dash.jl](https://github.com/plotly/Dash.jl)
* [GenieFramework/StippleDemos](https://github.com/GenieFramework/StippleDemos)
* [discourse.julialang.org/t/julia-package-for-ui-development/39469](https://discourse.julialang.org/t/julia-package-for-ui-development/39469)
* [GenieFramework/Stipple.jl](https://github.com/GenieFramework/Stipple.jl)
* [towardsdatascience.com/6-julia-frameworks-to-create-desktop-guis-and-web-apps-9ae1a941f115](https://towardsdatascience.com/6-julia-frameworks-to-create-desktop-guis-and-web-apps-9ae1a941f115)
* [discourse.julialang.org/t/julia-for-gui-app/416](https://discourse.julialang.org/t/julia-for-gui-app/416)
* [juliapackages.com/p/tk](https://juliapackages.com/p/tk)
* [juliapackages.com/p/qml](https://juliapackages.com/p/qml)
* [juliapackages.com/p/electron](https://juliapackages.com/p/electron)
* [juliapackages.com/p/blink](https://juliapackages.com/p/blink)
* [analyticsvidhya.com/blog/2020/08/top-4-sentence-embedding-techniques-using-python/](https://www.analyticsvidhya.com/blog/2020/08/top-4-sentence-embedding-techniques-using-python/)
* [openreview.net/forum?id=SyK00v5xx](https://openreview.net/forum?id=SyK00v5xx)
* Language-agnostic BERT Sentence Embedding
* [huggingface.co/setu4993/LaBSE](https://huggingface.co/setu4993/LaBSE)
* [chengchingwen](https://github.com/chengchingwen)
* [nextjournal.com/chengchingwen/gsoc-2020-leveraging-hugging-face-transformers-package-in-julia](https://nextjournal.com/chengchingwen/gsoc-2020-leveraging-hugging-face-transformers-package-in-julia)
* [huggingface.co/setu4993/LaBSE](https://huggingface.co/setu4993/LaBSE)
* [huggingface.co/sentence-transformers/LaBSE](https://huggingface.co/sentence-transformers/LaBSE)
* [paperswithcode.com/paper/language-agnostic-bert-sentence-embedding](https://paperswithcode.com/paper/language-agnostic-bert-sentence-embedding)
* [Language-agnostic BERT Sentence Embedding](https://arxiv.org/abs/2007.01852)
* [Making Monolingual Sentence Embeddings Multilingual using Knowledge Distillation](https://arxiv.org/abs/2004.09813)
* [Sentence Embedding Baseline Paper](https://openreview.net/pdf?id=SyK00v5xx)
* [Learning Word Vectors for 157 Languages](https://arxiv.org/abs/1802.06893)
* [arxiv.org/search/?query=bitext+alignment&searchtype=all&source=header](https://arxiv.org/search/?query=bitext+alignment&searchtype=all&source=header)
* [google.com/search?q=transformers+for+sequence+alignment&ie=UTF-8&oe=UTF-8&hl=it-us&client=safari](https://www.google.com/search?q=transformers+for+sequence+alignment&ie=UTF-8&oe=UTF-8&hl=it-us&client=safari)
* [Making Monolingual Sentence Embeddings Multilingual using Knowledge Distillation](https://aclanthology.org/2020.emnlp-main.365.pdf)
* [youtube subtitles parallel corpus - Поиск в Google](https://www.google.com/search?q=youtube+subtitles+parallel+corpus&rlz=1C5CHFA_enUS800US800&oq=youtube+subtitles+parallel+corpus&aqs=chrome..69i57j69i64.10589j0j4&sourceid=chrome&ie=UTF-8)
* Ideas and notes
* [ ]  use soundex index and make score based on comparison to expected soundex overlap for a correct alignment (given language pair and respective sentence lengths) → do same for n-gram overlap
* [ ]  add error generator (insertion, deletion, even transposition) to training process
* [en.wikipedia.org/wiki/List_of_ISO_639-1_codes](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)
* [Paper on model collapse](https://arxiv.org/abs/2305.17493v2) → reason for strict rule that all alignments in the dataset must be manually checked

    goal: get 200 aligned articles and 10 aligned books, including  together with bible translations

    eventually create a tool for (automatically) translating a tex file into another language

    look into using conTeXt or the Rust-based alternative

    eventually add word alignment
* Gale-Church
* [Paper](https://s3.amazonaws.com/tm-town-nlp-resources/Gale-Church+alignment.pdf)
* [dowobeha/Gale_and_Church_1993](https://github.com/dowobeha/Gale_and_Church_1993)

    ‣ (python)
* [groups.google.com/g/nltk-dev/c/o0AqFbvo46Y?pli=1](https://groups.google.com/g/nltk-dev/c/o0AqFbvo46Y?pli=1) (python)
* [nltk.org/_modules/nltk/align/gale_church.html](https://www.nltk.org/_modules/nltk/align/gale_church.html)
* [nltk.org/_modules/nltk/translate/gale_church.html](https://www.nltk.org/_modules/nltk/translate/gale_church.html)
* [vosmann/galechurch: An implementation of a language-independent parallel text alignment algorithm by Gale & Church](https://github.com/vosmann/galechurch)
* [GCA Alignment Algorithm](https://en.wikipedia.org/wiki/Gale%E2%80%93Church_alignment_algorithm)
* Alignment
    * Survey Papers
* [An Overview of Bitext Alignment Algorithms](https://www.ida.liu.se/~jodfo01/gslt/bitext-alignment-jody.pdf)

    * Other Papers
* [K-vec: A New Approach for Aligning Parallel Texts](https://arxiv.org/pdf/cmp-lg/9407021.pdf)
* [Aligning Parallel Texts: Do Methods Developed for English-French Generalize to Asian Languages?](https://core.ac.uk/download/286946188.pdf)
* [nlp.cs.nyu.edu/bma/](https://nlp.cs.nyu.edu/bma/)
* [Fast-Champollion: A Fast and Robust Sentence Alignment Algorithm](https://aclanthology.org/C10-2081.pdf)

        → [groups.google.com/g/alt.conspiracy.princess-diana/c/rgkd6fPPcM4](https://groups.google.com/g/alt.conspiracy.princess-diana/c/rgkd6fPPcM4)
* Sentence Embeddings
* [sbert.net/](https://www.sbert.net/)
* [Massively Multilingual Sentence Embeddings for Zero-Shot Cross-Lingual Transfer and Beyond](https://arxiv.org/abs/1812.10464)
* [ai.googleblog.com/2020/08/language-agnostic-bert-sentence.html](https://ai.googleblog.com/2020/08/language-agnostic-bert-sentence.html)
* [tfhub.dev/google/collections/LEALLA](https://tfhub.dev/google/collections/LEALLA) → [tfhub.dev/google/LEALLA/LEALLA-small/1](https://tfhub.dev/google/LEALLA/LEALLA-small/1) → convert to pytorch/Flux.jl? → ‣
* [tfhub.dev/google/collections/universal-sentence-encoder](https://tfhub.dev/google/collections/universal-sentence-encoder)

    ‣
* [Making Monolingual Sentence Embeddings Multilingual using Knowledge Distillation](https://arxiv.org/abs/2004.09813)
* [A complete guide to transfer learning from English to other Languages using Sentence Embeddings BERT Models](https://towardsdatascience.com/a-complete-guide-to-transfer-learning-from-english-to-other-languages-using-sentence-embeddings-8c427f8804a9)

    Language-agnostic BERT Sentence Embedding
* Existing Aligners
    * nltk
* [nltk.org/api/nltk.align.html](http://www.nltk.org/api/nltk.align.html)

    * champollion
* [champollion.sourceforge.net/](http://champollion.sourceforge.net/)

        ‣
* [ldc.upenn.edu/sites/www.ldc.upenn.edu/files/lrec2006-champollion-sentence-aligner.pdf](https://www.ldc.upenn.edu/sites/www.ldc.upenn.edu/files/lrec2006-champollion-sentence-aligner.pdf)

    * gma
* [nlp.cs.nyu.edu/GMA/](https://nlp.cs.nyu.edu/GMA/)

    * anymalign
    * yalign
* [pypi.python.org/pypi/yalign](https://pypi.python.org/pypi/yalign)

    * maligna

        A new tool for the bilingual text aligning at the sentence level (2008)

    * tag-aligner (word-alignment)
* [tag-aligner.sourceforge.net/](http://tag-aligner.sourceforge.net/)

    * BleuAlign

        ‣

        MT-based Sentence Alignment for OCR-generated Parallel Texts

    * hunalign
* [mokk.bme.hu/resources/hunalign/](http://mokk.bme.hu/resources/hunalign/)
* [nlp.ilsp.gr/redmine/projects/ilsp-fc/wiki/Sentence_Alignment_Setup/11](http://nlp.ilsp.gr/redmine/projects/ilsp-fc/wiki/Sentence_Alignment_Setup/11)

    * LF Aligner
    * Gale-Church
* [vosmann/galechurch](https://github.com/vosmann/galechurch)

    * alignment-wit-openfst

        ‣

    * text-alignment-tool (Python)
* [pypi.org/project/text-alignment-tool/](https://pypi.org/project/text-alignment-tool/)
    * ‣
    * ‣
    * youalign
* [youalign.com/](http://www.youalign.com/)
* [youalign.com/](http://youalign.com/)
* [youalign.com/AlignDocs.aspx](https://youalign.com/AlignDocs.aspx)

    * bitext2tmx
* [bitext2tmx.sourceforge.net/](http://bitext2tmx.sourceforge.net/)
* [pypi.python.org/pypi/alignment/1.0.9](https://pypi.python.org/pypi/alignment/1.0.9)
* [clab/fast_align](https://github.com/clab/fast_align)
* Dependency Parsing
* [maltparser](https://www.maltparser.org/)
* → parallel-text-finisher
* [neonnaut.github.io/](https://neonnaut.github.io/)    ‣

    for slim docker container: [stackoverflow.com/questions/27428150/linux-how-to-track-all-files-accessed-by-a-process](https://stackoverflow.com/questions/27428150/linux-how-to-track-all-files-accessed-by-a-process)

    parallel vs reledpar etc.
* [ctan.org/topic/parallel](https://www.ctan.org/topic/parallel)

    * reledpar / reledmac
* [connectthefuture/ctan/tree/9a0b7c25144c53bd975bbf381687571915ff6a6c/contrib/reledmac/examples](https://github.com/connectthefuture/ctan/tree/9a0b7c25144c53bd975bbf381687571915ff6a6c/contrib/reledmac/examples)

        ```
        These 3 packages are deprecated :
          * Ledmac is replace by eledmac.
          * Ledpar is replace by eledpar
          * Learab is unmaintened. You should consider using of XeLaTeX instead.

        ```
* [ctan.org/tex-archive/macros/latex/contrib/reledmac](https://ctan.org/tex-archive/macros/latex/contrib/reledmac)

        ‣

        ‣

        → [koppor/LaTeX-fuer-Geisteswissenschaftler/blob/e2daed40dfc85c34e7776ceb7e2ff99405f63418/paralleleTexte.tex#L4](https://github.com/koppor/LaTeX-fuer-Geisteswissenschaftler/blob/e2daed40dfc85c34e7776ceb7e2ff99405f63418/paralleleTexte.tex#L4)

        → [connectthefuture/ctan/blob/9a0b7c25144c53bd975bbf381687571915ff6a6c/contrib/reledmac/examples/3-reledpar_pages_different_languages_lualatex.tex#L4](https://github.com/connectthefuture/ctan/blob/9a0b7c25144c53bd975bbf381687571915ff6a6c/contrib/reledmac/examples/3-reledpar_pages_different_languages_lualatex.tex#L4)

        etc.

        ‣
* [rrthomas/ledmac/blob/13db51ce02c26f05949f040f894f4de759522b06/examples/4-reledpar_inside-outside-columns.tex#L8](https://github.com/rrthomas/ledmac/blob/13db51ce02c26f05949f040f894f4de759522b06/examples/4-reledpar_inside-outside-columns.tex#L8)
* [schlcht/microtype/blob/5ac9212a228c66969a63696d266d9449930b4731/testsuite/output-reledmac_lualatex.tex#L4](https://github.com/schlcht/microtype/blob/5ac9212a228c66969a63696d266d9449930b4731/testsuite/output-reledmac_lualatex.tex#L4)

        ‣

        ‣
* [tla/sr2latex/tree/d47e0b98ae0cbc9216056d6e83e91c8a46c7904e](https://github.com/tla/sr2latex/tree/d47e0b98ae0cbc9216056d6e83e91c8a46c7904e)

        ‣

        → [tla](https://github.com/tla)

        ‣
* [ctan.org/pkg/paracol](https://www.ctan.org/pkg/paracol)
* [maieul/ledmac/tree/c64c334dccfc89a63f1ba8be43cefc9a93c9dfa8/examples](https://github.com/maieul/ledmac/tree/c64c334dccfc89a63f1ba8be43cefc9a93c9dfa8/examples)
* [ilanpillemer/labzik/blob/59e6be5759a9d9b7e2c8b1d0340c6ad5f6e8c38c/labzik.tex#L8](https://github.com/ilanpillemer/labzik/blob/59e6be5759a9d9b7e2c8b1d0340c6ad5f6e8c38c/labzik.tex#L8)
* [ilanpillemer/ylp/blob/cbc799c41588a0ae2165129b5d317516627882e3/ober/order.tex#L6](https://github.com/ilanpillemer/ylp/blob/cbc799c41588a0ae2165129b5d317516627882e3/ober/order.tex#L6)
* [pcast/reader](https://github.com/pcast/reader)
* [tomparys/bilingual-reader](https://github.com/tomparys/bilingual-reader)

    * transread
* [TransRead: Designing a Bilingual Reading Experience with Machine Translation Technologies](https://aclanthology.org/N16-3006.pdf)
* [transread.limsi.fr/resources.html](https://transread.limsi.fr/resources.html)

    * AglonaReader
* [Aglona Reader](https://sites.google.com/site/aglonareader/home/lang-de)

        Aglona, PB
* [BlueD/Aglona-Reader: Aglona Reader for .NET - A program for reading, creating and editing parallel books (books in two languages) in the original ParallelBook format. Home site of the project:](https://github.com/BlueD/Aglona-Reader)
* [Inego/Aglona-Reader: Aglona Reader for .NET - A program for reading, creating and editing parallel books (books in two languages) in the original ParallelBook format. Home site of the project:](https://github.com/Inego/Aglona-Reader)
* [Initial version for Git. · Inego/Aglona-Reader@e7ea4c0](https://github.com/Inego/Aglona-Reader/commit/e7ea4c03bf6e317a7a4666dec2977d043fc91185)
* [Inego/Aglona-Reader](https://github.com/Inego/Aglona-Reader)
* [Inego/Aglona-Reader-Android](https://github.com/Inego/Aglona-Reader-Android)

    * linguisticreader
* [sites.google.com/site/linguisticgym/home/lang-ru](https://sites.google.com/site/linguisticgym/home/lang-ru)
* [sites.google.com/site/linguisticplayer/home/lang-ru](https://sites.google.com/site/linguisticplayer/home/lang-ru)
* [sites.google.com/site/linguisticreader/home/lang-ru](https://sites.google.com/site/linguisticreader/home/lang-ru)
* [sourceforge.net/projects/akerblad/](https://sourceforge.net/projects/akerblad/)
* [BlueD/Aglona-Reader](https://github.com/BlueD/Aglona-Reader)
* [Inego/Aglona-Reader](https://github.com/Inego/Aglona-Reader)
* [Inego/Aglona-Reader/commit/e7ea4c03bf6e317a7a4666dec2977d043fc91185](https://github.com/Inego/Aglona-Reader/commit/e7ea4c03bf6e317a7a4666dec2977d043fc91185)
* [sites.google.com/site/aglonareader/home/lang-de](https://sites.google.com/site/aglonareader/home/lang-de)
* [sites.google.com/site/parabooksmaker/home/lang-ru](https://sites.google.com/site/parabooksmaker/home/lang-ru)
* [bitextor/bitextor: Bitextor generates translation memories from multilingual websites.](https://github.com/bitextor/bitextor)
* [Русский - Linguistic Gym](https://sites.google.com/site/linguisticgym/home/lang-ru)
* [Русский - Linguistic Player](https://sites.google.com/site/linguisticplayer/home/lang-ru)
* [Русский - Linguistic Reader](https://sites.google.com/site/linguisticreader/home/lang-ru)
* [translate · PyPI](https://pypi.org/project/translate/)

    ‣
* Data Sources, Corpora

    → Recursos por idioma
* [OPUS Corpus](https://opus.nlpl.eu/)
        * OPUS OpenSubtitles

        * Tatoeba

    * Global Voices
    * EU
    * UN
    * World Bank
    * IMF
* [childrenslibrary.org/](http://www.childrenslibrary.org/)
    * TED
    * YouTube
        * Khan Academy
        * 3b1b
        * TED subtitles
* [christos-c/bible-corpus](https://github.com/christos-c/bible-corpus)
* [Search · tatoeba · GitHub](https://github.com/search?utf8=%E2%9C%93&q=tatoeba&type=)
* [thejuicemedia - YouTube - YouTube](https://www.youtube.com/channel/UCKRw8GAAtm27q4R3Q0kst_g)
* [Lauris Beinerts - YouTube - YouTube](https://www.youtube.com/channel/UCc70aB6IfdZpR6mlTON1qjg)
* [Lexicom – a workshop in corpus linguistisc and lexicography](https://lexicom.courses/)
* [List of text corpora - Wikipedia](https://en.wikipedia.org/wiki/List_of_text_corpora)
* [Loading a corpus into the Natural Language Toolkit](https://technaverbascripta.wordpress.com/2012/09/25/loading-a-corpus-into-the-natural-language-toolkit/)
* [OpenSubtitles2016: Extracting Large Parallel Corpora from Movie and TV Subtitles](http://home.nr.no/~plison/pdfs/cl/lrec2016.pdf)
* [Multilingual Aligned Corpora From Movie Subtitles](https://hal.archives-ouvertes.fr/file/index/docid/968632/filename/Subtitles_MM-EG.pdf)
* [christos-c.com/bible/](https://christos-c.com/bible/)
* [NLTK Data](http://www.nltk.org/nltk_data/)
* [nltk.corpus.reader.xmldocs — NLTK 3.2.5 documentation](http://www.nltk.org/_modules/nltk/corpus/reader/xmldocs.html)
* [Online monolingual, bilingual and multilingual corpora (mostly with free access)](https://www.translatum.gr/forum/index.php?topic=53574.0)
* [opensubs2016.pdf](http://stp.lingfil.uu.se/~joerg/paper/opensubs2016.pdf)
* [OpenSubtitles2016](http://opus.lingfil.uu.se/OpenSubtitles2016.php)
* [OPUS - an open source parallel corpus](http://opus.nlpl.eu/)
* [Parallel text - Wikiwand](http://www.wikiwand.com/en/Parallel_text)
* [Phrase finder - make corpus](https://www.omniglot.com/language/phrases/phrasefinder.php)
* [nltk.org/api/nltk.corpus.reader.html](http://www.nltk.org/api/nltk.corpus.reader.html)
* [python - load parallel corpora with NLTK and lemmatize english sentences - Stack Overflow](https://stackoverflow.com/questions/27361627/load-parallel-corpora-with-nltk-and-lemmatize-english-sentences)
* [pypi.org/project/python-opensubtitles/](https://pypi.org/project/python-opensubtitles/)
* [cwb.sourceforge.net/documentation.php](http://cwb.sourceforge.net/documentation.php)
* [cwb.sourceforge.net/files/CQP_Tutorial/](http://cwb.sourceforge.net/files/CQP_Tutorial/)
* [I made a python script to download subtitles for your movies... : Python](https://www.reddit.com/r/Python/comments/g10v5z/i_made_a_python_script_to_download_subtitles_for/)
* [agonzalezro/python-opensubtitles](https://github.com/agonzalezro/python-opensubtitles)
* [wit3.fbk.eu/](https://wit3.fbk.eu/)
* [perseus.tufts.edu/hopper/search](http://www.perseus.tufts.edu/hopper/search)
* [en.wiktionary.org/wiki/Appendix:Ancient_Greek_Swadesh_list](https://en.wiktionary.org/wiki/Appendix:Ancient_Greek_Swadesh_list)
* [fr.wikibooks.org/wiki/Cat%C3%A9gorie:Mod%C3%A8les_du_livre_de_grec_ancien](https://fr.wikibooks.org/wiki/Cat%C3%A9gorie:Mod%C3%A8les_du_livre_de_grec_ancien)
* [OpenSubtitles2016: Extracting Large Parallel Corpora from Movie and TV Subtitles](http://www.lrec-conf.org/proceedings/lrec2016/pdf/947_Paper.pdf)
* [joy-xiaojizhang/parse-subtitles-corpus](https://github.com/joy-xiaojizhang/parse-subtitles-corpus)
* Sort
* [nltk.org/_modules/nltk/corpus/reader/xmldocs.html](http://www.nltk.org/_modules/nltk/corpus/reader/xmldocs.html)
* [statmt.org/moses/?n=Moses.LinksToCorpora](http://www.statmt.org/moses/?n=Moses.LinksToCorpora)
* [Conchylicultor/DeepQA/tree/master/data/opensubs](https://github.com/Conchylicultor/DeepQA/tree/master/data/opensubs)
* [emericg/OpenSubtitlesDownload](https://github.com/emericg/OpenSubtitlesDownload)
* [informationsmodellierung.uni-graz.at/de/neuigkeiten/detail/article/online-lectures-program-sentiment-analysis-in-literary-studies-2021/](https://informationsmodellierung.uni-graz.at/de/neuigkeiten/detail/article/online-lectures-program-sentiment-analysis-in-literary-studies-2021/)
* [ipfs.io/ipfs/QmXoypizjW3WknFiJnKLwHCnL72vedxjQkDDP1mXWo6uco/wiki/Parallel_text.html](https://ipfs.io/ipfs/QmXoypizjW3WknFiJnKLwHCnL72vedxjQkDDP1mXWo6uco/wiki/Parallel_text.html)
* [languagefixation.wordpress.com/2011/02/09/how-to-create-parallel-texts-for-language-learning-part-1/](https://languagefixation.wordpress.com/2011/02/09/how-to-create-parallel-texts-for-language-learning-part-1/)
* [languagefixation.wordpress.com/2011/02/23/how-to-create-parallel-texts-for-language-learning-part-2/](https://languagefixation.wordpress.com/2011/02/23/how-to-create-parallel-texts-for-language-learning-part-2/)
* [pypi.python.org/pypi/python-opensubtitles/0.2.dev0](https://pypi.python.org/pypi/python-opensubtitles/0.2.dev0)
* [pypi.python.org/pypi/ss/](https://pypi.python.org/pypi/ss/)
* [terminotix.com/docs/factsheet_alignfactory_en.pdf](https://terminotix.com/docs/factsheet_alignfactory_en.pdf)
* [google.com/search?q=best+languages+for+parallel+text+alignment&ie=UTF-8&oe=UTF-8&hl=it-us&client=safari](https://www.google.com/search?q=best+languages+for+parallel+text+alignment&ie=UTF-8&oe=UTF-8&hl=it-us&client=safari)
* [google.com/search?q=bitext+tool&ie=UTF-8&oe=UTF-8&hl=it-us&client=safari](https://www.google.com/search?q=bitext+tool&ie=UTF-8&oe=UTF-8&hl=it-us&client=safari)
* [google.com/search?q=hunalign+with+python&safe=active&client=safari&hl=it-us&prmd=ivn&ei=kkY7Wu-jHsbOjwPOkK_wCQ&start=10&sa=N&biw=320&bih=529](https://www.google.com/search?q=hunalign+with+python&safe=active&client=safari&hl=it-us&prmd=ivn&ei=kkY7Wu-jHsbOjwPOkK_wCQ&start=10&sa=N&biw=320&bih=529)
* [google.com/search?q=script+to+download+opensubtitles&ie=UTF-8&oe=UTF-8&hl=it-us&client=safari](https://www.google.com/search?q=script+to+download+opensubtitles&ie=UTF-8&oe=UTF-8&hl=it-us&client=safari)
* [google.com/search?safe=active&client=safari&hl=it-us&ei=cM4LWrbYHsnEjwPc3LaoDQ&q=nltk+and+xml&oq=nltk+and+xml&gs_l=mobile-gws-serp.3...67543.72881.0.73215.20.16.1.0.0.0.0.0..0.0....0...1.1.64.mobile-gws-serp..19.1.38.3..35i39k1.196.DuWjKXWR1tQ](https://www.google.com/search?safe=active&client=safari&hl=it-us&ei=cM4LWrbYHsnEjwPc3LaoDQ&q=nltk+and+xml&oq=nltk+and+xml&gs_l=mobile-gws-serp.3...67543.72881.0.73215.20.16.1.0.0.0.0.0..0.0....0...1.1.64.mobile-gws-serp..19.1.38.3..35i39k1.196.DuWjKXWR1tQ)
* [google.com/search?safe=active&client=safari&hl=it-us&ei=hDk7WonVJo3GjwPt6bDQCQ&q=bitext+alignment+tool&oq=bitext+alignment+&gs_l=mobile-gws-serp.1.2.0i22i30k1l5.306512.312175.0.313312.15.15.0.6.6.0.331.2426.0j12j1j1.14.0....0...1c.1.64.mobile-gws-serp..3.12.1150...35i39k1j0i203k1j0i13k1.135.HAcEx-LH2IQ](https://www.google.com/search?safe=active&client=safari&hl=it-us&ei=hDk7WonVJo3GjwPt6bDQCQ&q=bitext+alignment+tool&oq=bitext+alignment+&gs_l=mobile-gws-serp.1.2.0i22i30k1l5.306512.312175.0.313312.15.15.0.6.6.0.331.2426.0j12j1j1.14.0....0...1c.1.64.mobile-gws-serp..3.12.1150...35i39k1j0i203k1j0i13k1.135.HAcEx-LH2IQ)
* [r/programming/comments/1l248j/python_script_that_searches_subtitles_for/](https://www.reddit.com/r/programming/comments/1l248j/python_script_that_searches_subtitles_for/)
* [researchgate.net/profile/Joerg_Tiedemann/publication/264849940_Parallel_Data_Tools_and_Interfaces_in_OPUS/links/54d8f66f0cf2970e4e7a6271.pdf](https://www.researchgate.net/profile/Joerg_Tiedemann/publication/264849940_Parallel_Data_Tools_and_Interfaces_in_OPUS/links/54d8f66f0cf2970e4e7a6271.pdf)

    script to download opensubtitles - Cerca con Google
* [Sentence Alignment](http://www.statmt.org/survey/Topic/SentenceAlignment)

    Versione 11 - Cronologia - Sentence Alignment Setup - Sentence Alignment Setup - ILSP Focused Crawler - ILSP NLP

    string similarity measure for alternative translations

    * **bitext alignment code - Ecosia
* [emk (Eric Kidd)](https://github.com/emk)
* [Evaluation of Alignment Methods for HTML Parallel Text | SpringerLink](https://link.springer.com/chapter/10.1007/11816508_29?no-access=true)
* [booh.com/wp/blog/bilingual-text-2012](http://booh.com/wp/blog/bilingual-text-2012)
* [learnanylanguage.wikia.com/wiki/Listening-Reading_Method](http://learnanylanguage.wikia.com/wiki/Listening-Reading_Method)
* [lexicometrica.univ-paris3.fr/compterendu/compterendu1.pdf](http://lexicometrica.univ-paris3.fr/compterendu/compterendu1.pdf)
* [mi.eng.cam.ac.uk/~wjb31/ppubs/JNLE-REF300-Dec05.pdf](http://mi.eng.cam.ac.uk/~wjb31/ppubs/JNLE-REF300-Dec05.pdf)
* [nlp.cs.nyu.edu/bma/](http://nlp.cs.nyu.edu/bma/)
* [aclweb.org/anthology/N/N16/N16-3006.pdf](http://www.aclweb.org/anthology/N/N16/N16-3006.pdf)
* [bilingualtext.com/the-one-who-takes-a-nightmare-trip-bilingual-text-english-french.html](http://www.bilingualtext.com/the-one-who-takes-a-nightmare-trip-bilingual-text-english-french.html)
* [cis.drexel.edu/faculty/thu/research-papers/dawak-547.pdf](http://www.cis.drexel.edu/faculty/thu/research-papers/dawak-547.pdf)
* [dlsi.ua.es/~mlf/docum/sanchezvillamil06p.pdf](http://www.dlsi.ua.es/~mlf/docum/sanchezvillamil06p.pdf)
* [lancaster.ac.uk/fass/projects/corpus/UCCTS2008Proceedings/papers/Gerdes.pdf](http://www.lancaster.ac.uk/fass/projects/corpus/UCCTS2008Proceedings/papers/Gerdes.pdf)
* [mt-archive.info/ACL-1996-Haruno.pdf](http://www.mt-archive.info/ACL-1996-Haruno.pdf)
* [statmt.org/](http://www.statmt.org/)
* [statmt.org/europarl/](http://www.statmt.org/europarl/)
* [statmt.org/moses/](http://www.statmt.org/moses/)
* [supernova-soft.com/c5/index.php/french/products/text_aligner/](http://www.supernova-soft.com/c5/index.php/french/products/text_aligner/)
* [yalign.readthedocs.io/en/latest/](http://yalign.readthedocs.io/en/latest/)
* [anymalign.limsi.fr/](https://anymalign.limsi.fr/)
* [anymalign.limsi.fr/#start](https://anymalign.limsi.fr/#start)
* [arxiv.org/ftp/arxiv/papers/1509/1509.09093.pdf](https://arxiv.org/ftp/arxiv/papers/1509/1509.09093.pdf)
* [bitbucket.org/tiedemann/subalign/src](https://bitbucket.org/tiedemann/subalign/src)
* [fr.scribd.com/document/213266691/Alignment-of-the-Polish-English-Parallel-Text-for-a-Statistical-Machine-Translation](https://fr.scribd.com/document/213266691/Alignment-of-the-Polish-English-Parallel-Text-for-a-Statistical-Machine-Translation)
* [gist.github.com/emk/a68c16bc1a8cd4840a5a](https://gist.github.com/emk/a68c16bc1a8cd4840a5a)
* [angelodel80/CophiAlignment](https://github.com/angelodel80/CophiAlignment)
* [godlygeek/tabular](https://github.com/godlygeek/tabular)
* [gumblex/Bleualign](https://github.com/gumblex/Bleualign)
* [inikdom/opensubtitles-parser/blob/master/setup.sh](https://github.com/inikdom/opensubtitles-parser/blob/master/setup.sh)
* [ldmt-muri/alignment-with-openfst](https://github.com/ldmt-muri/alignment-with-openfst)
* [loomchild/maligna](https://github.com/loomchild/maligna)
* [markuskiller/textblob-sent-align](https://github.com/markuskiller/textblob-sent-align)
* [mebubo/paragraph-align](https://github.com/mebubo/paragraph-align)
* [pcast](https://github.com/pcast)
* [pcast/hocr-tools](https://github.com/pcast/hocr-tools)
* [groups.google.com/forum/#!topic/alt.conspiracy.princess-diana/rgkd6fPPcM4](https://groups.google.com/forum/#!topic/alt.conspiracy.princess-diana/rgkd6fPPcM4)
* [link.springer.com/chapter/10.1007/11816508_29?no-access=true](https://link.springer.com/chapter/10.1007/11816508_29?no-access=true)
* [link.springer.com/chapter/10.1007/3-540-49653-X_15](https://link.springer.com/chapter/10.1007/3-540-49653-X_15)
* [link.springer.com/content/pdf/10.1007%2F3-540-49653-X.pdf](https://link.springer.com/content/pdf/10.1007%2F3-540-49653-X.pdf)
* [parallel-text-aligner.en.softonic.com/](https://parallel-text-aligner.en.softonic.com/)
* [secure.avangate.com/order/checkout.php?PRODS=4572175&QTY=1](https://secure.avangate.com/order/checkout.php?PRODS=4572175&QTY=1)
* [sourceforge.net/projects/aligner/](https://sourceforge.net/projects/aligner/)
* [sourceforge.net/projects/aligner/?source=typ_redirect](https://sourceforge.net/projects/aligner/?source=typ_redirect)
* [sourceforge.net/projects/champollion/?source=typ_redirect](https://sourceforge.net/projects/champollion/?source=typ_redirect)
* [terminotix.com/?lang=en](https://terminotix.com/?lang=en)
* [terminotix.com/index.asp?name=AlignFactory&content=item&brand=1&item=4&lang=en](https://terminotix.com/index.asp?name=AlignFactory&content=item&brand=1&item=4&lang=en)
* [transread.limsi.fr/deliverables.html](https://transread.limsi.fr/deliverables.html)
* [transread.limsi.fr/resources.html](https://transread.limsi.fr/resources.html)
* [wenku.baidu.com/view/5ecc18b7d4d8d15abf234e03.html](https://wenku.baidu.com/view/5ecc18b7d4d8d15abf234e03.html)
* [amazon.fr/Bitext-Alignment-J%C3%B6rg-Tiedemann/dp/1608455106](https://www.amazon.fr/Bitext-Alignment-J%C3%B6rg-Tiedemann/dp/1608455106)
* [ecosia.org/search?q=bitext+alignment&addon=chrome&addonversion=2.0.3](https://www.ecosia.org/search?q=bitext+alignment&addon=chrome&addonversion=2.0.3)
* [ecosia.org/search?q=bitext+alignment+code&addon=chrome&addonversion=2.0.3](https://www.ecosia.org/search?q=bitext+alignment+code&addon=chrome&addonversion=2.0.3)
* [facebook.com/ParallelBooks](https://www.facebook.com/ParallelBooks)
* [gelbukh.com/CV/Publications/2006/CIARP-2006-Alignment.pdf](https://www.gelbukh.com/CV/Publications/2006/CIARP-2006-Alignment.pdf)
* [ldc.upenn.edu/sites/www.ldc.upenn.edu/files/lrec2008-creating-sentence-aligned-parallel-text.pdf](https://www.ldc.upenn.edu/sites/www.ldc.upenn.edu/files/lrec2008-creating-sentence-aligned-parallel-text.pdf)
* [proz.com/forum/cat_tools_technical_help/280415-abbyy_aligner.html](https://www.proz.com/forum/cat_tools_technical_help/280415-abbyy_aligner.html)
* [video](https://www.youtube.com/watch?v=0Tvw9XNcgB0)
* [Nova Text Aligner - Download](https://parallel-text-aligner.en.softonic.com/)
* [Tiedemann](https://bitbucket.org/tiedemann/lingua-align/src/master/lib/Lingua/Align/)
* [tiedemann — Bitbucket](https://bitbucket.org/tiedemann/)
* [Yalign — Yalign 0.1.1 documentation](http://yalign.readthedocs.io/en/latest/)
* [Global Wordnets ](http://globalwordnet.org/wordnets-in-the-world/)
* [ethicadb.org/index.php?p=&lanid=8&lg=fr&ftop=200px](http://www.ethicadb.org/index.php?p=&lanid=8&lg=fr&ftop=200px)
* [ted2srt.org/#/](https://ted2srt.org/#/)
* [CTK](http://champollion.sourceforge.net/)
* [Champollion Tool Kit download | SourceForge.net](https://sourceforge.net/projects/champollion/?source=typ_redirect)
* [Champollion: A Robust Parallel Text Sentence Aligner](https://www.ldc.upenn.edu/sites/www.ldc.upenn.edu/files/lrec2006-champollion-sentence-aligner.pdf)

    * TransRead
* [GitHub - ldmt-muri/alignment-with-openfst](https://github.com/ldmt-muri/alignment-with-openfst)
* [GitHub - PhilippeFerreiraDeSousa/bitext-matching: Mise en correspondance de bitextes dans des langues différentes](https://github.com/PhilippeFerreiraDeSousa/bitext-matching/)
* [transread.limsi.fr/Resources/AlibiAlignments/README_EN.txt](https://transread.limsi.fr/Resources/AlibiAlignments/README_EN.txt)
* [transread.limsi.fr/Resources/AlibiAlignments/](https://transread.limsi.fr/Resources/AlibiAlignments/)

    Parallel - Language Learning
* [lltk](https://github.com/lltk)
* [incremental reader - perfect for memorizzation](http://www.charlieslanguagepage.com/incrementalreader.htm)
* [Language Learning Toolkit](https://github.com/lltk)
* [tkrajina/10000sentences: 10,000 sentences: an Android app to help you learn new words in foreign languages](https://github.com/tkrajina/10000sentences)
* [lwt.sourceforge.net/](http://lwt.sourceforge.net/)
* [Bilingual translations in two columns : LaTeX](https://www.reddit.com/r/LaTeX/comments/44p1h6/bilingual_translations_in_two_columns/)
* [Parallel bilingual text](http://latex.org/forum/viewtopic.php?f=47&t=11980)
* [Newest 'parallel' Questions - TeX - LaTeX Stack Exchange](https://tex.stackexchange.com/questions/tagged/parallel)
* [xetex - Syncing text on bilingual pages - TeX - LaTeX Stack Exchange](https://tex.stackexchange.com/questions/86366/syncing-text-on-bilingual-pages)
* [latex.org/forum/viewtopic.php?f=47&t=11980](http://latex.org/forum/viewtopic.php?f=47&t=11980)
* [stackoverflow.com/questions/2907327/dual-line-bilingual-paragraph-in-latex](https://stackoverflow.com/questions/2907327/dual-line-bilingual-paragraph-in-latex)
* [r/LaTeX/comments/44p1h6/bilingual_translations_in_two_columns/](https://www.reddit.com/r/LaTeX/comments/44p1h6/bilingual_translations_in_two_columns/)

    * **translation - Dual-line bilingual paragraph in LaTeX - Stack Overflow
* [CTAN: Paket parallel](https://ctan.org/pkg/parallel)
* [ctan.org/pkg/parallel](https://ctan.org/pkg/parallel)

    Bitext Alignment - Teidemann (Drive)
* [Aligning Parallel Texts_百度文库](https://wenku.baidu.com/view/5ecc18b7d4d8d15abf234e03.html)
* [Book Chapter on OPUS](https://books.google.com/books?hl=es&lr=&id=xUWRy8OUGZsC&oi=fnd&pg=PA237&dq=Open+Subtitles+Corpus&ots=47ioDq1gOX&sig=M1Zb5gdXLKP481z1G6QQoJBHTTo#v=onepage&q=Open%20Subtitles%20Corpus&f=false)
* [Parallel Text Processing: Alignment and Use of Translation Corpora](http://library.lol/main/CB77F7882995430689CC21F5F9EFBEA9)
* [Alignment of the Polish-English Parallel Text for a Statistical Machine Translation | String (Computer Science) | Translations](https://fr.scribd.com/document/213266691/Alignment-of-the-Polish-English-Parallel-Text-for-a-Statistical-Machine-Translation)
* [Iterative, MT-based Sentence Alignment of Parallel Texts](https://www.aclweb.org/anthology/W11-4624.pdf)
* [Parallel Text Alignment | SpringerLink](https://link.springer.com/chapter/10.1007/3-540-49653-X_15)
* [cr_Véronis.doc.pdf](http://lexicometrica.univ-paris3.fr/compterendu/compterendu1.pdf)
* [High-Performance Bilingual Text Alignment Using Statistical and Dictionary Information](http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.14.9667)
* [Segmentation and alignment of parallel text for statistical machine translation](http://mi.eng.cam.ac.uk/~wjb31/ppubs/JNLE-REF300-Dec05.pdf)
* [Microsoft Word - CIARP-2006.doc](https://www.gelbukh.com/CV/Publications/2006/CIARP-2006-Alignment.pdf)
* [Di: sentence-aligned bilingual texts - Grupos de Google](https://groups.google.com/forum/#!topic/alt.conspiracy.princess-diana/rgkd6fPPcM4)
* [cltk.org/](http://cltk.org/)
* [corpus.quran.com/lemmas.jsp](http://corpus.quran.com/lemmas.jsp)
* [dcc.dickinson.edu/greek-core-list](http://dcc.dickinson.edu/greek-core-list)
* [dcc.dickinson.edu/latin-vocabulary-list](http://dcc.dickinson.edu/latin-vocabulary-list)
* [docs.cltk.org/en/latest/](http://docs.cltk.org/en/latest/)
* [perseus.uchicago.edu/](http://perseus.uchicago.edu/)
* [quran.ilmsummit.org/projects/quran/QWF.aspx](http://quran.ilmsummit.org/projects/quran/QWF.aspx)
* [sosol.perseids.org/sosol/signin](http://sosol.perseids.org/sosol/signin)
* [thelibrarybasement.com/2013/03/13/a-categorized-tagged-greek-new-testament-corpus/](http://thelibrarybasement.com/2013/03/13/a-categorized-tagged-greek-new-testament-corpus/)
* [academia.edu/20844659/Ancient_Greek_WordNet_Meets_the_Dynamic_Lexicon_the_Example_of_the_Fragments_of_the_Greek_Historians](http://www.academia.edu/20844659/Ancient_Greek_WordNet_Meets_the_Dynamic_Lexicon_the_Example_of_the_Fragments_of_the_Greek_Historians)
* [charlieslanguagepage.com/](http://www.charlieslanguagepage.com/)
* [charlieslanguagepage.com/CWslanguagepage/briefguidetogreek/verb%20conspectus.htm](http://www.charlieslanguagepage.com/CWslanguagepage/briefguidetogreek/verb%20conspectus.htm)
* [charlieslanguagepage.com/CWslanguagepage/OCRmaterials.htm](http://www.charlieslanguagepage.com/CWslanguagepage/OCRmaterials.htm)
* [dh.uni-leipzig.de/wo/projects/ancient-greek-and-latin-dependency-treebank-2-0/](http://www.dh.uni-leipzig.de/wo/projects/ancient-greek-and-latin-dependency-treebank-2-0/)
* [dh.uni-leipzig.de/wo/projects/open-greek-and-latin-project/](http://www.dh.uni-leipzig.de/wo/projects/open-greek-and-latin-project/)
* [digitalclassicist.org/](http://www.digitalclassicist.org/)
* [lexilogos.com/english/greek_ancient_dictionary.htm](http://www.lexilogos.com/english/greek_ancient_dictionary.htm)
* [cltk/cltk](https://github.com/cltk/cltk)
* [janabeck/PPCHiG](https://github.com/janabeck/PPCHiG)
* [machinalis/yalign](https://github.com/machinalis/yalign)
* [shamsuzzamansadi/quranic-corpus](https://github.com/shamsuzzamansadi/quranic-corpus)
* [perseusdl.github.io/treebank_data/](https://perseusdl.github.io/treebank_data/)
* [proiel.github.io/](https://proiel.github.io/)
* [stephanus.tlg.uci.edu/index/databases.html](https://stephanus.tlg.uci.edu/index/databases.html)
* [stephanus.tlg.uci.edu/Iris/reg.jsp](https://stephanus.tlg.uci.edu/Iris/reg.jsp)
* [wiki.digitalclassicist.org/Greek_and_Latin_texts_in_digital_form#Texts_with_translations](https://wiki.digitalclassicist.org/Greek_and_Latin_texts_in_digital_form#Texts_with_translations)
* [lib.uchicago.edu/efts/Woodhouse/](https://www.lib.uchicago.edu/efts/Woodhouse/)
* [researchgate.net/post/What_is_the_best_way_to_do_corpus_linguistics_on_Hellenistic_Greek](https://www.researchgate.net/post/What_is_the_best_way_to_do_corpus_linguistics_on_Hellenistic_Greek)
* [transread.limsi.fr/Resources/SentenceAlignmentConfidenceAnnotation/README](https://transread.limsi.fr/Resources/SentenceAlignmentConfidenceAnnotation/README)
* [mackichan.com/index.html?techtalk/646.htm~mainFrame](https://www.mackichan.com/index.html?techtalk/646.htm~mainFrame)
* [ted.com/talks/philip_zimbardo_on_the_psychology_of_evil/transcript?language=fr#t-525821](https://www.ted.com/talks/philip_zimbardo_on_the_psychology_of_evil/transcript?language=fr#t-525821)
* [Juxtalinéaires : éditions scolaires d'auteurs grecs et latins](http://juxtas.pagesperso-orange.fr/)
* [Latin juxtalinéaire - Traductions d'auteurs latins en mot à mot: juxtalinéaire](http://latinjuxtalineaire.over-blog.com/)
* [Learn languages in context --> look at html structure](http://www.bilingualtext.com/the-one-who-takes-a-nightmare-trip-bilingual-text-english-french.html)
* [LF Aligner download | SourceForge.net](https://sourceforge.net/projects/aligner/?source=typ_redirect)
* [Listening-Reading Method | Learn Any Language | FANDOM powered by Wikia](http://learnanylanguage.wikia.com/wiki/Listening-Reading_Method)
* [lrec-2008-parallel.dvi](https://www.ldc.upenn.edu/sites/www.ldc.upenn.edu/files/lrec2008-creating-sentence-aligned-parallel-text.pdf)
* [MacKichan Software - The Home of Scientific WorkPlace, Scientific Word, and Scientific Notebook](https://www.mackichan.com/index.html?techtalk/646.htm~mainFrame)
* [tex.stackexchange.com/questions/86366/syncing-text-on-bilingual-pages](https://tex.stackexchange.com/questions/86366/syncing-text-on-bilingual-pages)
* [tex.stackexchange.com/questions/tagged/parallel](https://tex.stackexchange.com/questions/tagged/parallel)
* [godlygeek/tabular: Vim script for text filtering and alignment](https://github.com/godlygeek/tabular)
* [alpage.inria.fr/~sagot/](http://alpage.inria.fr/~sagot/)
* [globalwordnet.org/arabic-wordnet/awn-browser/](http://globalwordnet.org/arabic-wordnet/awn-browser/)
* [homepages.inf.ed.ac.uk/adubey/software/wnbrowser/index.html](http://homepages.inf.ed.ac.uk/adubey/software/wnbrowser/index.html)
* [masterrussian.net/f49/new-russian-english-books-parallelbook-format-20375/](http://masterrussian.net/f49/new-russian-english-books-parallelbook-format-20375/)
* [MT-based sentence alignment for OCR-generated parallel texts](http://mt-archive.info/AMTA-2010-Sennrich.pdf)
* [WCIST_ALIGNER_CR](https://arxiv.org/pdf/1509.09093.pdf)
* [Wang Pidong's Homepage: sentence-level alignment tools for statistical machine translation](http://wangpidong.blogspot.com/2012/05/sentence-level-alignment-tools-for.html)
* [offline python translation - Поиск в Google](https://www.google.com/search?q=offline+python+translation&rlz=1C5CHFA_enUS800US800&oq=offline+python+translation&aqs=chrome..69i57j0l2.7491j0j4&sourceid=chrome&ie=UTF-8)
* [babylonhealth/fastText_multilingual: Multilingual word vectors in 78 languages](https://github.com/babylonhealth/fastText_multilingual)
* [Parallel Books - Home](https://www.facebook.com/ParallelBooks)
* [Parallel text creator, text alignment software](http://www.supernova-soft.com/c5/index.php/french/products/text_aligner/)
* [Poverty driven bilingual alignment](http://www.lancaster.ac.uk/fass/projects/corpus/UCCTS2008Proceedings/papers/Gerdes.pdf)
* [rsennrich/Bleualign: Machine-Translation-based sentence alignment tool for parallel text](https://github.com/rsennrich/Bleualign)
* [sanchezvillamil06p.pdf](http://www.dlsi.ua.es/~mlf/docum/sanchezvillamil06p.pdf)
* [Statistical Machine Translation](http://www.statmt.org/)
* [Terminotix - Home](https://terminotix.com/?lang=en)
* [tomparys/bilingual-reader: Bilingual Reader for Android](https://github.com/tomparys/bilingual-reader)
* [TransRead](https://transread.limsi.fr/resources.html)
* [TransRead: Designing a Bilingual Reading Experience with Machine Translation Technologies](http://www.aclweb.org/anthology/N/N16/N16-3006.pdf)
* [WCIST_ALIGNER_CR](https://arxiv.org/ftp/arxiv/papers/1509/1509.09093.pdf)
* [ida.liu.se/~jodfo01/gslt/bitext-alignment-jody.pdf](http://www.ida.liu.se/~jodfo01/gslt/bitext-alignment-jody.pdf)
* [sketchengine.co.uk/user-guide/user-manual/corpora/setting-up-parallel-corpora/](https://www.sketchengine.co.uk/user-guide/user-manual/corpora/setting-up-parallel-corpora/)
* [[Corpora-List] Arabic Corpus work in Python](https://mailman.uib.no/public/corpora/2009-October/009362.html)

    * ** Multilingual Bible Parallel Corpus
    *  MTTK - Machine Translation Toolkit
    *  OpenSubtitles2018
    *  tatoeba to anki - Ecosia
    *  The IMS Open Corpus Workbench
    * **De Deo (Peña - es) | Ethicadb.org
    * **Download sentences - Tatoeba
    * **Sketch Engine | language corpus management and query system
    * download*opensubtitles-parser/setup.sh at master · inikdom/opensubtitles-parser · GitHub
* [/c/1997c/tops/dvips](http://www.mitpressjournals.org/doi/pdf/10.1162/089120103322711578)
* [A massively parallel corpus: the Bible in 100 languages](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4551210/)
* [Add a corpus to the NLTK corpus and importing it : Python](https://www.reddit.com/r/Python/comments/5ctedp/add_a_corpus_to_the_nltk_corpus_and_importing_it/)
* [Add-on:OpenSubtitles.org - Official Kodi Wiki](http://kodi.wiki/view/Add-on:OpenSubtitles.org)
* [Bible Corpus](http://www.lrec-conf.org/proceedings/lrec2014/pdf/220_Paper.pdf)
* [BYU corpora: billions of words of data: free online access](https://corpus.byu.edu/corpora.asp)
* [ccat.sas.upenn.edu/plc/kiswahili/video/reading/index.html](http://ccat.sas.upenn.edu/plc/kiswahili/video/reading/index.html)
* [Corpora 1.0 : Python Package Index](https://pypi.python.org/pypi/Corpora/1.0)
* [De Deo (Latin) | Ethicadb.org](http://www.ethicadb.org/pars.php?parid=1&lanid=0&lg=fr&ftop=82px)
* [Europarl Parallel Corpus](http://www.statmt.org/europarl/)
* [GitHub - AlJohri/OpenSubtitles: A series of scripts to download and parse the OpenSubtitles corpus.](https://github.com/AlJohri/OpenSubtitles)
* [GitHub - byroot/pysrt: Python parser for SubRip (srt) files](https://github.com/byroot/pysrt)
* [GitHub - christos-c/bible-corpus: A multilingual parallel corpus created from translations of the Bible.](https://github.com/christos-c/bible-corpus)
* [GitHub - inikdom/opensubtitles-parser: download, extract, parse and tokenize the opensubtitles dataset with this script](https://github.com/inikdom/opensubtitles-parser)
* [GitHub - rupss/open-subtitles-scraper](https://github.com/rupss/open-subtitles-scraper)
* [Glosbe API](https://fr.glosbe.com/a-api)
* [ccat.sas.upenn.edu/plc/kiswahili/video/reading/index.html](http://ccat.sas.upenn.edu/plc/kiswahili/video/reading/index.html)
* [christos-c.com/bible/](http://christos-c.com/bible/)
* [cwb.sourceforge.net/download.php](http://cwb.sourceforge.net/download.php)
* [homepages.inf.ed.ac.uk/s0787820/bible/](http://homepages.inf.ed.ac.uk/s0787820/bible/)
* [opus.lingfil.uu.se/OpenSubtitles2016.php](http://opus.lingfil.uu.se/OpenSubtitles2016.php)
* [stp.lingfil.uu.se/~joerg/paper/opensubs2016.pdf](http://stp.lingfil.uu.se/~joerg/paper/opensubs2016.pdf)
* [wolk.pl/tool-for-parallel-corpora-filtering-and-aligning/](http://wolk.pl/tool-for-parallel-corpora-filtering-and-aligning/)
* [ethicadb.org/pars.php?parid=1&lanid=0&lg=fr&ftop=82px](http://www.ethicadb.org/pars.php?parid=1&lanid=0&lg=fr&ftop=82px)
* [ethicadb.org/pars.php?parid=1&lanid=8&lg=fr](http://www.ethicadb.org/pars.php?parid=1&lanid=8&lg=fr)
* [lrec-conf.org/proceedings/lrec2014/pdf/220_Paper.pdf](http://www.lrec-conf.org/proceedings/lrec2014/pdf/220_Paper.pdf)
* [mitpressjournals.org/doi/pdf/10.1162/089120103322711578](http://www.mitpressjournals.org/doi/pdf/10.1162/089120103322711578)
* [nltk.org/_modules/nltk/corpus/reader/xmldocs.html](http://www.nltk.org/_modules/nltk/corpus/reader/xmldocs.html)
* [wikidoc.org/index.php/Text_corpus](http://www.wikidoc.org/index.php/Text_corpus)
* [wikiwand.com/en/Parallel_text](http://www.wikiwand.com/en/Parallel_text)
* [corpus.byu.edu/corpora.asp](https://corpus.byu.edu/corpora.asp)
* [en.wikipedia.org/wiki/List_of_text_corpora](https://en.wikipedia.org/wiki/List_of_text_corpora)
* [forum.language-learners.org/viewtopic.php?t=2013](https://forum.language-learners.org/viewtopic.php?t=2013)
* [fr.glosbe.com/a-api](https://fr.glosbe.com/a-api)
* [AlJohri/OpenSubtitles](https://github.com/AlJohri/OpenSubtitles)
* [emericg/OpenSubtitlesDownload](https://github.com/emericg/OpenSubtitlesDownload)
* [search?utf8=%E2%9C%93&q=tatoeba&type=](https://github.com/search?utf8=%E2%9C%93&q=tatoeba&type=)
* [hal.archives-ouvertes.fr/file/index/docid/968632/filename/Subtitles_MM-EG.pdf](https://hal.archives-ouvertes.fr/file/index/docid/968632/filename/Subtitles_MM-EG.pdf)
* [lexicom.courses/](https://lexicom.courses/)
* [mailman.uib.no/public/corpora/2009-October/009362.html](https://mailman.uib.no/public/corpora/2009-October/009362.html)
* [stackoverflow.com/questions/27361627/load-parallel-corpora-with-nltk-and-lemmatize-english-sentences](https://stackoverflow.com/questions/27361627/load-parallel-corpora-with-nltk-and-lemmatize-english-sentences)
* [tatoeba.org/eng/downloads](https://tatoeba.org/eng/downloads)
* [technaverbascripta.wordpress.com/2012/09/25/loading-a-corpus-into-the-natural-language-toolkit/](https://technaverbascripta.wordpress.com/2012/09/25/loading-a-corpus-into-the-natural-language-toolkit/)
* [ecosia.org/search?q=tatoeba+to+anki&addon=chrome&addonversion=2.0.3](https://www.ecosia.org/search?q=tatoeba+to+anki&addon=chrome&addonversion=2.0.3)
* [ncbi.nlm.nih.gov/pmc/articles/PMC4551210/](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4551210/)
* [omniglot.com/language/phrases/phrasefinder.php](https://www.omniglot.com/language/phrases/phrasefinder.php)
* [r/Python/comments/5ctedp/add_a_corpus_to_the_nltk_corpus_and_importing_it/](https://www.reddit.com/r/Python/comments/5ctedp/add_a_corpus_to_the_nltk_corpus_and_importing_it/)
* [sketchengine.co.uk/](https://www.sketchengine.co.uk/)
* [translatum.gr/forum/index.php?topic=53574.0](https://www.translatum.gr/forum/index.php?topic=53574.0)
* [video](https://www.youtube.com/channel/UCc70aB6IfdZpR6mlTON1qjg)
* [video](https://www.youtube.com/channel/UCKRw8GAAtm27q4R3Q0kst_g)
* [Resource Report: Building Parallel Text Corpora for Multi-Domain Translation System](https://www.researchgate.net/profile/Riza_Hammam/publication/228848307_Resource_Report_Building_Parallel_Text_Corpora_for_Multi-Domain_Translation_System/links/54fadd950cf2040df21d2f86/Resource-Report-Building-Parallel-Text-Corpora-for-Multi-Domain-Translation-System.pdf)
* [Text corpus - wikidoc](http://www.wikidoc.org/index.php/Text_corpus)

    The list contains a variety of resources for natural language processing and linguistic research. Some notable resources include the Corpus of Quranic Arabic, the Classical Greek Core Vocabulary List, and the Perseus Digital Library. Additionally, there are several sentence alignment tools listed, including hunalign and LF Aligner, that may be useful for parallel corpus creation.
* [Sampling-based Multilingual Alignment](https://aclanthology.org/R09-1040.pdf)
* [Tool for parallel corpora filtering and aligning | Krzysztof Wołk - Specjalista IT](http://wolk.pl/tool-for-parallel-corpora-filtering-and-aligning/)
* [TranslationParty - Find the equilibrium](http://www.translationparty.com/)
* [Using Global Voices.org to make simple parallel texts - A language learners’ forum](https://forum.language-learners.org/viewtopic.php?t=2013)
* [WIT3 - Web Inventory of Transcribed and Translated Talks](https://wit3.fbk.eu/)
* [angelodel80/CophiAlignment: Basic Aligner for parallel texts](https://github.com/angelodel80/CophiAlignment)
* [Anymalign](https://anymalign.limsi.fr/)
* [alignment 1.0.9 : Python Package Index](https://pypi.python.org/pypi/alignment/1.0.9)
* [ABBYY Aligner (CAT Tools Technical Help)](https://www.proz.com/forum/cat_tools_technical_help/280415-abbyy_aligner.html)
* [sourceforge.net/projects/aligner/](https://sourceforge.net/projects/aligner/)

    *  tiedemann / subalign / source / — Bitbucket
* [Bitext Maps and Alignment](http://nlp.cs.nyu.edu/bma/)
* [bitext-matching/README.md at master · PhilippeFerreiraDeSousa/bitext-matching · GitHub](https://github.com/PhilippeFerreiraDeSousa/bitext-matching/blob/master/lib/README.md)
* [Convert CSV files to PBO parallel bilingual books](https://gist.github.com/emk/a68c16bc1a8cd4840a5a)

    * **rsennrich/Bleualign: Machine-Translation-based sentence alignment tool for parallel text
* [rsennrich/Bleualign: Machine-Translation-based sentence alignment tool for parallel text](https://github.com/rsennrich/Bleualign)
* [Vocabulary · PyPI](https://pypi.org/project/Vocabulary/)
* [markuskiller/textblob-sent-align: ``TextBlob`` model extension: sentence alignment for parallel TextBlobs](https://github.com/markuskiller/textblob-sent-align)
* [tagaligner: an aligner for parallel text](http://tag-aligner.sourceforge.net/)
* [Terminotix - AlignFactory](https://terminotix.com/index.asp?name=AlignFactory&content=item&brand=1&item=4&lang=en)
* [Moses - Main/HomePage](http://www.statmt.org/moses/)
* [nltk.align package — NLTK 3.0 documentation](http://www.nltk.org/api/nltk.align.html)
* [nltk.corpus.reader package — NLTK 3.2.5 documentation](http://www.nltk.org/api/nltk.corpus.reader.html)
* [pcast (Paul Castronova)](https://github.com/pcast)
* [pcast/hocr-tools: Tools for manipulating and evaluating the hOCR format for representing multi-lingual OCR results by embedding them into HTML.](https://github.com/pcast/hocr-tools)
* [pcast/reader: Proof of concept for displaying parallel texts with phrase alignment.](https://github.com/pcast/reader)
* [yalign 0.1.1 : Python Package Index](https://pypi.python.org/pypi/yalign)

    * **gumblex/Bleualign: Machine-Translation-based sentence alignment tool for parallel text
* [Creating Bilingual Texts with AlSim Parallel Texts Reader - YouTube](https://www.youtube.com/watch?v=0Tvw9XNcgB0)
* [sites.google.com/view/alsim](https://sites.google.com/view/alsim)
* [bitbucket.org/tiedemann/lingua-align/wiki/Home](https://bitbucket.org/tiedemann/lingua-align/wiki/Home)
* [nltk.org/howto/wordnet.html](http://www.nltk.org/howto/wordnet.html)
* [ENPC-Aligner · PyPI](https://pypi.org/project/ENPC-Aligner/1.0.4/)
* [loomchild/maligna: Bilingual sengence aligner](https://github.com/loomchild/maligna)
* [mebubo/paragraph-align: Naive alignment of paragraphs in bilingual texts](https://github.com/mebubo/paragraph-align)

    * *?Crear subtítulos dobles para películas en Foreign Languages Online
    *  emk/substudy: Use SRT subtitle files to study foreign languages (in progress)
    *  substudy: A tool for learning languages using TV shows and subtitles | Random Hacks
    * **Extracting and analyzing subtitles - Lupyan Lab
* [hochulshin.com/python-subtitle-cleaningup/](http://hochulshin.com/python-subtitle-cleaningup/)
* [kodi.wiki/view/Add-on:OpenSubtitles.org](http://kodi.wiki/view/Add-on:OpenSubtitles.org)
* [opus.nlpl.eu/](http://opus.nlpl.eu/)
* [opus.nlpl.eu/OpenSubtitles2018.php](http://opus.nlpl.eu/OpenSubtitles2018.php)
* [video.google.com/timedtext?lang=en&v=aircAruvnKk](http://video.google.com/timedtext?lang=en&v=aircAruvnKk)
* [video.google.com/timedtext?lang=es&v=NI9TLDIPVcs](http://video.google.com/timedtext?lang=es&v=NI9TLDIPVcs)
* [randomhacks.net/substudy/](http://www.randomhacks.net/substudy/)
* [bitbucket.org/tiedemann/](https://bitbucket.org/tiedemann/)
* [easypronunciation.com/es/merge-two-subtitle-files-online](https://easypronunciation.com/es/merge-two-subtitle-files-online)
* [byroot/pysrt](https://github.com/byroot/pysrt)
* [emk](https://github.com/emk)
* [emk/substudy](https://github.com/emk/substudy)
* [researchgate.net/profile/Riza_Hammam/publication/228848307_Resource_Report_Building_Parallel_Text_Corpora_for_Multi-Domain_Translation_System/links/54fadd950cf2040df21d2f86/Resource-Report-Building-Parallel-Text-Corpora-for-Multi-Domain-Translation-System.pdf](https://www.researchgate.net/profile/Riza_Hammam/publication/228848307_Resource_Report_Building_Parallel_Text_Corpora_for_Multi-Domain_Translation_System/links/54fadd950cf2040df21d2f86/Resource-Report-Building-Parallel-Text-Corpora-for-Multi-Domain-Translation-System.pdf)
* [webucator.com/blog/2017/04/simple-python-script-extracting-text-srt-file/](https://www.webucator.com/blog/2017/04/simple-python-script-extracting-text-srt-file/)
* [kaegi/aligner: Fully automatically corrects subtitle with a reference subtitle](https://github.com/kaegi/aligner)
* [OpenSubs Paper](http://www.lrec-conf.org/proceedings/lrec2008/pdf/76_paper.pdf)
* [Sample YT video sub link](http://video.google.com/timedtext?lang=en&v=aircAruvnKk)
* [subtitle-downloader/subtitle-downloader.py at master · manojmj92/subtitle-downloader · GitHub](https://github.com/manojmj92/subtitle-downloader/blob/master/subtitle-downloader.py)
* [Subtitles The Lord of the Rings: The Fellowship of the Ring - subtitles english 1CD srt (eng)](https://www.opensubtitles.org/en/subtitles/7288827/the-lord-of-the-rings-the-fellowship-of-the-ring-en)

    Crash Course

    vlogbrothers
* [search?q=bitext+alignment&type=Repositories](https://github.com/search?q=bitext+alignment&type=Repositories)
* [gpetho/MScThesis](https://github.com/gpetho/MScThesis)
* [alibaba-edu/simple-effective-text-matching-pytorch](https://github.com/alibaba-edu/simple-effective-text-matching-pytorch)
* [justusschock/deep_alignment_network_pytorch](https://github.com/justusschock/deep_alignment_network_pytorch)
* [PhilippeFerreiraDeSousa/bitext-matching](https://github.com/PhilippeFerreiraDeSousa/bitext-matching)
* [search?q=word+alignment&type=Repositories](https://github.com/search?q=word+alignment&type=Repositories)
* [Text Technology Project - Hojas de cálculo de Google](https://docs.google.com/spreadsheets/d/1U0VKGtTF4XOXSPsnb8SFIP5z87IOiDTcwSgDv_SUQww/edit#gid=2056055344)

# Notes

* alignment rules: U{1:n} from both directions? blocks allowed? unaligned words also allowed?

```latex
* P = \textbf{1}(\textrm{max}(\textrm{rowsoftmax}(Z), \textrm{colsoftmax}(Z)) > \tau)
* Z_{[m \times n]} = L^{B}_{[m \times h]} (L_{[n \times h]}^{A})^T

= R_{[m \times n]}^{B} V_{[n \times h]}^{B} (R_{[n \times m]}^{A} V_{[m \times h]}^{A} )^T

= Q_{[m \times h]}^{A} (K^{B})^T_{[h \times n]} V_{[n \times h]}^{B} (Q_{[n \times h]}^{B} (K^{A})^T_{[h \times m]} V_{[m \times h]}^{A})^T

= W_{Q[m \times m]}^{A} X_{[m \times h]}^{A} (W_{K[n \times n]}^{B} X_{[n \times h]}^{B})^T W_{V[n \times n]}^{B} X_{[n \times h]}^{B} (W_{Q[n \times n]}^{B} X_{[n \times h]}^{B} (W_{K[m \times m]}^{A} X_{[m \times h]}^{A})^T W_{V[m \times m]}^{A} X_{[m \times h]}^{A}

)^T

```
* align English with LA, GRC, FR, DE, ES, RU, ZH (start with DE, FR, RU); write package for realignment: x:y, y:z → x:z (need to flag ambiguities and fix manually)
* data for EN-DE
    * 10k from bibles
    * 10k Tatoeba (300k total)
    * 20k from classic literature
    * 10k from film subtitles
    * 10k from TED talks
    * 10k from YouTube
    * 10k from assorted non-fiction: documentation, reports
    * 10k from media: GlobalVoices, CafeBabel, EuroNews, SwissInfo (especially)
* → search arxiv, neurips, acl for neural alignment
* 6 languages → 21 pairs; 7 languages → 28 pairs, 8 → 36, 9 → 45
* 10,000 aligned sentence pairs each
* baseline word alignments: cross-lingual BERT similarity matrix (normalized weighted dot product? cosine similarity?) → add small-valued diagonal-normal matrix (multiplied by learnable scalar?) to learned alignments to slightly favor diagonal alignments (serve as tiebreaker) → learnable tiebreaker matrix per language pair
* loss: cross-entropy?
* operation: umax: union max: x → x in {rowmax(X), colmax(X)}
* add Project Syndicate to parallel text dataset, Eurozine, ereb.eu,
* alignment scheme:
* i=j for minimal (100%)
* i:j for strict (additional)
* i;j for bisurjective (additional)
* (i-j)<>(k-l) for MWE additional pairs
* i<>j for non-literal corresponding pairs
* characters: = , : ;  ’><’ ‘<>’ ( ) . ?
* output 3- or 4-dimensional tensor to account for different classes of alignments? k different heads?

```latex
* A_{[4, h]} (\vec{v} \otimes \vec{w} )_{[h, 1]} = \vec{p}_{[4, 1]} (?)

```
* modulating matrix C; enables k different outputs for different alignment levels

```latex
* A_i = L^B_{[m, h]} C_{i[h, h]} (L^A)^T_{[h, n]}, i \in \{1,2,...,k\}

```
* learn rules of tensor multiplication (in ML context)
* CRF in 3 dimensions?
* use (cross-lingual?) embeddings to recognize figurative language (non-literal translations)
* word-alignment-viewer: make feature in webpage to show predicted alignment via shading: color-coded by alignment type; for naïve cross-lingual embedding similarity, make high-similarity words darker (softmax scaling?), fade out low-similarity words
* also add audio recordings & use alignment tool
* alignment types: how to color-code alignments?
    * semantic alignment
    * figurative alignment
    * syntactic alignment
    * loners (unpaired)
    * noise
* Added value for language learners in language learning
    * easy word-for-word reading
* Known Unknowns: Small-Vocabulary Sentence and Word Alignment [Using High-Frequency Closed-Class and Pattern-Matching Tokens]
* End-to-End Neural Sentence and Word Alignment  / End-to-End Neural Bitext Alignment
* Use CRF or related PGM for output layer? (word and alignment → read PGM book, section from SLP 3e on CRFs
* create classifier for whether two tests are exact translation, loose translation, (partition: insertion, deletion, paraphrase), or unrelated
* use punctuation and word length to score match likelihood?
* does HFCC approach gain from mapping not to a single <UNK> token, but instead to length-based tokens: <UNK1>, <UNK2>, <UNK3>, …
* Parallel Text & PGTK

    ‣
* [SimAlign: High Quality Word Alignments without Parallel Training Data using Static and Contextualized Embeddings](https://arxiv.org/abs/2004.08728v4)
* [Improving Word Alignment with Contextualized Embedding and Bilingual Dictionary](https://link.springer.com/chapter/10.1007/978-981-16-0705-9_13)
* [ruder.io/cross-lingual-embeddings/](https://www.ruder.io/cross-lingual-embeddings/)

    Drive: Line-a-line: A Tool for Annotating Word-Alignments
* [inventory.clarin.gr/corpus/670](https://inventory.clarin.gr/corpus/670)
* [clarin.eu/resource-families/parallel-corpora](https://www.clarin.eu/resource-families/parallel-corpora)
* [huggingface.co/blog/how-to-train-sentence-transformers](https://huggingface.co/blog/how-to-train-sentence-transformers)

    cross-attention: from each word embedding, learn query, key, and value vectors for querying the other sequence
* [stats.stackexchange.com/questions/421935/what-exactly-are-keys-queries-and-values-in-attention-mechanisms](https://stats.stackexchange.com/questions/421935/what-exactly-are-keys-queries-and-values-in-attention-mechanisms)
* [paperswithcode.com/task/word-alignment/codeless](https://paperswithcode.com/task/word-alignment/codeless)
* [ted.com/people/translators](https://www.ted.com/people/translators)

    ‣
* [tesseract-ocr.github.io/tessdoc/](https://tesseract-ocr.github.io/tessdoc/)
* [ted.com/talks?sort=newest&language=pt-br](https://www.ted.com/talks?sort=newest&language=pt-br)
* [statworx.com/content-hub/blog/finetuning-von-tesseract-ocr-fuer-deutsche-rechnungen/](https://www.statworx.com/content-hub/blog/finetuning-von-tesseract-ocr-fuer-deutsche-rechnungen/)

    ‣

    word-alignment: look into kearning word alignments from HFCC words, or HFCC + k most frequent, or that + pattern- and length-matched words (<UNK-LENGTH:7-PREFIX:VER-

    SUFFIX:EN>)

    use full bert or similar to generate manually-corrected gold labels
* [Word Alignment by Fine-tuning Embeddings on Parallel Corpora](https://arxiv.org/abs/2101.08231)

    ¡¡Atención para las Redes Neuronales, Claramente Explicadas!!!
* [researchgate.net/figure/Comparison-of-the-proposed-algorithm-with-Gale-and-Church-algorithm-for-a-text-where-the_fig2_1871685](https://www.researchgate.net/figure/Comparison-of-the-proposed-algorithm-with-Gale-and-Church-algorithm-for-a-text-where-the_fig2_1871685)
* [The TransBank Aligner: Cross-Sentence Alignment with Deep Neural Networks](https://link.springer.com/chapter/10.1007/978-3-030-27947-9_16)
* [Improving neural machine translation with sentence alignment learning](https://www.sciencedirect.com/science/article/abs/pii/S0925231220313473)
* [[2101.08231] Word Alignment by Fine-tuning Embeddings on Parallel Corpora](https://arxiv.org/abs/2101.08231)
* [autocomplete - How to show paths for auto imports with neovim nvim-cmp - Stack Overflow](https://stackoverflow.com/questions/72668920/how-to-show-paths-for-auto-imports-with-neovim-nvim-cmp)
* [Refining Word Segmentation Using a Manually Aligned Corpus for Statistical Machine Translation](https://aclanthology.org/D14-1173.pdf)
* [Tutorials/Using Other Window Managers with Plasma - KDE UserBase Wiki](https://userbase.kde.org/Tutorials/Using_Other_Window_Managers_with_Plasma)
* [hessian_AI - YouTube](https://www.youtube.com/@hessian_ai8880/featured)
* [Czech-English Manual Word Alignment](https://lindat.mff.cuni.cz/repository/xmlui/handle/11234/1-1804)
* [EUbookshop](https://opus.nlpl.eu/EUbookshop.php)
* [ParIce](https://clarin.is/en/resources/parice/)
* [CLARIN:EL - OpenSubtitles2011](https://inventory.clarin.gr/corpus/670)
* [CLARIN:EL - Parallel Global Voices](https://inventory.clarin.gr/corpus/753)
* [GeFRePaC - German French Reciprocal Parallel Corpus – ELRA Catalogue](https://catalog.elra.info/en-us/repository/browse/ELRA-W0031/)
* [Tatoeba](https://opus.nlpl.eu/Tatoeba.php)
* [PHP: Download documentation](https://www.php.net/download-docs.php)
* [deL1L2IM corpus – ELRA Catalogue](https://catalog.elra.info/en-us/repository/browse/ELRA-W0083/)
* [MLCC Multilingual and Parallel Corpora – ELRA Catalogue](https://catalog.elra.info/en-us/repository/browse/ELRA-W0023/)
* [ECB](https://opus.nlpl.eu/ECB.php)
* [Europarl](https://opus.nlpl.eu/Europarl.php)
* [GNOME](https://opus.nlpl.eu/GNOME.php)
* [GlobalVoices](https://opus.nlpl.eu/GlobalVoices.php)
* [ParCor - A Paralell Pronoun-Coreference Corpus](https://opus.nlpl.eu/ParCor/)
* [OpenSubtitles](https://opus.nlpl.eu/OpenSubtitles-v2018.php)
* [word2word · PyPI](https://pypi.org/project/word2word/)
* [Extraction of Multi-word Expressions from Small Parallel Corpora](https://aclanthology.org/C10-2144.pdf)
* [Information | Free Full-Text | Punctuation and Parallel Corpus Based Word Embedding Model for Low-Resource Languages](https://www.mdpi.com/2078-2489/11/1/24/htm)
* [OPUS: Search Word Alignments](https://opus.nlpl.eu/lex.php)
* [[2203.16838] NeuFA: Neural Network Based End-to-End Forced Alignment with Bidirectional Attention Mechanism](https://arxiv.org/abs/2203.16838)
* [thuhcsi/NeuFA: Neural network-based forced alignment with bidirectional attention mechanism](https://github.com/thuhcsi/neufa)
* [[1803.00057] A Neural Multi-sequence Alignment TeCHnique (NeuMATCH)
* [End-to-End Neural Word Alignment Outperforms GIZA++](https://aclanthology.org/2020.acl-main.146.pdf)
* [End-to-end speech recognition with Alignment RNN-Transducer | IEEE Conference Publication | IEEE Xplore](https://ieeexplore.ieee.org/document/9533348)
* [PyArabic · PyPI](https://pypi.org/project/PyArabic/)
* [One TTS Alignment To Rule Them All | Papers With Code](https://paperswithcode.com/paper/one-tts-alignment-to-rule-them-all)
* [Multi-head attention mechanism: "queries", "keys", and "values," over and over again - Data Science Blog](https://data-science-blog.com/blog/2021/04/07/multi-head-attention-mechanism/)
* [noor library the largest arab electronic library open for books](https://www.noor-book.com/en/)
* [CAMeL-Lab/camel_tools: A suite of Arabic natural language processing tools developed by the CAMeL Lab at New York University Abu Dhabi.](https://github.com/CAMeL-Lab/camel_tools)
* [CAMeL_Tools_Guided_Tour.ipynb - Colaboratory](https://colab.research.google.com/drive/1Y3qCbD6Gw1KEw-lixQx1rI6WlyWnrnDS?usp=sharing)
* [Latin Quran](https://web.archive.org/web/20121224042616/http://sites.univ-lyon2.fr/lesmondeshumanistes/wp-content/uploads/2010/09/Le-Coran-latin-de-Th%C3%A9odore-Bibliander.pdf)
* [List of modern literature translated into dead languages - Wikipedia](https://en.wikipedia.org/wiki/List_of_modern_literature_translated_into_dead_languages)
* [pranaydeeps/Ancient-Greek-BERT · Hugging Face](https://huggingface.co/pranaydeeps/Ancient-Greek-BERT)
* [GitHub - dbamman/latin-bert: Latin BERT](https://github.com/dbamman/latin-bert)
* [tgogos/ocr_greek: resources, links for OCR & greek](https://github.com/tgogos/ocr_greek)
* [OCR for ancient Greek - The Digital Classicist Wiki](https://wiki.digitalclassicist.org/OCR_for_ancient_Greek)
* [dcthree/antigrapheus: In-browser OCR of Ancient Greek and Latin](https://github.com/dcthree/antigrapheus)
* [brobertson/rigaudon: Polytonic Greek OCR engine derived from Gamera and based on the work of Dalitz and Brandt](https://github.com/brobertson/rigaudon)
* [ancient-greek · GitHub Topics](https://github.com/topics/ancient-greek)
* [brobertson/ciaconna: Polytonic Greek OCR tool suite based on Ocropus 0.7](https://github.com/brobertson/ciaconna)
* [pharos-alexandria/ocr-greek_cursive: Training files for Greek cursive script (in early print)](https://github.com/pharos-alexandria/ocr-greek_cursive)
* [Antigrapheus - Online OCR for Ancient Greek and Latin](https://dcthree.github.io/antigrapheus/)
* [TeX rendering in a Java application - TeX - LaTeX Stack Exchange](https://tex.stackexchange.com/questions/41609/tex-rendering-in-a-java-application)
* [Welcome < RTextDoc](http://jwork.org/rtextdoc/)
* [texlive - Embed Tex Live into application - TeX - LaTeX Stack Exchange](https://tex.stackexchange.com/questions/168652/embed-tex-live-into-application)
* [embed latex in application - Google Search](https://www.google.com/search?client=firefox-b-d&q=embed+latex+in+application)
* [overleaf/clsi: A web api for compiling LaTeX documents in the cloud](https://github.com/overleaf/clsi)
* [**busytex/busytex: TexLive programs bundled into a single static binary for x86_64-linux / WASM](https://github.com/busytex/busytex)
* [texlive-source/Build at trunk · TeX-Live/texlive-source](https://github.com/TeX-Live/texlive-source/blob/trunk/Build)
* [TeX-Live/texlive-source: source part of the TeX Live subversion repository - for issues please contact the tex-k mailing list at tug.org](https://github.com/TeX-Live/texlive-source/tree/trunk)
* [TexLive - NixOS Wiki](https://nixos.wiki/wiki/TexLive)
* [mwe2021.pdf](https://people.eng.unimelb.edu.au/tbaldwin/pubs/mwe2021.pdf)
* [Marcos de Toledo - Wikipedia, la enciclopedia libre](https://es.wikipedia.org/wiki/Marcos_de_Toledo)
* [LWT ◆ Learning with Texts - Browse Files at SourceForge.net](https://sourceforge.net/projects/learning-with-texts/files/)
* [HugoFara/lwt: Learn languages by reading! A language learning app stemmed from Learning with Texts (LWT).](https://github.com/HugoFara/lwt)
* [Learning with Texts | lwt](https://hugofara.github.io/lwt/)
* [A Simple and Amazing Way to Create your Own Interlinear Texts – Luca Toma - Luca Lampariello](https://www.lucalampariello.com/create-interlinear-texts/)
* [Lace: Visualizing, Editing and Searching Polylingual OCR Results](http://heml.mta.ca/lace/index.html)
* [brobertson/Lace2: In-broswer OCR editing program that transforms OCR results into structured, citable TEI. No XML experience required!](https://github.com/brobertson/Lace2)
* [Getting Started with CMake for LaTeX - Code Intrinsic](https://www.codeintrinsic.com/getting-started-with-cmake-for-creating-latex-build-process/)
* [Gallery - Templates, Examples and Articles written in LaTeX - Overleaf, Online LaTeX Editor](https://www.overleaf.com/gallery/tagged/dictionary)
* [Les auteurs latins: Lucrèce. Morceaux choisis.](http://gerardgreco.free.fr/IMG/pdf/drn1-3-00.pdf)
* [latex-bilingue/bilingue.pdf at master · lologhi/latex-bilingue](https://github.com/lologhi/latex-bilingue/blob/master/bilingue.pdf)
* [GitHub - iamalbert/pytorch-wordemb: Load pretrained word embeddings (word2vec, glove format) into torch.FloatTensor for PyTorch](https://github.com/iamalbert/pytorch-wordemb)
* [Wayback Machine](https://web.archive.org/web/20130512105242%20/http://www.volny.cz/petr-brezina/libelli/bilingue.pdf)
* [Bible translations into Arabic - Wikipedia](https://en.wikipedia.org/wiki/Bible_translations_into_Arabic)
* [LaTeX, pdfTeX, XeTeX, LuaTeX and ConTeXt - Overleaf, Online LaTeX Editor](https://www.overleaf.com/learn/latex/Articles/The_TeX_family_tree%3A_LaTeX%2C_pdfTeX%2C_XeTeX%2C_LuaTeX_and_ConTeXt)
* [Macronized editions of Latin texts | Latin D](https://latindiscussion.org/threads/macronized-editions-of-latin-texts.26943/)
* [Where to Find Ancient Texts with Macrons : r/latin](https://www.reddit.com/r/latin/comments/dfkezc/where_to_find_ancient_texts_with_macrons/)
* [Seeking Texts with Macrons online - Textkit Greek and Latin Forums](https://www.textkit.com/greek-latin-forum/viewtopic.php?t=12373)
* [antoineboquet/bailly.app: Code source du site Bailly.app.](https://github.com/antoineboquet/bailly.app)
* [Gaffiot/digital-gaffiot-json](https://github.com/Gaffiot/digital-gaffiot-json)
* [antoineboquet/bailly-server: Code source du serveur utilisé par le site Bailly.app.](https://github.com/antoineboquet/bailly-server)
* [antoineboquet/greek-conversion: A small library to convert a polytonic greek string from/into various representations.](https://github.com/antoineboquet/greek-conversion)
* [learning word alignment with neural nets at DuckDuckGo](https://duckduckgo.com/?q=learning+word+alignment+with+neural+nets&ia=web)
* [Word Alignment in the Era of Deep Learning: A Tutorial](https://arxiv.org/pdf/2212.00138.pdf)
* [Search for Improving neural machine translation with sentence alignment learning | Papers With Code](https://paperswithcode.com/search?q_meta=&q_type=&q=Improving+neural+machine+translation+with+sentence+alignment+learning)
* [[2007.01852] Language-agnostic BERT Sentence Embedding](https://arxiv.org/abs/2007.01852)
* [[1601.03805] Matrix Neural Networks](https://arxiv.org/abs/1601.03805)
* [Sentence Alignment and Word Alignment: Projects, Papers, Evaluation, etc.](https://web.eecs.umich.edu/~mihalcea/wa/)
* [Neural semi-Markov CRF for Monolingual Word Alignment at DuckDuckGo](https://duckduckgo.com/?q=Neural+semi-Markov+CRF+for+Monolingual+Word+Alignment&ia=web)
* [A Correction Model for Word Alignments](https://aclanthology.org/D11-1082.pdf)
* [robertostling/eflomal: Efficient Low-Memory Aligner](https://github.com/robertostling/eflomal)
* [raphink/geneve_1564: LaTeX facsimile of a Bible de Genève, 1564](https://github.com/raphink/geneve_1564)
* [big list - Showcase of beautiful typography done in TeX & friends - TeX - LaTeX Stack Exchange](https://tex.stackexchange.com/questions/1319/showcase-of-beautiful-typography-done-in-tex-friends)
* [ hmemcpy/milewski-ctfp-pdf: Bartosz Milewski's 'Category Theory for Programmers' unofficial PDF and LaTeX source](https://github.com/hmemcpy/milewski-ctfp-pdf)
* [Installation — Sentence-Transformers documentation](https://www.sbert.net/docs/installation.html)
* [reverso.net/telecharger-extension-navigateur](https://www.reverso.net/telecharger-extension-navigateur)
* [tesseract-ocr.github.io/tessdoc/tess5/TrainingTesseract-5.html#creating-starter-traineddata](https://tesseract-ocr.github.io/tessdoc/tess5/TrainingTesseract-5.html#creating-starter-traineddata)
* Create pretraining set with existing SotA word/sentence aligner and BERT-based method, then correct by hand
* Simple alignment types:
* minimal - only exact translations
* strict - suitable word pairs aligned; particles & similar left unaligned
* bisurjective: (best-one) - every word from each language aligned to best match
* multi-word expressions: ranges aligned to ranges
* [Multilingual Aligned Corpora From Movie Subtitles](https://giguete.users.greyc.fr/alignment/Subtitles_MM-EG.pdf)
* HFCC detector

    pronouns

    prepositions

    adverbs

    conjunctions

    articles

    determiners

    interjections

    particles

    numbers

    very most common verbs: to be, to say, to do, to ask, can/be able to,  ...

    auxiliary verbs

    regex-based:

    noun-like (capital in German, etc.)

    verb-like

    adjective-like

## Parallel Text Finisher

# parallel-text-finisher

* Create (in Go?) an interlinear LaTeX generator, easily configurable. → learn Go, see about OOP-like constructs, templating, string manipulations, etc.
* look at source of taskwarrior search filtering
* HTML generator in Julia for parallang (Franklin.jl, Genie? Genie Cloud? Pelican in Python?)

(how to) earn money from parallel text toolkit?
* Parallel text flutter app (or other cross-platform app, such as Doxius)
* how to make hover effects?: word/span highlight → highlight aligned words in corresponding sentence(s)

## WiktionaryTool.jl

# WiktionaryTool.jl 🌱

* [yelircaasi/wiktionary-etymology-tool](https://github.com/yelircaasi/wiktionary-etymology-tool)
* Language Candidates

    Julia

    Python

    R

    Scala

    C++

    Java

    JavaScript (Node.js or Deno?)

    Ruby?

    PHP?

    Go?

    Rust?

    Perl?

    * Scheme / Racket / Common Lisp?
* [lispcookbook.github.io/cl-cookbook/web-scraping.html](https://lispcookbook.github.io/cl-cookbook/web-scraping.html)
* [⇒](http://pkgdocs.julialang.org/v1/creating-packages/)
* Similar Projects
* [...](https://github.com/wswu/yawipa)

    → [pypi.org/search/?q=wiktionary](https://pypi.org/search/?q=wiktionary)

    → [Suyash458/WiktionaryParser: A Python Wiktionary Parser](https://github.com/Suyash458/WiktionaryParser)

    → [wiktextract - PyPI](https://pypi.org/project/wiktextract/)

    → [Wiktionary Parser for Python 3.6_ only for definitions - Stack ...](https://stackoverflow.com/questions/45676443/wiktionary-parser-for-python-3-6-only-for-definitions)

    → [Python: wiktionary (applications and programming libraries)](https://libs.garden/python/search?q=wiktionary)

    → [farleyoli/wiktionary-parser - githubmemory](https://githubmemory.com/repo/farleyoli/wiktionary-parser)
* [⇒](https://pypi.org/project/pyktionary/)
* [⇒](https://pypi.org/project/wkt-scraper/)
* [pypi.org/project/wiktextract/](https://pypi.org/project/wiktextract/)
* [Suyash458/WiktionaryParser](https://github.com/Suyash458/WiktionaryParser)
* Applications

    Etymology Graphs

        → semantic comparisons

        → measuring semantic drift

    Intercomprehension Tables

    Wiktionary Gap Identification

    False Friend Tables
* Notes

    ⇒ Julia package for Wiktionary scraping

    WiktionaryScraper.jl

    wiktionaryscraper

    * Wie soll das etymologische Netzwerk aussehen?

        Beziehungen:

        * Elternteil / Kind
        * Cousin, gleiche Bedeutung
        * Cousin, falscher Freund
        * Cousin, irgendwo in der Mitte

    ⇒ Develop Python and Julia packages for scraping Wiktionary

    * Additional Ideas

        → add different sources?

        → identify missing entries on Wiktionary and generate suggestions
* Child Projects
    * CLSEC (cross-lingual semantic and etymological contrasts)
        * contrasting etymologies / root analysis
        * translation persistence of various words
        * contrasting embeddings for translation pairs
        * semantically distinct multi-word expressions/phrases/idioms
        * → use for NSM or similar semantic representation/metalanguage
        * → closely related to paremiological projects → use common tools and methodologies where appropriat
* [CLI-Dictionary](https://github.com/Lodobo/CLI-Dictionary) - Scripts for downloading and viewing wiktionary entries from Kaikki.org.
    * Intercomprehension - Etymologically-Related Words
* Dumps and Dump Parsing
* [dan1wang/jsonbook-builder](https://github.com/dan1wang/jsonbook-builder)
* Wiktionary API
* [en.wiktionary.org/w/api.php](https://en.wiktionary.org/w/api.php)
* [en.wiktionary.org/api/rest_v1/#/Page_content/get_page_definition_term](https://en.wiktionary.org/api/rest_v1/#/Page_content/get_page_definition_term)
* Etymology lists on Wiktionary and Other Data Sources
* [en.wiktionary.org/wiki/Category:Terms_derived_from_Proto-Indo-European](https://en.wiktionary.org/wiki/Category:Terms_derived_from_Proto-Indo-European)

    → [en.wiktionary.org/wiki/Category:Terms_derived_from_Ancient_Greek](https://en.wiktionary.org/wiki/Category:Terms_derived_from_Ancient_Greek)
* [en.wiktionary.org/wiki/Category:Terms_derived_from_Latin](https://en.wiktionary.org/wiki/Category:Terms_derived_from_Latin)
* [en.wiktionary.org/wiki/Category:Terms_derived_from_Arabic](https://en.wiktionary.org/wiki/Category:Terms_derived_from_Arabic)
* [en.wiktionary.org/wiki/Category:Terms_derived_from_Hebrew](https://en.wiktionary.org/wiki/Category:Terms_derived_from_Hebrew)
* [en.wiktionary.org/wiki/Category:Proto-Slavic_lemmas](https://en.wiktionary.org/wiki/Category:Proto-Slavic_lemmas)
* [en.wiktionary.org/wiki/Category:Terms_derived_from_Russian](https://en.wiktionary.org/wiki/Category:Terms_derived_from_Russian)
* [en.wiktionary.org/wiki/Category:Terms_derived_from_Old_East_Slavic](https://en.wiktionary.org/wiki/Category:Terms_derived_from_Old_East_Slavic)
* [en.wiktionary.org/wiki/Category:Terms_derived_from_Slavic_languages](https://en.wiktionary.org/wiki/Category:Terms_derived_from_Slavic_languages)
* [en.wiktionary.org/wiki/Category:Terms_derived_from_West_Slavic_languages](https://en.wiktionary.org/wiki/Category:Terms_derived_from_West_Slavic_languages)
* [en.wiktionary.org/wiki/Category:Terms_derived_from_Proto-Slavic](https://en.wiktionary.org/wiki/Category:Terms_derived_from_Proto-Slavic)
* [en.wiktionary.org/wiki/Category:Terms_derived_from_South_Slavic_languages](https://en.wiktionary.org/wiki/Category:Terms_derived_from_South_Slavic_languages)
* [en.wiktionary.org/wiki/Category:Terms_derived_from_Old_Church_Slavonic](https://en.wiktionary.org/wiki/Category:Terms_derived_from_Old_Church_Slavonic)
* [en.wiktionary.org/wiki/Category:Terms_derived_from_Old_Norse](https://en.wiktionary.org/wiki/Category:Terms_derived_from_Old_Norse)
* [en.wiktionary.org/wiki/Category:English_terms_derived_from_Proto-Germanic](https://en.wiktionary.org/wiki/Category:English_terms_derived_from_Proto-Germanic)
* [en.wiktionary.org/wiki/Category:Terms_derived_from_Yiddish](https://en.wiktionary.org/wiki/Category:Terms_derived_from_Yiddish)
* [en.wiktionary.org/wiki/Category:Terms_derived_from_French](https://en.wiktionary.org/wiki/Category:Terms_derived_from_French)

    etc.
* [en.wiktionary.org/wiki/Category:Arabic_roots](https://en.wiktionary.org/wiki/Category:Arabic_roots)
* [en.wikipedia.org/wiki/Category:Lists_of_loanwords](https://en.wikipedia.org/wiki/Category:Lists_of_loanwords)
* [en.wikipedia.org/wiki/List_of_Germanic_and_Latinate_equivalents_in_English](https://en.wikipedia.org/wiki/List_of_Germanic_and_Latinate_equivalents_in_English)
* [en.wiktionary.org/wiki/Category:Terms_derived_from_Hindi](https://en.wiktionary.org/wiki/Category:Terms_derived_from_Hindi)
* [en.wiktionary.org/wiki/Category:Terms_derived_from_Hindustani_languages](https://en.wiktionary.org/wiki/Category:Terms_derived_from_Hindustani_languages)
* [en.wiktionary.org/wiki/Category:Terms_derived_from_Dravidian_languages](https://en.wiktionary.org/wiki/Category:Terms_derived_from_Dravidian_languages)
* [en.wiktionary.org/wiki/Category:Terms_derived_from_Swahili](https://en.wiktionary.org/wiki/Category:Terms_derived_from_Swahili)
* [en.wiktionary.org/wiki/Category:Terms_derived_from_Chinese](https://en.wiktionary.org/wiki/Category:Terms_derived_from_Chinese)
* [en.wiktionary.org/wiki/Category:English_terms_derived_from_Chinese](https://en.wiktionary.org/wiki/Category:English_terms_derived_from_Chinese)
* [en.wiktionary.org/wiki/Category:Terms_by_etymology_by_language](https://en.wiktionary.org/wiki/Category:Terms_by_etymology_by_language)
* [en.wiktionary.org/wiki/Category:French_terms_derived_from_North_Germanic_languages](https://en.wiktionary.org/wiki/Category:French_terms_derived_from_North_Germanic_languages)
* [List of Russian Roots](https://gist.github.com/oskarkv/c7aea99cbc2aeb5098ae)

    → BYU roots book

    → from frequency lists:
* [en.wiktionary.org/wiki/Wiktionary:Frequency_lists](https://en.wiktionary.org/wiki/Wiktionary:Frequency_lists)
* [1000mostcommonwords.com](https://1000mostcommonwords.com/)

    Ancient Greek Lemmas

    Latin Lemmas
* [English from Ancient Greek](https://en.wiktionary.org/w/index.php?title=Category:English_terms_derived_from_Ancient_Greek&pagefrom=AILUROPHILE%0Aailurophile#mw-pages)
* [Terms derived from Ancient Greek](https://en.wiktionary.org/wiki/Category:Terms_derived_from_Ancient_Greek)
* [Terms derived from Latin](https://en.wiktionary.org/wiki/Category:Terms_derived_from_Latin)
* [en.wiktionary.org/wiki/Category:Terms_derived_from_Proto-Germanic](https://en.wiktionary.org/wiki/Category:Terms_derived_from_Proto-Germanic)
* [en.wiktionary.org/wiki/Category:Terms_derived_from_Proto-Slavic](https://en.wiktionary.org/wiki/Category:Terms_derived_from_Proto-Slavic)
* [en.wiktionary.org/wiki/Category:Terms_derived_from_Proto-Semitic](https://en.wiktionary.org/wiki/Category:Terms_derived_from_Proto-Semitic)
* [en.wiktionary.org/wiki/Category:Terms_derived_from_Proto-Indo-European](https://en.wiktionary.org/wiki/Category:Terms_derived_from_Proto-Indo-European)
* Scraping
* [julia.school/julia/scraping/](https://julia.school/julia/scraping/)
* [juliabloggers.com/julia-introduction-to-web-scraping-phivolcs-seismic-events/](https://www.juliabloggers.com/julia-introduction-to-web-scraping-phivolcs-seismic-events/)
* [stochasticlifestyle.com/finalizing-julia-package-documentation-testing-coverage-publishing/](http://www.stochasticlifestyle.com/finalizing-julia-package-documentation-testing-coverage-publishing/)
* [discourse.julialang.org/t/how-to-start-writing-a-new-julia-package/2864/24](https://discourse.julialang.org/t/how-to-start-writing-a-new-julia-package/2864/24)
* [JuliaLang/Example.jl](https://github.com/JuliaLang/Example.jl) [JuliaLang/METADATA.jl/issues](https://github.com/JuliaLang/METADATA.jl/issues) [tobanwiebe.com/blog/2016/08/julia-packaging](https://tobanwiebe.com/blog/2016/08/julia-packaging)
* [stackoverflow.com/questions/59825336/how-can-i-do-web-scraping-in-julia](https://stackoverflow.com/questions/59825336/how-can-i-do-web-scraping-in-julia)

## Grecromancer

## grecromancer (Classics TTS)

* Name ideas: GrecRomancer (from Necromancer
* To do: Divide into smaller sub-projects.

### Data Ideas

* Align at word level by pre-trained ASR:
* get output or intermediate output in another language (Italian for Latin, Italian / Modern Greek / Russian for Greek)
* recover temporal alignment
* align Latin / greek characters / syllables to corresponding best match in ASR output
  * dynamic programming approach?
  * beam search?
  * forced alignment → look into off-the-shelf
* using the time stamps for each word (ideally with both loose and tight to put bounds on estimate of temporal location of word), create different permutations

### IP Concerns

* 1. learn about relevant IP law and legal precedent
* 2. decide whether to contact and collaborate with relevant speakers
* → after impressive samples have been generated?

### Resources

* [Valerio Velardo - The Sound of AI](https://www.youtube.com/@ValerioVelardoTheSoundofAI/playlists)
* [Digital speech processing](https://www.youtube.com/playlist?list=PLvv3PyiCcNrFuT7CEIvIr4a4g4orascx3)
* [Deep Learning (for Audio) with Python](https://www.youtube.com/playlist?list=PL-wATfeyAMNrtbkCNsLcpoAyBBRJZVlnf)
* Polytonic Representation
  * atomic: each breathing / vowel / accent combination treated as a separate character
  → same for diphthongs?
  * sequential: each
* ASR and Alignment
* [ ]  [xinjli/allosaurus](https://github.com/xinjli/allosaurus)
* [ ]  [readbeyond/aeneas](https://github.com/readbeyond/aeneas)
* [ ]  [Montreal Forced Aligner](https://montreal-forced-aligner.readthedocs.io/en/latest/)
* [ ]  [babel.ling.upenn.edu/phonetics/old_website_2015/p2fa/index.html](https://babel.ling.upenn.edu/phonetics/old_website_2015/p2fa/index.html)
* [ ]  [Label-Synchronous Speech-to-Text Alignment for ASR Using Forward and Backward Transformers](https://arxiv.org/abs/2104.10328)
* [ ]  [Text and Speech Alignment Methods for Speech Translation Corpora Creation](https://uu.diva-portal.org/smash/get/diva2:1440026/FULLTEXT01.pdf)
* [ ]  [SailAlign: Robust long speech-text alignment](https://sail.usc.edu/publications/files/KatsamanisEtAl_SailAlign_VLSRP2011.pdf)
* [ ]  [FORCED ALIGNMENT WITH WAV2VEC2](https://pytorch.org/audio/main/tutorials/forced_alignment_tutorial.html)
* [ ]  [Audio-to-text alignment for speech recognition with very limited resources](http://www.xavieranguera.com/papers/IS2014_phonealignment.pdf)
* [ ]  Text-to-Speech Alignment for Imperfect Transcriptions
* [ ]  ALIGNMENT OF SPEECH TO HIGHLY IMPERFECT TEXT TRANSCRIPTIONS
* [ ]  [Weakly-supervised text-to-speech alignment confidence measure](https://aclanthology.org/C16-1192.pdf)
* [ ]  [as-ideas/DeepForcedAligner](https://github.com/as-ideas/DeepForcedAligner)
* [ ]  [NeuFA: Neural Network Based End-to-End Forced Alignment with Bidirectional Attention Mechanism](https://arxiv.org/abs/2203.16838)
* [ ]  [app.litmaps.com/seed/178150517](https://app.litmaps.com/seed/178150517)
* [ ]  [app.litmaps.com/seed/253654604](https://app.litmaps.com/seed/253654604)
* [ ]  [app.litmaps.com/seed/253654604](https://app.litmaps.com/seed/253654604)
* [ ]  [app.litmaps.com/seed/246165086](https://app.litmaps.com/seed/246165086)
* [ ]  [app.litmaps.com/seed/93108309](https://app.litmaps.com/seed/93108309)
* [ ]  [app.litmaps.com/seed/238756929](https://app.litmaps.com/seed/238756929)
* [ ]  [app.litmaps.com/seed/15327392](https://app.litmaps.com/seed/15327392)
* [ ]  [MFA](https://www.semanticscholar.org/paper/Montreal-Forced-Aligner%3A-Trainable-Text-Speech-McAuliffe-Socolof/9e8b06c60722fee06d7f01d4eeaf3ae81e0247d7)
* TTS
* [Papers with Code - Text-To-Speech Synthesis](https://paperswithcode.com/task/text-to-speech-synthesis/)
* [Papers with Code - Text-To-Speech Synthesis](https://paperswithcode.com/task/text-to-speech-synthesis/codeless)

    * Data Augmentatio
* [ ]  → use all (or many) n-grams of appropriate length for early training, then only proper phrase/sentence splits for later finer training
        → separate models for word-level and phrase/sentence-level TTS (but p/s-level highest priority
* [ ]  Low-resource expressive text-to-speech using data augmentatio
* [ ]  [Text-to-speech system for low-resource language using cross-lingual transfer learning and data augmentation](https://asmp-eurasipjournals.springeropen.com/articles/10.1186/s13636-021-00225-4)
* [ ]  [SpecAugment: A Simple Data Augmentation Method for Automatic Speech Recognition](https://arxiv.org/abs/1904.08779)
* [ ]  [speechresearch.github.io/fastspeech2/](https://speechresearch.github.io/fastspeech2/)
* [ ]  [paperswithcode.com/method/fastspeech-2](https://paperswithcode.com/method/fastspeech-2)
* [ ]  [Requirements and Motivations of Low-Resource Speech Synthesis for Language Revitalization](https://aclanthology.org/2022.acl-long.507.pdf)
* [ ]  [datacamp.com/tutorial/complete-guide-data-augmentation](https://www.datacamp.com/tutorial/complete-guide-data-augmentation)
* [ ]  [SpecAugment: A Simple Data Augmentation Method for Automatic Speech Recognition](https://paperswithcode.com/paper/specaugment-a-simple-data-augmentation-method)
* [ ]  [Multi-speaker TTS system for low-resource language using cross-lingual transfer learning and data augmentation](http://www.apsipa.org/proceedings/2021/pdfs/0000849.pdf)
* [ ]  [TTS-by-TTS 2: Data-selective augmentation for neural speech synthesis using ranking support vector machine with variational autoencoder](https://arxiv.org/abs/2206.14984)
* [ ]  [TTS-by-TTS: TTS-driven Data Augmentation for Fast and High-Quality Speech Synthesis](https://arxiv.org/abs/2010.13421)
* [ ]  [Audio Data Augmentation Is All You Need](https://www.youtube.com/watch?v=HH_h52I_Qeg)
* [ ]  [Text-To-Speech Data Augmentation for Low Resource Speech Recognition](https://arxiv.org/abs/2204.00291)
* [ ]  [On-The-Fly Data Augmentation for Text-to-Speech Style Transfer](https://www.cse.ust.hk/faculty/mak/PDF/asru2021-tts.pdf)
* [ ]  [TTS-GAN: A Transformer-based Time-Series Generative Adversarial Network](https://arxiv.org/abs/2202.02691)
* [ ]  [wav2vec 2.0: A Framework for Self-Supervised Learning of Speech Representations](https://arxiv.org/abs/2006.11477)
* [ ]  for fine-tuning: use approach similar to TTS-by-TTS(2) by ensuring that synthetic data used for further training are recognizable by ASR model → will this work, or merely constrict the range of sounds properly generated?
* [ ]  high-quality re-creation with autoencoder, denoising (probably not adding noise!), normalize speed, pitch, and volume, interpolate across 3 directions between original and normalized, (slight pitch increase / decrease), different word cut points (dependent upon correct word alignment), slight speed up, slight slow down,
    → all perturbations should be quite small to maintain quality of the data
    → how to normalize speed? what is one “unit”? →  regression problem? system of equations with weights to learn for each letter (here → variable)? how to maintain speech when speeding up?
* [ ]  weight rarer phonemes and/or phoneme sequences more heavily in the training data?
* [ ]  [r/LanguageTechnology/comments/rz8epu/coqui_introduces_yourtts_a_zerosample](https://www.reddit.com/r/LanguageTechnology/comments/rz8epu/coqui_introduces_yourtts_a_zerosample)
* [ ]  [coqui-ai/TTS](https://github.com/coqui-ai/TTS)
* [ ]  [mozilla/TTS](https://github.com/mozilla/TTS)
* [ ]  [Transfer Learning Framework for Low-Resource Text-to-Speech using a Large-Scale Unlabeled Speech Corpus](https://arxiv.org/abs/2203.15447)
* [ ]  [docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/stable/tts/datasets.html](https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/stable/tts/datasets.html)
* [ ]  [docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/stable/core/core.html](https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/stable/core/core.html)
* [ ]  [tensorflow.org/datasets/catalog/ljspeech](https://www.tensorflow.org/datasets/catalog/ljspeech)
* [ ]  [A Survey on Neural Speech Synthesis](https://arxiv.org/abs/2106.15561)
* [ ]  [imics-lab/tts-gan](https://github.com/imics-lab/tts-gan)
* [ ]   [ogunlao.github.io/blog/2021/01/26/how-to-create-speech-dataset.html](https://ogunlao.github.io/blog/2021/01/26/how-to-create-speech-dataset.html)
    → should use phrase and sentence breaks as much as possible
    → use accent sequence patterns to identify likely grammatical phrases and reasonable breakpoints
* [ ]  [pytorch.org/audio/main/tutorials/forced_alignment_tutorial.html](https://pytorch.org/audio/main/tutorials/forced_alignment_tutorial.html)
* [ ]  [tiefenauer/forced-alignment](https://github.com/tiefenauer/forced-alignment)
* [ ]
* [GitHub - enhuiz/vall-e: An unofficial PyTorch implementation of the audio LM VALL-E](https://github.com/enhuiz/vall-e)
* [GitHub - wenet-e2e/speech-synthesis-paper: List of speech synthesis papers.](https://github.com/wenet-e2e/speech-synthesis-paper)
* [End-to-End Adversarial Text-to-Speech (Paper Explained)](https://www.youtube.com/watch?v=WTB2p4bqtXU)
* [ogunlao.github.io/blog/2020/07/17/breaking-down-ctc-loss.html](https://ogunlao.github.io/blog/2020/07/17/breaking-down-ctc-loss.html)
* [wav2vec video](https://youtu.be/8Kpowre6yyk)
* [Speech & Music | Applied Deep Learning](https://www.youtube.com/playlist?list=PLoEMreTa9CNkL5fCXx50MN6nwWvsJgio6)
* [graphcore.ai/posts/how-to-use-openais-whisper-for-speech-recognition](https://www.graphcore.ai/posts/how-to-use-openais-whisper-for-speech-recognition)
* TTS LA/GRC
* [Audio samples from "Semi-Supervised Training for Improving Data Efficiency in End-to-End Speech Synthesis"](https://google.github.io/tacotron/publications/semisupervised/)
* [How much dataset is needed at least to train on your version? · Issue #12 · NVIDIA/tacotron2 · GitHub](https://github.com/NVIDIA/tacotron2/issues/12)
* [How to train a new model with dataset of diffirent language? · Issue #321 · NVIDIA/tacotron2 · GitHub](https://github.com/NVIDIA/tacotron2/issues/321)
* [ancientgreek.eu/](https://ancientgreek.eu/)
* [latinitium.com/learn-latin-with-video-and-audio-70-hours-of-spoken-latin/](https://latinitium.com/learn-latin-with-video-and-audio-70-hours-of-spoken-latin/)
* [linguae.weebly.com/latin-speech-engines.html](https://linguae.weebly.com/latin-speech-engines.html)
* [luke-ranieri.myshopify.com/](https://luke-ranieri.myshopify.com/)
* [luke-ranieri.myshopify.com/products/gospel-of-john-english-latin-greek-trilingual-audiobook-text](https://luke-ranieri.myshopify.com/products/gospel-of-john-english-latin-greek-trilingual-audiobook-text)
* [medium.com/@rajanieprabha/tacotron-2-implementation-and-experiments-832695b1c86e](https://medium.com/@rajanieprabha/tacotron-2-implementation-and-experiments-832695b1c86e)
* [medium.com/@rajanieprabha/tacotron-2-implementation-and-experiments-832695b1c86e](https://medium.com/@rajanieprabha/tacotron-2-implementation-and-experiments-832695b1c86e)
* [youtube.com/c/Latinitium](https://youtube.com/c/Latinitium)
* [youtube.com/c/ScorpioMartianus](https://youtube.com/c/ScorpioMartianus)
* [Is this good result · Issue #200 · Rayhane-mamah/Tacotron-2 · GitHub](https://github.com/Rayhane-mamah/Tacotron-2/issues/200)
* [SpeedySpeech](https://arxiv.org/pdf/2008.03802.pdf)
* [Why learn ancient Greek? - YouTube](https://www.youtube.com/watch?v=0y6xa2O8VeE)
* [What Classical Attic ACTUALLY sounded like 🤯 Vulgar Attic pronunciation (English & Latin subtitles) - YouTube](https://www.youtube.com/watch?v=TBIZ2WRfAgY)
* [Introducing Voicebox: The Most Versatile AI for Speech Generation | Meta](https://about.fb.com/news/2023/06/introducing-voicebox-ai-for-speech-generation/)

### Podium Arts

# Podium Arts

* [ancientgreek.eu/](https://ancientgreek.eu/)
* [video](https://www.youtube.com/@Podium-arts)

# YouTube

* 1. [Apology of Socrates, by Xenophon](https://www.youtube.com/watch?v=YGITyNb4CUo)
* 2. [Aristotelian Physiognomics (reconstr. Ancient Attic Greek pronunciation)](https://www.youtube.com/watch?v=R92kiYZVXY0)
* 3. ["A Greek Boy at Home" (Rouse) part 2 + appendix; reconstructed Ancient Attic Greek pronunciation.](https://www.youtube.com/watch?v=fFL8Vk1tVHE)
* 4. [Genesis chapter 01 recited in reconstructed Ancient Attic Greek pronunciation, by Ioannis Stratakis](https://www.youtube.com/watch?v=-pQZ7XXRv4w)
* 5. [Athenian Constitution (Xenophon) narrated in reconstructed Ancient Attic Greek, by Ioannis Stratakis](https://www.youtube.com/watch?v=izwQ30Q5bYg)
* 6. [Categories by Aristotle (reconstructed Ancient Attic Greek pronunciation) by Ioannis Stratakis](https://www.youtube.com/watch?v=q8qElrxe7KU&t=6s)
* 7. [Lucius or The Ass (Lucian) narrated in reconstructed Ancient Attic Greek by Ioannis Stratakis](https://www.youtube.com/watch?v=ksAoPtfkZjA)
* 8. [Aristaenetus , love letter 1.1 read in reconstructed Ancient Attic Greek](https://www.youtube.com/watch?v=VCKMEWp7LlQ)
* 9. [on Sleep & Waking by Aristotle. (reconstructed Ancient Attic Greek pronunciation)](https://www.youtube.com/watch?v=53cqETn4gCU)
* 10. [on Sense & the Sensible, by Aristotle, (reconstructed Ancient Attic Greek pronunciation)](https://www.youtube.com/watch?v=h7rIePi3R64)
* 11. ["A Greek Boy at Home" (Rouse) part 1. II-XVII reconstructed Ancient Attic Greek pronunciation.](https://www.youtube.com/watch?v=Bv9vFpGw3gg)
* 12. [Iliad, rhapsody 20, by Homer recited in reconstructed Ancient Greek, by Ioannis Stratakis](https://www.youtube.com/watch?v=vGRA1nGQUFg)
* 13. [Iliad, rhapsody 07, by Homer recited in reconstructed Ancient Greek, by Ioannis Stratakis](https://www.youtube.com/watch?v=4UEg3qIqhk4)
* 14. [Gospel of John, part of chapter 17 (narrated in reconstructed Ancient Attic Greek pronunciation)](https://www.youtube.com/watch?v=URNXt72VoKY)
* 15. ["A First Greek Reader" (Beresford & Douglas) reconstructed Ancient Greek pronunciation](https://www.youtube.com/watch?v=Cr0_lKX7UTM)
* 16. ["Cleitophon" by Plato, (reconstructed Ancient Greek pronunciation)](https://www.youtube.com/watch?v=mUNhBolXP3w)
* 17. [῾Critias῾ by Plato, narrated in reconstructed Ancient Greek pronunciation](https://www.youtube.com/watch?v=wN5ltc7pK-U)
* 18. [Iliad, rhapsody 12, by Homer recited in reconstructed Ancient Greek, by Ioannis Stratakis](https://www.youtube.com/watch?v=v5cBn2X5NXE)
* 19. [the Fables of Aesop, part-02 (ed. C.Halm)](https://www.youtube.com/watch?v=-Cwfs-TSvGk)
* 20. [Iliad, rhapsody 03, by Homer recited in reconstructed Ancient Greek, by Ioannis Stratakis](https://www.youtube.com/watch?v=0KuSv38NDDo)
* 21. [Iliad 19, by Homer (reconstructed Ancient Greek pronunciation)](https://www.youtube.com/watch?v=N8lrHTMf_Do&t=63s)
* 22. [Euthyphro, by Plato (reconstructed Ancient Greek pronunciation)](https://www.youtube.com/watch?v=tHIGHELlnns)
* 23. ["Characters" by Theophrastus, read in reconstructed Ancient Greek](https://www.youtube.com/watch?v=SpM8Da7x2lk)
* 24. [the Book of Revelation (St. John the Divine) in reconstructed Koine Ancient Greek](https://www.youtube.com/watch?v=8vhDMvUHjRg)
* 25. [Daphnis & Chloë (by Longus) - Δάφνις ϗ Χλόη (Λόγγος)](https://www.youtube.com/watch?v=jCUPC0vuiqs&t=36s)
* 26. [On Memory & Recollection, by Aristotle (reconstructed Ancient Greek pronunciation)](https://www.youtube.com/watch?v=AHP3uV-8vk8)
* 27. [Apology of Socrates, by Plato (reconstructed Ancient Greek pronunciation)](https://www.youtube.com/watch?v=k3tlBO3agFU&t=185s)
* 28. [Aesop's fables (3, 4, 11, 23, 101 ed.Halm)](https://www.youtube.com/watch?v=8MejrGFg6g0&t=80s)
* 29. ["Politics" (book 1, ch.12) by Aristotle (audiobook sample)](https://www.youtube.com/watch?v=g1mOT1RH8o8&t=27s)
* 30. [Letter to Nicocles (audiobook) a.k.a. "the Royal Art"](https://www.youtube.com/watch?v=sYxZ3gGOz64)
* 31. ["Meditations" book 01 (Marcus Aurelius) in reconstructed Ancient Attic Greek by Ioannis Stratakis](https://www.youtube.com/watch?v=p2DsUgSs72k)
* 32. [Pindar "Olympian Odes"](https://www.youtube.com/watch?v=gEp7AVotbCE)
* 33. [On the Heavens 1.09 (Aristotle) spoken reconstructed Ancient Greek pronunciation](https://www.youtube.com/watch?v=RNlzQ6Trr3Q)
* 34. [Batrachomyomachia by "Homer" (spoken reconstructed Ancient Greek pronunciation)](https://www.youtube.com/watch?v=NXFVCDQE7uc)
* 35. [the "Art of Grammar" by Dionysius Thrax (spoken reconstructed Ancient Greek)](https://www.youtube.com/watch?v=k9dxBH3RgaQ)
* 36. [Aristotle "On Harmony" (On Music), Problemata XIX, in spoken reconstructed Ancient Greek](https://www.youtube.com/watch?v=tudLtIpLvuQ)
* 37. [Pindar Olympian Ode .01 (spoken reconstructed Ancient Greek)](https://www.youtube.com/watch?v=mrfVRb7yW8M)
* 38. [Aristotle: "On the Voice" (Problemata XI), spoken in reconstructed Ancient Greek](https://www.youtube.com/watch?v=1ithB9SdQcM)
* 39. [Isocrates' "Letter to Demonicus" (audiobook spoken in reconstructed Ancient Greek)](https://www.youtube.com/watch?v=NuKjxVjnzN4)
* 40. ["On the Refusal of a Pension" oration by Lysias (audiobook spoken in reconstructed Ancient Greek)](https://www.youtube.com/watch?v=GffSvdLsUgk)
* 41. ["An EphesianTale" by Xenophon of Ephesus (audiobook spoken in reconstructed Ancient Greek)](https://www.youtube.com/watch?v=g7FIlh-eY2Q)
* 42. [Homer, Odyssey rhapsody 01 (audiobook spoken in reconstructed Ancient Greek)](https://www.youtube.com/watch?v=UdyXlUmD3v4)
* 43. [Aristotle's "On Interpretation" (audiobook spoken in reconstructed Ancient Greek)](https://www.youtube.com/watch?v=mcxQFC-4vWo)
* 44. [Plato: "Ion" (audiobook spoken in reconstructed Ancient Greek)](https://www.youtube.com/watch?v=TTmCJDXktRY)
* 45. [Aristotle: On the Soul, book 3, ch 8 (audiobook spoken in reconstructed Ancient Greek)](https://www.youtube.com/watch?v=tfr43gwAZOM)
* 46. [the Tablet of Cebes (audiobook in reconstructed Ancient-Greek)](https://www.youtube.com/watch?v=eo5zzuZ_eLE)
* 47. ["Poetics" by Aristotle (audiobook spoken reconstructed ancient Greek)](https://www.youtube.com/watch?v=Am71Njxz0eI)
* 48. [Xenophon, Anabasis 1.1 (spoken reconstructed ancient Greek)](https://www.youtube.com/watch?v=vEcQxQRVa-A)
* 49. [Xenophon "Spartan Constitution" (audiobook spoken in reconstructed ancient Greek)](https://www.youtube.com/watch?v=IbAnHCDUDiw)
* 50. [Sappho to Aphrodite, fragm-1, sung in reconstructed ancient Greek](https://www.youtube.com/watch?v=XTHE-P4oZ9w)
* 51. [Ψήγματα Ἀρχαίου Ἑλληνικοῦ Ἤχου (παρουσίασις/presentation 8/11/2015)](https://www.youtube.com/watch?v=RDt_XEy3SHM)
* 52. [Sophocles, Oedipus at Colonus 1-13 (spoken reconstructed ancient Greek)](https://www.youtube.com/watch?v=ZYRKzOl_hV8)
* 53. [Euripides, Helen 1-67 (spoken reconstructed ancient Greek)](https://www.youtube.com/watch?v=LkxmGuE4ae8)
* 54. [Iliad A , 16 Feb 2015 (excerpts)](https://www.youtube.com/watch?v=o8aOL_w5vno)
* 55. [Homer, iliad-A trailer (for the 16-02-2015 performance, Athens GR)](https://www.youtube.com/watch?v=8-T04m14HR0)
* 56. [Homer, Odyssey a1-27 (spoken in reconstructed ancient Greek pronunciation)](https://www.youtube.com/watch?v=MOvVWiDsPWQ)
* 57. [Empedocles of Agrigento, "On Nature" (fragm. 4) spoken reconstructed Ancient Greek](https://www.youtube.com/watch?v=PxdmjxNH7Pw)
* 58. [Sappho, "the Brothers Poem" (spoken reconstructed Ancient Greek)](https://www.youtube.com/watch?v=GdMnNSuAW1g)
* 59. [Herodotus, Histories 1.1-4 (spoken reconstructed ancient Greek)](https://www.youtube.com/watch?v=Fkuq1MWfaWc)
* 60. ["Fox & Snake" (Aesop's fable 033, spoken reconstructed ancient Greek))](https://www.youtube.com/watch?v=AiYO1nUEyyA)
* 61. ["Fox with swollen stomach" (Aesop's fable 030, in spoken ancient Greek))](https://www.youtube.com/watch?v=XriVDG-Z1q4)
* 62. ["Virtues & Vices" of Aristotle (spoken reconstructed ancient Greek)](https://www.youtube.com/watch?v=Q_jnHuiB_5M)
* 63. [longest word in the world (spoken reconstructed ancient Greek pronunciation)](https://www.youtube.com/watch?v=HZvg4Zy5rLs)
* 64. [Hippocratic Oath (reconstructed ancient Greek pronunciation)](https://www.youtube.com/watch?v=Q5FHZx0oOqs)
* 65. [Aesop's Fable 19 (spoken in reconstructed ancient Greek)](https://www.youtube.com/watch?v=VpMGZmtsfHI)
* 66. [iliad 1. intro](https://www.youtube.com/watch?v=4ltPZxh_4ZQ)
* 67. [Iliad of Homer production](https://www.youtube.com/watch?v=4iA1Ej84jCw)
* 68. [Callimachus 2 in reconstructed ancient Greek pronunciation](https://www.youtube.com/watch?v=UXmpHKTuGGM)
* 69. [Theogony 1-21 spoken in reconstructed Ancient Greek](https://www.youtube.com/watch?v=WjgnVvI1H7g)

## Audiobooks in spoken Ancient Greek Language

* [HIPPOCRATES the Medical Oath](https://ancientgreek.eu/free/oath.html) 4 / 0
* [BERESFORD & DOUGLAS A First Greek Reader](https://ancientgreek.eu/edu/first-greek-reader.html) 106 / -
* [OLD TESTAMENT Genesis 01](https://ancientgreek.eu/audiobooks/genesis-01.html) 8 / -
* 5.4 [W.H.D. ROUSE A Greek boy at Home -01](https://ancientgreek.eu/edu/greek-boy-1.html) 135 / 25
* 4.26 [W.H.D. ROUSE A Greek boy at Home -02](https://ancientgreek.eu/edu/greek-boy-2.html) 213 / 50
* → 466 / 77
* 2.8 [DIONYSIUS THRAX the Art of Grammar](https://ancientgreek.eu/audiobooks/grammar-dt.html) 42 / 15
* 2.63 [ARISTOTLE On Sense and the Sensible](https://ancientgreek.eu/audiobooks/sense-aristotle.html) 79 / 30
* 2.6 [ARISTOTLE Physiognomics](https://ancientgreek.eu/audiobooks/physiognomics-aristotle.html) 65 / 25
* 2.6 [XENOPHON Spartan Constitution](https://ancientgreek.eu/audiobooks/spartan-c.html) 52 / 20
* 2.52 [ARISTOTLE Poetics](https://ancientgreek.eu/audiobooks/poetics.html) 106 / 42
* 2.52 [THEOPHRASTUS Characters](https://ancientgreek.eu/audiobooks/characters-theophrastus.html) 83 / 33
* → 893 / 242
* 2.5 [AESOP Fables 084-173b](https://ancientgreek.eu/audiobooks/aesop-02.html) 127 / 51
* → 1020 / 293 (17h)
* 2.5 [ARISTOTLE On the Voice](https://ancientgreek.eu/audiobooks/voice.html) 50 / 20
* 2.5 [ISOCRATES Letter to Nicocles](https://ancientgreek.eu/audiobooks/isocrates-nicocles.html) 50 / 20
* 2.44 [ARISTOTLE On Interpretation](https://ancientgreek.eu/audiobooks/interpretation.html) 61 / 25
* 2.28 [CEBES the Tablet of Cebes](https://ancientgreek.eu/audiobooks/cebes.html) 57 / 25
* 2.24 [XENOPHON OF EPHESUS An Ephesian Tale](https://ancientgreek.eu/audiobooks/ephesiantale.html) 179 / 80
* 2.24 [PLATO Ion](https://ancientgreek.eu/audiobooks/ion.html) 38 / 17
* 2.2 [AESOP Fables 001-083](https://ancientgreek.eu/audiobooks/aesop-01.html) 113 / 51
* 2.2 [PLATO Apology of Socrates](https://ancientgreek.eu/audiobooks/apology-p.html) 101 / 46
* 2.16 [PLATO Critias](https://ancientgreek.eu/audiobooks/plato-critias.html) 52 / 24
* 2.1 [ARISTOTLE On Sleep and Waking](https://ancientgreek.eu/audiobooks/sleep-aristotle.html) 31 / 15
* 2.04 [ARISTOTLE On the Soul](https://ancientgreek.eu/audiobooks/soul.html) 204 / 100
* 2 [ARISTOTLE Categories](https://ancientgreek.eu/audiobooks/categories-aristotle.html) 100 / 50
* 2 [ARISTOTLE Politics, book 1](https://ancientgreek.eu/audiobooks/politics-aristotle-1.html) 60 / 30
* 1.89 [XENOPHON Athenian Constitution](https://ancientgreek.eu/audiobooks/athenian-constitution-xenophon.html) 34 / 18
* 1.85 [LONGUS Daphnis & Chloë](https://ancientgreek.eu/audiobooks/daphnis-chloe.html) 223 / 120
* 1.85 [ARISTOTLE On Harmony /Music](https://ancientgreek.eu/audiobooks/harmony.html) 37 / 20
* 1.7 [PLATO Cleitophon](https://ancientgreek.eu/audiobooks/plato-cleitophon.html) 17 / 10
* 1.7 [PLATO Euthyphro](https://ancientgreek.eu/audiobooks/euthyphro-plato.html) 51 / 30
* 1.65 [ISOCRATES Letter to Demonicus](https://ancientgreek.eu/audiobooks/demonicus.html) 33 / 20
* 1.58 [ARISTOTLE Virtues & Vices](https://ancientgreek.eu/audiobooks/vv.html) 19 / 12
* 1.5 [AESOP Fables 001-012](https://ancientgreek.eu/audiobooks/aesop-1.html) 18 / 12
* 1.5 [AESOP Fables 013-024](https://ancientgreek.eu/audiobooks/aesop-2.html) 18 / 12
* 1.25 [AESOP Fables 025-036](https://ancientgreek.eu/audiobooks/aesop-3.html) 15 / 12
* 1.49 [LUCIAN Lucius or The Ass](https://ancientgreek.eu/audiobooks/lucius-lucian.html) 107 / 72
* 1.33 [LYSIAS Refusal of a Pension](https://ancientgreek.eu/audiobooks/lysias-pension.html) 16 / 12
* 1.3 [MARCUS AURELIUS Meditations 01](https://ancientgreek.eu/audiobooks/marcus-aurelius-meditations-01.html) 20 / 15
* 1.25 [ARISTOTLE On Memory & Recollection](https://ancientgreek.eu/audiobooks/memory-aristotle.html) 25 / 20
* 0.94 [PARMENIDES On Being](https://ancientgreek.eu/audiobooks/parmenides.html) 17 / 18
* 0.7 [XENOPHON Apology of Socrates](https://ancientgreek.eu/audiobooks/apology-x.html) 21 / 30
* Maybe not
* [HOMER Batrachomyomachia](https://ancientgreek.eu/audiobooks/batracho.html)
* [HOMER Odyssey 01](https://ancientgreek.eu/audiobooks/odyssey-01.html)
* [HOMER Iliad 20](https://ancientgreek.eu/audiobooks/iliad-20-homer.html)
* [HOMER Iliad 07](https://ancientgreek.eu/audiobooks/iliad-07-homer.html)
* [HOMER Iliad 12](https://ancientgreek.eu/audiobooks/iliad-12-homer.html)
* [HOMER Iliad 03](https://ancientgreek.eu/audiobooks/iliad-03-homer.html)
* [HOMER Iliad 19](https://ancientgreek.eu/audiobooks/iliad-19-homer.html)
* [JOHN THE EVANGELIST The Gospel of John](https://ancientgreek.eu/audiobooks/gospel-john.html)
* [JOHN OF PATMOS NT Book of Revelation](https://ancientgreek.eu/audiobooks/revelation-john.html)
* [PINDAR Olympian Odes](https://ancientgreek.eu/audiobooks/pindar-o.html)

     ([ARISTOTLE *Nicomachean Ethics 01](https://ancientgreek.eu/#))*

## Latinitium

# Latinitium

* [latinitium.com/category/2000-years-of-latin-prose/](https://latinitium.com/category/2000-years-of-latin-prose/)
* [video](https://www.youtube.com/@Latinitium)
* [soundcloud.com/user-327529648](https://soundcloud.com/user-327529648)
* [store.latinitium.com/products/evangelium-lucae-audiobook](https://store.latinitium.com/products/evangelium-lucae-audiobook) (224 / 16)
* [store.latinitium.com/collections/pugio-bruti-a-crime-story-in-easy-latin,](https://store.latinitium.com/collections/pugio-bruti-a-crime-story-in-easy-latin,) [dokumen.pub/pugio-bruti.html](https://dokumen.pub/pugio-bruti.html) (102 / 16)
* [store.latinitium.com/collections/ad-alpes-a-tale-of-roman-life](https://store.latinitium.com/collections/ad-alpes-a-tale-of-roman-life) (440 / 39)
* [store.latinitium.com/collections/familia-romana-audiobook](https://store.latinitium.com/collections/familia-romana-audiobook) (495 / 39)
* [store.latinitium.com/products/ritchie-s-fabulae-faciles-audiobook](https://store.latinitium.com/products/ritchie-s-fabulae-faciles-audiobook) (152 / 16)
* → 1413 / 126 (23.5h)

# [latinitium.com/latin-audio-archive](https://latinitium.com/latin-audio-archive)

* [The Story Of Androclus And The Lion](https://latinitium.com/latin-audio-archive#The_Story_Of_Androclus_And_The_Lion)
* [The Story Of Perseus Part 2 – Latin Texts](https://latinitium.com/latin-audio-archive#The_Story_Of_Perseus_Part_2_Latin_Texts)
* [The Story Of Perseus Part I](https://latinitium.com/latin-audio-archive#The_Story_Of_Perseus_Part_I)
* [City Life, Country Life (Pliny)](https://latinitium.com/latin-audio-archive#City_Life_Country_Life_Pliny)
* [Cicero’s Story About Fraud](https://latinitium.com/latin-audio-archive#Ciceros_Story_About_Fraud)
* [Erasmus’ Perilous Winter Journey](https://latinitium.com/latin-audio-archive#Erasmus_Perilous_Winter_Journey)
* [Cicero on the Magical Ring of Gyges](https://latinitium.com/latin-audio-archive#Cicero_on_the_Magical_Ring_of_Gyges)
* [Sallust on Glory and Virtue](https://latinitium.com/latin-audio-archive#Sallust_on_Glory_and_Virtue)
* [Aurelius Victor on Romulus, the First King of Rome](https://latinitium.com/latin-audio-archive#Aurelius_Victor_on_Romulus_the_First_King_of_Rome)
* [Cincinnatus](https://latinitium.com/latin-audio-archive#Cincinnatus)
* [Demosthenes and The Donkey’s Shadow](https://latinitium.com/latin-audio-archive#Demosthenes_and_The_Donkeys_Shadow)
* [The Story of the Shrewd Elephant](https://latinitium.com/latin-audio-archive#The_Story_of_the_Shrewd_Elephant)
* [Suetonius on Julius Caesar](https://latinitium.com/latin-audio-archive#Suetonius_on_Julius_Caesar)
* [The Story About The Wood-cutter And The Golden Axe](https://latinitium.com/latin-audio-archive#The_Story_About_The_Wood-cutter_And_The_Golden_Axe)
* [Aurelius Commodus](https://latinitium.com/latin-audio-archive#Aurelius_Commodus)
* [The Crime and Fate of Daedalus](https://latinitium.com/latin-audio-archive#The_Crime_and_Fate_of_Daedalus)
* [Two Letters from Cicero](https://latinitium.com/latin-audio-archive#Two_Letters_from_Cicero)
* [Caesar and the Pirates](https://latinitium.com/latin-audio-archive#Caesar_and_the_Pirates)
* [Never Lose Hope in Your Studies](https://latinitium.com/latin-audio-archive#Never_Lose_Hope_in_Your_Studies)
* [Ancient Roman Furniture](https://latinitium.com/latin-audio-archive#Ancient_Roman_Furniture)
* [Sallust on the Death of Catiline](https://latinitium.com/latin-audio-archive#Sallust_on_the_Death_of_Catiline)
* [The Story of Aeneas](https://latinitium.com/latin-audio-archive#The_Story_of_Aeneas)
* [Cicero’s Quest for the Tomb of Archimedes](https://latinitium.com/latin-audio-archive#Ciceros_Quest_for_the_Tomb_of_Archimedes)
* [Roman Houses](https://latinitium.com/latin-audio-archive#Roman_Houses)
* [Gladiatorial Fights in Ancient Rome](https://latinitium.com/latin-audio-archive#Gladiatorial_Fights_in_Ancient_Rome)
* [Cicero on True and Perfect Friendship](https://latinitium.com/latin-audio-archive#Cicero_on_True_and_Perfect_Friendship)
* [The Story of the Avenging Pigs](https://latinitium.com/latin-audio-archive#The_Story_of_the_Avenging_Pigs)
* [Tommaso Vallauri on Q. Curtius Rufus](https://latinitium.com/latin-audio-archive#Tommaso_Vallauri_on_Q_Curtius_Rufus)
* [What Price did Philoxenus Pay for his Outspokenness?](https://latinitium.com/latin-audio-archive#What_Price_did_Philoxenus_Pay_for_his_Outspokenness)
* [The Life of Cicero, Part 2](https://latinitium.com/latin-audio-archive#The_Life_of_Cicero_Part_2)
* [The Life of Cicero, Part I](https://latinitium.com/latin-audio-archive#The_Life_of_Cicero_Part_I)
* [The Life and Death of Brutus](https://latinitium.com/latin-audio-archive#The_Life_and_Death_of_Brutus)
* [Cicero on the Circus Games](https://latinitium.com/latin-audio-archive#Cicero_on_the_Circus_Games)
* [The Story of Theseus, Part II](https://latinitium.com/latin-audio-archive#The_Story_of_Theseus_Part_II)
* [The Story of Theseus, Part I](https://latinitium.com/latin-audio-archive#The_Story_of_Theseus_Part_I)
* [The Christmas Story X2 (Vulgate And Sebastien Châteillon)](https://latinitium.com/latin-audio-archive#The_Christmas_Story_X2_Vulgate_And_Sebastien_Chateillon)
* [Catiline Addresses the Conspirators](https://latinitium.com/latin-audio-archive#Catiline_Addresses_the_Conspirators)
* [The Audacious Architect of Alexandria (Vitruvius)](https://latinitium.com/latin-audio-archive#The_Audacious_Architect_of_Alexandria_Vitruvius)
* [The Story of Mantacius the fraudster](https://latinitium.com/latin-audio-archive#The_Story_of_Mantacius_the_fraudster)
* [Why Pliny wants to be like Spurinna](https://latinitium.com/latin-audio-archive#Why_Pliny_wants_to_be_like_Spurinna)
* [What did Cicero Feel Going into Exile?](https://latinitium.com/latin-audio-archive#What_did_Cicero_Feel_Going_into_Exile)

### Latinum

# Latinum

* [patreon.com/posts/download-8843692](https://www.patreon.com/posts/download-8843692)

## # interlineator

* toolkit to create interlinear and juxtalinear annotations - especially for grammatical and phonetic glosses
* toolkit for generating linguistic annotations (interlinear, juxtalinear, hover, etc.)
* option to only gloss words under a certain frequency, or not contained in a certain list

## # henry-higgins

* A) Constrastive audio visualization (user vs target), normalizing for speed and pitch, also aligning to transcription and to each other
* B) Convolutional (+ attention?) binary classifier native vs non-native, good for visualization, esp. in frequency domain, but also in time domain
* → look at how to visualize activations and attention alignments

## Resources

* [Exploring Phoneme-Level Speech Representations for End-to-End Speech Translation](https://esalesky.github.io/assets/pdf/acl19_exploring.pdf)
* Allosaurus → enhance and fine-tune, use in articulatory feedback??
* [Phoneme-to-Audio Alignment with Recurrent Neural Networks for Speaking and Singing Voice](https://hal.science/hal-03552964/file/1676anav.pdf)

## Considerations

* make as a plugin to Praat? or similar, but with a more polished interface?
* [apps.kde.org/artikulate/](https://apps.kde.org/artikulate/)
* make GAN-/RL-based accent trainer.
* Train to distinguish user's attempt from gold sample. The user retries.
* Should be invariant to pitch and timbre
* other PolyglotToolkit Projects:

    translation-trainer: use tatoeba or supplied parallel text (optimally with multiple translations), compute metrics, show diff, display dashboard, etc.

    language utility (pre-processor) packages, esp for Arabic, Ancient Greek, Chinese

    * Alignment Tool(s)

        make GUI tool (or nvim plugin) for manual sentence/word alignment

    * CLI for viewing parallel texts in the terminal

    Vocalizer: add diacritics to language (seq2seq package) - for arabic, hebrew, ancient greek, latin (with macros → [Alatius/latin-macronizer),](https://github.com/Alatius/latin-macronizer),) [ictibus.blogspot.com/,](http://ictibus.blogspot.com/,) [ilovegooglebooks.blogspot.com/search/label/macrons,](http://ilovegooglebooks.blogspot.com/search/label/macrons,) russian → [russiangram.com/,](https://russiangram.com/,) easy test case for training data, ukrainian

    Latin error detector: fix wrong endings → right architecture for finding single location (here error) in a sequence

    Maybe start with Ancient Greek diacritics: easy data, learnable objective

    use PoS tagging, Wiktionary word info (via Wiktionary tool) → later dependency parsing?

## Expression Translation Tables (→ Multi-Word Expression Project, Proverbs Project)

* [en.wiktionary.org/wiki/Category:Multiword_terms_by_language](https://en.wiktionary.org/wiki/Category:Multiword_terms_by_language)

# Projects

-> mypyc compilation (static?) codon? -> check licenses
* bw CLI (bitwarden)
* clockodo CLI
* libgen CLI
* Jira CLI
* jira [developer.atlassian.com/server/jira/platform/rest-apis/](https://developer.atlassian.com/server/jira/platform/rest-apis/)

jira [Biscuit-Colorscheme/biscuit](https://github.com/Biscuit-Colorscheme/biscuit)

jira [ralphbean/jira-tools](https://github.com/ralphbean/jira-tools)

jira [npmjs.com/package/@rushdigital/confluence-cli](https://www.npmjs.com/package/@rushdigital/confluence-cli)

jira [jira-cli](https://github.com/ankitpokhrel/jira-cli)
* jira [jira-tools](https://github.com/ralphbean/jira-tools)
* jira [jira](https://www.npmjs.com/package/@rushdigital/confluence-cli)
* {cli clockodo} [nyantec/clockodo.py: Python API for clocko:do](https://github.com/nyantec/clockodo.py)
* clockodo  [Basics of the Clockodo REST API](https://www.clockodo.com/en/api/)
* clockodo  [Control the stop clock with /api/v2/clock (REST-API)](https://www.clockodo.com/en/api/clock/)

clockodo  [clockodo node](https://www.npmjs.com/package/clockodo)
* clockodo  [clockodo.py](https://github.com/nyantec/clockodo.py)
* clockodo [Manage entries with /api/v2/entries (REST-API)](https://www.clockodo.com/en/api/entries/)
* clockodo [clock api](https://www.clockodo.com/en/api/clock/)
* clockodo [clockodo - npm](https://www.npmjs.com/package/clockodo)

clockodo [clockodo api](https://www.clockodo.com/en/api/entries/)
* plt: C++ Lexilla, Lua Scintillua, Python pygments, Go Chroma, Rust Syntect, JavaScript Highlight.js / Prism.js
* plt: Make binaries available on Github page.
* plt: Write PLT static generation code in Go, Rust, Python, Lua, JavaScript, C++.
* plt: how do RosettaCode, XinY, Hyperpolyglot, X by Example, etc. do it?
* proj [Nixide: Uses, Dosage, Side Effects, FAQ - MedicinesFAQ](https://www.medicinesfaq.com/brand/nixide)
* proj [floresta - Wiktionary, the free dictionary](https://en.wiktionary.org/wiki/floresta)
* proj [nebokrai (horizon, +consilium, ganttouchthis, taskifist, roadmapper)](...)
* proj paralllel-text-finisher explicit_latex_head explicit_latex_body explicit_latex_full
* envtools: rrpo and package containing commands envsumm and envdiff
* envdiff: tool to find differences between environments, including files reachable from: $PATH, $LD_LIBRARY_PATH, etc, $INCLUDE (headers, linked libraries), env variables, config files, packages installed -> include nvidia-specific option

\-> semantic modules:
* env var access
* dir listing
* writing to well-defined (human-readable) serialization
* deserialization (maybe JSON)
* diff logic and fuzzy file comparison using deserialized JSON (dictionary-like structure)
* diff display (output)

\-> inputs:
* currrent env vs json file
* 2 json files
* dotenv / dotenv vs [current, json]
* output (str, txt, toml) of env command
* (wrapper for) Nix shell declarations
* other dev shell tools

\-> other candidates: cython, codon, Kotlin native, Rust, safe subset of C or Cpp, Ocaml, Haskell, Go
* Write LLM overview, with maybe 5 versions, differing in complexity and required background

# Personal Website 🌱

## Hosting

* Want something better than Hostinger
* [hpanel.hostinger.com/hosting/isaacrriley.com/](https://hpanel.hostinger.com/hosting/isaacrriley.com/)

## Structure

* About Me
* [ ]
* Projects
* Math & Programming Visualizations
* [ ]  Bayes’ Theorem (rewrite and convert from TDS)
* [ ]  algebraic structures
        * ⇒ Idea: Math taxonomy interactive visualizations for personal site - spaces (Venn diagram), algebraic structures (flowchart? Venn diagram?)
* [ ]  matrix types
* [ ]  proglang table
* [ ]  scalable webpage graphic of family tree of programming languages
        * Link
* [The Briefest Genealogy of Programming Languages](http://www.martinrinehart.com/pages/genealogy-programming-languages.html)
            * Genealogy of Programming Languages.pdf on Drive
* [en.wikipedia.org/wiki/Generational_list_of_programming_languages](https://en.wikipedia.org/wiki/Generational_list_of_programming_languages)
* [en.wikipedia.org/wiki/History_of_programming_languages](https://en.wikipedia.org/wiki/History_of_programming_languages)
* [en.wikipedia.org/wiki/Timeline_of_programming_languages](https://en.wikipedia.org/wiki/Timeline_of_programming_languages)
* [rigaux.org/language-study/diagram.html](http://rigaux.org/language-study/diagram.html)
        * Notes
            * → button to change color scheme for different views corresponding to characteristics/history: paradigm(s), genealogy, application area, language features
* Study Notes (port from LaTeX versions)

## Learning

* [ ]  [Build and deploy a portfolio website [Full Tutorial Course]](https://www.youtube.com/watch?v=_xkSvufmjEs)- [ ]  look at all examples in list of personal websites
* [ ]  read [codingflicks.com/2020/08/simple-website-design-using-html-and-css.html](https://www.codingflicks.com/2020/08/simple-website-design-using-html-and-css.html)
* [ ]  look at web books for notes
* [ ]  look into mathjax, hugo, jekyll, and [unbuch](https://github.com/mrtzh/unbuch) for static site generation

## My Site

* [strapdownjs.com](https://strapdownjs.com/)
* [yelircaasi.github.io/](https://yelircaasi.github.io/)
* [Introducing fastpages: An easy to use blogging platform with extra features for Jupyter Notebooks](https://www.kdnuggets.com/2020/02/introducing-fastpages-blogging-platform-jupyter-notebooks.html)
* [Launch a Website with a Custom URL using Github Pages and Google Domains](https://medium.com/employbl/launch-a-website-with-a-custom-url-using-github-pages-and-google-domains-3dd8d90cc33b)
* [NO BULLSHIT TEXTBOOKS](https://minireference.com/)
* [Read The Leanpub Manual | Leanpub](https://leanpub.com/manual/read)
* [Sell Your eBook on Gumroad: How to Do It in 30 Minutes](https://www.elated.com/sell-ebook-gumroad-30-minutes/)
* [Sign Up for Data Science Central - Data Science Central](https://www.datasciencecentral.com/main/authorization/signUp?target=https%3A%2F%2Fwww.datasciencecentral.com%2Fprofiles%2Fblog%2Fnew)
* [Supercharge GitHub Pages with Jekyll and Travis CI - Derek Smart - Medium](https://medium.com/@mcred/supercharge-github-pages-with-jekyll-and-travis-ci-699bc0bde075)
* [yelircaasi’s gists](https://gist.github.com/yelircaasi)
* [Самое важное / Песочница / Хабр](https://habr.com/ru/sandbox/start/)
* [leanpub.com/LittleInferenceBook/read](https://leanpub.com/LittleInferenceBook/read)
* [Join the Medium Partner Program](https://medium.com/me/partner/enroll/terms)
* [netlify.com/pricing/](https://www.netlify.com/pricing/)
* [RyanFitzgerald/devportfolio](https://github.com/RyanFitzgerald/devportfolio)
* [ashutosh1919/masterPortfolio](https://github.com/ashutosh1919/masterPortfolio)

## Blogging

* [cms - Multilingual blogging platform - Software Recommendations Stack Exchange](https://softwarerecs.stackexchange.com/questions/7519/multilingual-blogging-platform)
* [Create a site - Sites Help](https://support.google.com/sites/answer/98081?hl=en)
* [Embedding Scripts in Google Sites - Google Apps Script for Beginners (2014)
* [Gadgets for Google Sites | Google Sites API | Google Developers](https://developers.google.com/google-apps/sites/gadgets/site_gadgets)
* [Google Sites - Prices? Fees? Monthly? Annually? - foros de productos de Google](https://productforums.google.com/forum/#!topic/sites/poAG1gxMCKU)
* [How to Easily Create a Multilingual WordPress Site](http://www.wpbeginner.com/beginners-guide/how-to-easily-create-a-multilingual-wordpress-site/)
* [Hypotheses: a multilingual platform for academic blogging – Open Electronic Publishing](http://oep.hypotheses.org/1687)
* [MathJax](https://www.mathjax.org/)
* [Multilingual Blogging](https://problogger.com/multilingual-blogging/)
* [Welcome | Flask (A Python Microframework)
* [Your stories](https://medium.com/me/stories/drafts)

## Writing

* [D2L for Reference (esp. code language tabs)](https://github.com/d2l-ai/d2l-en/blob/master/chapter_appendix-mathematics-for-deep-learning/information-theory.md)
* [A Guide to Creating and Hosting a Personal Website on GitHub | Jonathan McGlone | Librarian, Front-End Developer, Digital Publisher, Project Manager, Music Enthusiast, Web Noodler.](http://jmcglone.com/guides/github-pages/)
* [Adding a theme to your GitHub Pages site using Jekyll - GitHub Help](https://help.github.com/en/github/working-with-github-pages/adding-a-theme-to-your-github-pages-site-using-jekyll)
* [Blogging Guide – Medium](https://medium.com/blogging-guide)
* [Creating Gem Based Themes For Jekyll | Chrisanthropic](https://www.chrisanthropic.com/blog/2016/creating-gem-based-themes-for-jekyll/)
* [Creating your own Jekyll Theme Gem - James Hamann - Medium](https://medium.com/@jameshamann/creating-your-own-jekyll-theme-gem-1f8180a0e4b8)
* [How to Create and Publish a Jekyll Theme Gem](https://webdesign.tutsplus.com/tutorials/how-to-create-and-publish-a-jekyll-theme-gem--cms-27475)
* [How to Make a Beautiful Personal Website Quickly - Better Programming - Medium](https://medium.com/better-programming/how-to-make-a-beautiful-personal-website-quickly-cab115866134)
* [How to Set Up a Jekyll Theme](https://webdesign.tutsplus.com/tutorials/how-to-set-up-a-jekyll-theme--cms-26332)* [shad.io/MatVis/bundle.js](https://shad.io/MatVis/bundle.js)
* [Making your first Jekyll theme: Part 1 - Siteleaf](https://www.siteleaf.com/blog/making-your-first-jekyll-theme-part-1/)
* [Bookish (typesetting conversion library):](https://github.com/parrt/bookish)
* [**Write for Towards Data Science - Towards Data Science](https://towardsdatascience.com/questions-96667b06af5)

# proglang table

* [item_synchronizer](https://github.com/bergercookie/item_synchronizer)
* [example of semantic diff](https://github.com/Ekleog/todiff) - look at algorithms and implementations in src
* [item_synchronizer](https://github.com/bergercookie/item_synchronizer)
* [transpiler](https://jarble.github.io/transpiler/)
* look at sync merge  algorithm: [gotas](https://github.com/szaffarano/gotas)

* Where to put feature (row) descriptions in the markdown source? -> in italic -> how to separate from language-specific ('in-box') notes?
* rename markdown_feat_view and markdown_lang_view to featview and langview -> or md-featview and md-langview?
* Discussion: [chat.openai.com/c/d53450a7-03f3-4f4f-8f4e-30c778963c36](https://chat.openai.com/c/d53450a7-03f3-4f4f-8f4e-30c778963c36)
* Make giant hyperpolyglot table for different equivalent tasks, keywords, concepts, etc
* make not only clickable (to display/collapse groups of rows and columns), but also vim-navigable
* Use ‘⟩ ’ for REPL, as opposed to $ for bash → or ‘ℜ ’? Use REPL> in source, with option to customize it
* Menus at the top for Languages and for Features, arranged hierarchically in groups with groups also selectable → Optiona at the top to toggle selecting/unselecting all (’Select/unselect all’ / ‘Toggle select all’ → or two separate options?)
* Add menu for color selection → how to do syntax highlighting? which JS library to use?
* Write in Python to use Pygments library
* → need to write bidirectional update logic for diffs. Use Pandas? Possibly overkill, but undeniably useful
* How to merge edits at the same block? Use a Python-wrapped got diff?
* [ ] \*\*\*\*\*\*\*\*\* [teachcode](https://github.com/madlabsinc/teachcode) - Guide for the earliest lessons of coding.

|— static

  |— css

   |— html

   |— js
* Design ideas:
* Top bar, slightly lighter than main background, with title (’Programming Language Table’) and on the right the following icons (maybe rounded squares):
*   documentation (scroll image, including friendly introduction - and disclaimer)
*   version number (simply show number)
*   color theme selection (palette icon)
*   column selection (3 vertical lines)
*   row selection (3 horizontal lines)
*   Github link (Github icon) → also dropdown for consistency, with options to go to main code or to html folder
*   donation link (ko-fi logo, or whatever I end up using, or coffee cup with menu if I use multiple services)
* Support optional verbose contents for each cell, separated by a horizontal line in Markdown.
* Make columns orderable, both in the drop-down menu and the table itself.
* Hover text for all icons
* Toggle boilerplate - include in markdown subsection ‘### Boilerplace’ with the full code block → or just 2 code blocks, with the second then parsed as boilerplate?
* Use cell selection in the table, including multiple
* For all options and actions, support mouse click and vim-style keybindings (including number modifiers!)
*   click / space bar to toggle boilerplate in a cell (space bar when selected)
* [hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html)
* [phoenixframework.org/](https://www.phoenixframework.org/)
* [orgs/alpha2phi/repositories](https://github.com/orgs/alpha2phi/repositories)

# [Minimal Working Examples](https://docs.google.com/spreadsheets/d/1hzRM9NpjLdlBnZmU2H2UTX_eWDRXf9jujuw61ov9Yso/edit?usp=sharing) 🌱

-> Add "Build Your Own Lisp" to Rosetta Projects

 simple HTTP 1.1 server - great exercise for Go and Rust especially

https://github.com/marvincolgin/data-structures-and-algorithms
* [eldritch-cookie/templates](https://github.com/eldritch-cookie/templates) $$$
* [RosettaProjects](https://github.com/RosettaProjects) Next Step
* [x]  Rename: RosettaProjects (Github organization
* [ ]  code template repos (use copier, ideally → rewrite copier in compiled language?
  * copier-template-
  * etc,    * [ ]  scripts & utility functions (keep index in README.md
* [ ]  add nbcat (first in Go, later in Rust, then in others) → move nbcat-go to RosettaProjects or
* [ ]  add cowsay project as a slightly more interesting hello world (project 2, basically)
  * add nix & docker for each folder in polyglot-tasks -> rename to polyglot-programming-tasks in its own repo, add 40 algorithms book, also create new gh organization
* from Spreadshee
  * DL Project
  * Prototypes
* [PwC Intent Classification](https://paperswithcode.com/task/intent-classification)
* [Concise Tutorial](https://github.com/netik1020/Concise-iPython-Notebooks-for-Deep-learning/tree/master/Intent_classifier)
* [Corresponding Datasets](https://github.com/snipsco/nlu-benchmark/tree/master/2017-06-custom-intent-engines)
* [netik1020/Concise-iPython-Notebooks-for-Deep-learning/tree/master/Intent_classifier](https://github.com/netik1020/Concise-iPython-Notebooks-for-Deep-learning/tree/master/Intent_classifier)
* [colab.research.google.com/github/mdda/deep-learning-workshop/blob/master/notebooks/5-RNN/3-Text-Corpus-and-Embeddings.ipynb](https://colab.research.google.com/github/mdda/deep-learning-workshop/blob/master/notebooks/5-RNN/3-Text-Corpus-and-Embeddings.ipynb)
* [colab.research.google.com/drive/1mSwH-DVZbVVNeP_KSprWtQY33fh3kQTt](https://colab.research.google.com/drive/1mSwH-DVZbVVNeP_KSprWtQY33fh3kQTt)
* [Input and output sizes](https://medium.com/@shivajbd/understanding-input-and-output-shape-in-lstm-keras-c501ee95c65e?)
* [stackoverflow.com/questions/49923165/tensorflow-training-on-json-data-to-generate-similar-output](https://stackoverflow.com/questions/49923165/tensorflow-training-on-json-data-to-generate-similar-output)
* [tensorflow.org/versions/r1.15/api_docs/python/tf/io/decode_json_example](https://www.tensorflow.org/versions/r1.15/api_docs/python/tf/io/decode_json_example)
* [JSON example with images](https://algorithmia.com/blog/deep-dive-into-object-detection-with-open-images-using-tensorflow)
* [tensorflow.org/tfx/tutorials/transform/simple](https://www.tensorflow.org/tfx/tutorials/transform/simple)
* [Good ideas from Rasa](https://rasa.com/docs/rasa/nlu/components/)
* [towardsdatascience.com/a-guide-to-conda-environments-bc6180fc533](https://towardsdatascience.com/a-guide-to-conda-environments-bc6180fc533)
* [medium.com/@tatiana.parshina/understanding-rasa-tensorflow-intent-classifier-e9d4ef019c6](https://medium.com/@tatiana.parshina/understanding-rasa-tensorflow-intent-classifier-e9d4ef019c6)
* [TatianaParshina](https://github.com/TatianaParshina)
* [xliuhw/NLU-Evaluation-Data?files=1](https://github.com/xliuhw/NLU-Evaluation-Data?files=1)
* [ATIS Dataset](https://www.kaggle.com/siddhadev/atis-dataset-from-ms-cntk)
* [yuanxiaosc/BERT-for-Sequence-Labeling-and-Text-Classification/blob/master/run_slot_intent_join_task_LSTM.py](https://github.com/yuanxiaosc/BERT-for-Sequence-Labeling-and-Text-Classification/blob/master/run_slot_intent_join_task_LSTM.py)
* [DataTurks-Engg/Entity-Recognition-In-Resumes-SpaCy/blob/master/train.py](https://github.com/DataTurks-Engg/Entity-Recognition-In-Resumes-SpaCy/blob/master/train.py)

* [keras.io/layers/embeddings/](https://keras.io/layers/embeddings/)
* [medium.com/@yuraist/how-to-upload-your-own-dataset-into-google-colab-e228727c87e9](https://medium.com/@yuraist/how-to-upload-your-own-dataset-into-google-colab-e228727c87e9)
* [medium.com/analytics-vidhya/neural-networks-for-word-embeddings-4b49e0e9c955](https://medium.com/analytics-vidhya/neural-networks-for-word-embeddings-4b49e0e9c955)
* [towardsdatascience.com/a-beginners-guide-to-word-embedding-with-gensim-word2vec-model-5970fa56cc92](https://towardsdatascience.com/a-beginners-guide-to-word-embedding-with-gensim-word2vec-model-5970fa56cc92)
* [blog.rasa.com/rasa-nlu-in-depth-part-1-intent-classification/](https://blog.rasa.com/rasa-nlu-in-depth-part-1-intent-classification/)
* [medium.com/@palashshinde6/how-to-build-simple-chatbot-in-python-from-scratch-using-rasa-nlu-nltk-5fb23aa702a4](https://medium.com/@palashshinde6/how-to-build-simple-chatbot-in-python-from-scratch-using-rasa-nlu-nltk-5fb23aa702a4)
* [analyticsvidhya.com/blog/2018/01/faq-chatbots-the-future-of-information-searching/](https://www.analyticsvidhya.com/blog/2018/01/faq-chatbots-the-future-of-information-searching/)
* [Spacy Python Tutorial - Intent Classification with Rasa and Spacy](https://www.youtube.com/watch?v=hbgY7lGuK8U)
* [nlpforhackers.io/chatbots-introduction/](https://nlpforhackers.io/chatbots-introduction/)
* [Rasa NLU & Rasa Core Tutorial- Introduction & Intent Classification](https://www.youtube.com/watch?v=5I8vL2pk_1g)
* [Prepare your data for ML | Text Classification Tutorial Pt. 1 (Coding TensorFlow)](https://www.youtube.com/watch?v=BO4g2DRvL6U)
* [medium.com/@palashshinde6/how-to-build-simple-chatbot-in-python-from-scratch-using-rasa-nlu-nltk-5fb23aa702a4](https://medium.com/@palashshinde6/how-to-build-simple-chatbot-in-python-from-scratch-using-rasa-nlu-nltk-5fb23aa702a4)

* Resources
  * TF Cookbook
  * TF for Dummies
  * PyTorch Tutorials

* [tensorflow.org/resources/learn-ml](https://www.tensorflow.org/resources/learn-ml)
* [tfhub.dev](https://tfhub.dev/)
* [paperswithcode.com](https://paperswithcode.com/)
* [Builing Chatbots with Python](https://b-ok.cc/book/3642068/da7d8c)

* [Concise-iPython-Notebooks-for-Deep-learning](https://github.com/netik1020/Concise-iPython-Notebooks-for-Deep-learning)
* [Concise ](https://github.com/netik1020/Concise-iPython-Notebooks-for-Deep-learning)
* [Kaggle Notebooks](https://www.kaggle.com/notebooks)
* [Simple LSTM](https://www.kaggle.com/bminixhofer/simple-lstm-pytorch-version)
* [Kaggle GloVe Kernels](https://www.kaggle.com/takuok/glove840b300dtxt/kernels)
* [Multi-Output Learning - A Survey](https://arxiv.org/pdf/1901.00248.pdf)
* [RodneyShag/HackerRank_solutions](https://github.com/RodneyShag/HackerRank_solutions)
* [Solve Programming Questions | HackerRank](https://www.hackerrank.com/domains/algorithms)

```txt
|  | compile | enter interpreter | exit interpreter | print |
| --- | --- | --- | --- | --- |
| C | $ gcc file.c OR gcc -o <execname> <file>.c | NA | NA |  |
|  | $ ./execname OR ./a.out IF NO EXECNAME SPECIFIED |  |  |  |
|  |  |  |  |  |
| C++ | $ gcc file.cpp OR g++ -o <execname> <file>.cpp | NA | NA |  |
|  | $ ./execname OR ./a.out IF NO EXECNAME SPECIFIED | (Jupyter Notebook) |  |  |
|  | Code::Blocks, XCode, NetBeans |  |  |  |
| Julia | $ julia <filename>.jl | $ julia | exit() | println("string") |
|  |  | exit() |  | print("string") |
|  |  | JuliaPro (Juno in Atom), Jupyter Notebook |  |  |
| Python | $ python <filename>.py | $ python | exit() | print('string') |
|  | $ py <filename>.py | exit() |  | print("string") |
|  |  | Spyder, Jupyter Notebook, Atom |  |  |
| R | $ R <file>.r | R Studio | NA | print("string") |
|  |  | R App |  | print('string') |
|  |  | Jupyter Notebook |  |  |
| Scala | $ scala <filename>.scala | $ scala | :q | println("Hello, world!") |
|  |  | Jupyter Notebook |  |  |
|  |  |  |  |  |
| Java | $ javac <filename>.java | NA | NA | System.out.println("string") |
|  | $ java <filename> | (Jupyter Notebook for SciJava) |  |  |
|  | Eclipse, NetBeans, IntelliJIdea, XCode |  |  |  |
| Scheme | $ scheme --load <file>.scm | $ scheme | (exit) | (begin (display "Hello, World!") (newline)) |
|  |  |  |  | (display "Hello, World!") |
|  |  |  |  |  |
| Racket | $ racket file.rkt | $ racket | (exit) | "Hello, world!" |
|  |  | $ drracket |  |  |
|  |  |  |  |  |
| Haskell | $ ghc -o objname file.hs | $ haskell | :quit | putStrLn "Hello World!" |
| [cheatsheet.codeslower.com/CheatSheet.pdf](https://cheatsheet.codeslower.com/CheatSheet.pdf) | $ ./ objname | $ ghci |  | main = putStrLn "Hello World!" |
| [github.s3.amazonaws.com/downloads/jsoffer/cheatsheet/CheatSheetEs.pdf?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAISTNZFOVBIJMK3TQ%2F20191213%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20191213T171655Z&X-Amz-Expires=300&X-Amz-SignedHeaders=host&X-Amz-Signature=3e018e451f290bb18731aad39af27d0ef52bb1357d937734d4d77acd8217b9f4](https://github.s3.amazonaws.com/downloads/jsoffer/cheatsheet/CheatSheetEs.pdf?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAISTNZFOVBIJMK3TQ%2F20191213%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20191213T171655Z&X-Amz-Expires=300&X-Amz-SignedHeaders=host&X-Amz-Signature=3e018e451f290bb18731aad39af27d0ef52bb1357d937734d4d77acd8217b9f4) |  |  |  |  |
| Prolog | $ prolog -q -l <filename>.pl OR <filename>.pro | $ prolog | halt. | write('string'), nl. |
|  | $ swipl -q -l <filename>.pl OR <filename>.pro | $ swipl |  |  |
|  |  |  |  |  |
| Octave | $ octave <file>.m | $ octave | exit |  |
|  |  | Octave GUI / Jupyter Notebook |  |  |
|  |  |  |  |  |
| Perl | $ perl <filename>.pl | $ perl6 | exit |  |
|  | $ perl5 <filename>.p6 |  |  |  |
|  |  |  |  |  |
| Lua | $ lua <filename>.lua | $ lua | os.exit() |  |
|  |  |  |  |  |
|  |  |  |  |  |
| Bash | $ ./<filename> | $ bash | NA |  |
|  |  |  |  |  |
|  |  |  |  |  |
| NASM (Linux x86_64) | $ nasm -felf64 <filename>.asm && ld hello.o && ./a.out | NA | NA |  |
|  |  |  |  |  |
|  |  |  |  |  |
| NASM (OSX x86_64) | $ nasm -fmacho64 <filename>.asm && ld hello.o && ./a.out | NA | NA |  |
|  |  |  |  |  |
|  |  |  |  |  |
| HLA | $ hla <filename>.hla ==>CREATES <filename>.o and <filename> executable | NA | NA |  |
|  | $ ./<filename> |  |  |  |
|  |  |  |  |  |
| Rust | $ rustc <filename>.rs | NA | NA |  |
|  | $ ./<filename> |  |  |  |
|  |  |  |  |  |
| Ruby | $ ruby <filename>.rb | $ irb | exit |  |
|  |  |  |  |  |
|  |  |  |  |  |
| Nim | $ nim c -r --verbosity:0 <file>.nim | NA | NA |  |
|  |  | (Jupyter Notebook) |  |  |
|  |  |  |  |  |
| JavaScript | NA | NA | NA |  |
```

* [Spreadsheet](https://docs.google.com/spreadsheets/d/1hzRM9NpjLdlBnZmU2H2UTX_eWDRXf9jujuw61ov9Yso/edit?usp=sharing)
    Add mustache template processor to projects: [mustache.github.io/](https://mustache.github.io/)
    add
    → Implement scheduling module in polyglot-projects, also corresponding visualizer
* Resources / Lists## [Exercism Intro](https://www.youtube.com/playlist?list=PLpsileTZltjWrPQjTzJ8Fj2ah7JGBCss5)
* [rosettacode.org/wiki/Category:Solutions_by_Programming_Task](https://rosettacode.org/wiki/Category:Solutions_by_Programming_Task)
  * add this: [Bogdanp/awesome-advent-of-code](https://github.com/Bogdanp/awesome-advent-of-code)
    * Basic
    * print
    * input
    * addition
    * subtraction
    * float division
    * multiplication
    * modulo
    * floor division
    * exponent
    * sum of products
    * for-loop
    * if loop
    * while loop
    * convert decimal to binary
    * convert binary to decimal
    * function to convert
    * Misc Algorithms
* [Insertion sort](https://www.techiedelight.com/insertion-sort-iterative-recursive/)
* [Selection sort](https://www.techiedelight.com/selection-sort-iterative-recursive/)
* [Bubble sort](https://www.techiedelight.com/bubble-sort-iterative-recursive/)
* [Merge Sort](https://www.techiedelight.com/merge-sort/)
* [Quicksort](https://www.techiedelight.com/quicksort/)
  * Bucket Sort
* [Heap Sort](https://www.techiedelight.com/heap-sort-place-place-implementation-c-c/)
  * Counting Sort
* [Binary Search](https://www.techiedelight.com/binary-search/)
* [Breadth First Search (BFS)](https://www.techiedelight.com/breadth-first-search/)
* [Depth First Search (DFS)](https://www.techiedelight.com/depth-first-search/)
* [Linked List Implementation | Part 1](https://www.techiedelight.com/linked-list-implementation-part-1/)
* [Linked List Implementation | Part 2](https://www.techiedelight.com/linked-list-implementation-part-2/)
* [Insertion in BST](https://www.techiedelight.com/insertion-in-bst/)
* [Search given key in BST](https://www.techiedelight.com/search-given-key-in-bst/)
* [Deletion from BST](https://www.techiedelight.com/deletion-from-bst/)
* [Stack](https://www.techiedelight.com/stack-implementation/)
* [Queue](https://www.techiedelight.com/circular-queue-implementation-c/)
* [Min Heap and Max Heap](https://www.techiedelight.com/min-heap-max-heap-implementation-c/)
* [Graph Implementation using STL](https://www.techiedelight.com/graph-implementation-using-stl/)
* [Graph Implementation in C++ without using STL](https://www.techiedelight.com/graph-implementation-c-without-using-stl/)
* [Trie Implementation | Insert, Search and Delete](https://www.techiedelight.com/trie-implementation-insert-search-delete/)
* [Memory efficient Trie Implementation using Map | Insert, Search and Delete](https://www.techiedelight.com/memory-efficient-trie-implementation-using-map-insert-search-delete/)
* [Backtracking](https://www.techiedelight.com/Category/backtracking/)
* [Dynamic Programming](https://www.techiedelight.com/Category/dynamic-programming/)
* [Divide & Conquer](https://www.techiedelight.com/Category/divide-conquer/)
* [Greedy Algorithms](https://www.techiedelight.com/list-of-problems/#Greedy)
* [Hashing](https://www.techiedelight.com/Tags/hashing/)
* [Recursion](https://www.techiedelight.com/Tags/recursion/)
  * Exponentiation by Squaring
  * KMP Algorithm
  * Regular Expressions
  * Sieve of Eratosthenes (deterministic)
  * For any number n, incrementally testing upto sqrt(n) (deterministic)
  * Fermat primality test and Miller–Rabin primality test(both are nondeterministic)
* [Lee algorithm | Shortest path in a Maze](https://www.techiedelight.com/lee-algorithm-shortest-path-in-a-maze/)
* [Flood fill Algorithm](https://www.techiedelight.com/flood-fill-algorithm/)
* [Floyd’s Cycle Detection Algorithm](https://www.techiedelight.com/detect-cycle-linked-list-floyds-cycle-detection-algorithm/)
* [Kadane’s algorithm](https://www.techiedelight.com/maximum-subarray-problem-kadanes-algorithm/)
* [Longest Increasing Subsequence](https://www.techiedelight.com/longest-increasing-subsequence/)
* [Inorder Tree Traversal](https://www.techiedelight.com/inorder-tree-traversal-iterative-recursive/)
* [Preorder Tree Traversal](https://www.techiedelight.com/preorder-tree-traversal-iterative-recursive/)
* [Postorder Tree Traversal](https://www.techiedelight.com/postorder-tree-traversal-iterative-recursive/)
* [Topological Sorting in a DAG](https://www.techiedelight.com/topological-sorting-dag/)
* [Disjoint-Set Data Structure (Union-Find Algorithm)](https://www.techiedelight.com/disjoint-set-data-structure-union-find-algorithm/)
* [Kruskal’s Algorithm for finding Minimum Spanning Tree](https://www.techiedelight.com/kruskals-algorithm-for-finding-minimum-spanning-tree/)
* [Single-Source Shortest Paths — Dijkstra’s Algorithm](https://www.techiedelight.com/single-source-shortest-paths-dijkstras-algorithm/)
* [All-Pairs Shortest Paths — Floyd Warshall Algorithm](https://www.techiedelight.com/pairs-shortest-paths-floyd-warshall-algorithm/)
* Kadane's Algorithm
* Knapsack Problem
* HackerRank Language Proficienc

## C

* "Hello World!" in C
* Playing With Characters
* Sum and Difference of Two Numbers
* Functions in C
* Pointers in C
* Conditional Statements in C
* For Loop in C
* Sum of Digits of a Five Digit Number
* Bitwise Operators
* Printing Pattern using Loops
* 1D Arrays in C
* Array Reversal
* Printing Tokens
* Digit Frequency
* Dynamic Array in C
* Calculate the Nth term
* Students Marks Sum
* Sorting Array of Strings
* Permutations of Strings
* Variadic functions in C
* Querying the Document
* Boxes through a Tunnel
* Small Triangles, Large Triangles
* Post Transition
* Structuring the Document

## C++

* Say "Hello, World!" With C++
* Input and Output
* Basic Data Types
* Conditional Statements
* Functions
* Pointer
* Arrays Introduction
* Variable Sized Arrays
* Attribute Parser
* StringStream
* Strings
* Structs
* Class
* Classes and Objects
* Box It!
* Inherited Code
* Exceptional Server
* Virtual Functions
* Abstract Classes - Polymorphism
* Vector-Sort
* Vector-Erase
* Lower Bound-STL
* Sets-STL
* Maps-STL
* Print Pretty
* Deque-STL
* Inheritance Introduction
* Hotel Prices
* Cpp exception handling
* Rectangle Area
* Multi Level Inheritance
* Overloading Ostream Operator
* Messages Order
* Accessing Inherited Functions
* Magic Spells
* C++ Class Templates
* Preprocessor Solution
* Operator Overloading
* Overload Operators
* Attending Workshops
* C++ Class Template Specialization
* C++ Variadics
* Bit Array

## Java

* Welcome to Java!
* Java Stdin and Stdout I
* Java If-Else
* Java Stdin and Stdout II
* Java Loops I
* Java Loops II
* Java Datatypes
* Java End-of-file
* Java Static Initializer Block
* Java Int to String
* Java Date and Time
* Java Currency Formatter
* Java Strings Introduction
* Java Substring
* Java Substring Comparisons
* Java String Reverse
* Java Anagrams
* Java String Tokens
* Pattern Syntax Checker
* Java Regex
* Java Regex 2 - Duplicate Words
* Valid Username Regular Expression
* Tag Content Extractor
* Java BigDecimal
* Java Primality Test
* Java BigInteger
* Java 1D Array
* Java 2D Array
* Java Subarray
* Java Arraylist
* Java 1D Array (Part 2)
* Java List
* Java Map
* Java Stack
* Java Hashset
* Java Generics
* Java Comparator
* Java Sort
* Java Dequeue
* Java BitSet
* Java Priority Queue
* Java Inheritance I
* Java Inheritance II
* Java Abstract Class
* Java Interface
* Java Method Overriding
* Java Method Overriding 2 (Super Keyword)
* Java Instanceof keyword
* Java Iterator
* Java Exception Handling (Try-catch)
* Java Exception Handling
* Java Varargs - Simple Addition
* Java Reflection - Attributes
* Can You Access?
* Prime Checker
* Java Factory Pattern
* Java Singleton Pattern
* Java Visitor Pattern
* Java Annotations
* Covariant Return Types
* Java Lambda Expressions
* Java MD5
* Java SHA-256

## Python

* Say "Hello, World!" With Python
* Python If-Else
* Arithmetic Operators
* Python: Division
* Write a function
* Print Function
* List Comprehensions
* Find the Runner-Up Score!
* Nested Lists
* Finding the percentage
* Lists
* Tuples
* sWAP cASE
* String Split and Join
* What's Your Name?
* Mutations
* Find a string
* String Validators
* Text Alignment
* Text Wrap
* Designer Door Mat
* String Formatting
* Alphabet Rangoli
* Capitalize!
* The Minion Game
* Merge the Tools!
* itertools.product()
* collections.Counter()
* itertools.permutations()
* Polar Coordinates
* Introduction to Sets
* DefaultDict Tutorial
* Calendar Module
* Exceptions
* Collections.namedtuple()
* Time Delta
* Find Angle MBC
* No Idea!
* Collections.OrderedDict()
* Symmetric Difference
* itertools.combinations()
* Incorrect Regex
* Set .add()
* itertools.combinations_with_replacement()
* Word Order
* Set .discard(), .remove() & .pop()
* Collections.deque()
* Compress the String!
* Company Logo
* Set .union() Operation
* Piling Up!
* Triangle Quest 2
* Iterables and Iterators
* Set .intersection() Operation
* Mod Divmod
* Power - Mod Power
* Maximize It!
* Set .difference() Operation
* Integers Come In All Sizes
* Set .symmetric_difference() Operation
* Set Mutations
* Triangle Quest
* The Captain's Room
* Check Subset
* Check Strict Superset
* Classes: Dealing with Complex Numbers
* Class 2 - Find the Torsional Angle
* Zipped!
* Input()
* Python Evaluation
* Athlete Sort
* Any or All
* ginortS
* Detect Floating Point Number
* Map and Lambda Function
* Re.split()
* Validating Email Addresses With a Filter
* Group(), Groups() & Groupdict()
* Reduce Function
* Re.findall() & Re.finditer()
* Re.start() & Re.end()
* Regex Substitution
* Validating Roman Numerals
* Validating phone numbers
* Validating and Parsing Email Addresses
* Hex Color Code
* HTML Parser - Part 1
* HTML Parser - Part 2
* Detect HTML Tags, Attributes and Attribute Values
* XML 1 - Find the Score
* Validating UID
* Validating Credit Card Numbers
* XML2 - Find the Maximum Depth
* Standardize Mobile Number Using Decorators
* Validating Postal Codes
* Decorators 2 - Name Directory
* Matrix Script
* Words Score
* Arrays
* Shape and Reshape
* Default Arguments
* Transpose and Flatten
* Concatenate
* Zeros and Ones
* Eye and Identity
* Array Mathematics
* Floor, Ceil and Rint
* Sum and Prod
* Min and Max
* Mean, Var, and Std
* Dot and Cross
* Inner and Outer
* Polynomials
* Linear Algebra

## Bash Linux

* Let's Echo
* Looping and Skipping
* A Personalized Echo
* Looping with Numbers
* Comparing Numbers
* Getting started with conditionals
* More on Conditionals
* Arithmetic Operations
* Compute the Average
* Functions and Fractals - Recursive Trees - Bash!
* Cut #1
* Cut #2
* Cut #3
* Cut #4
* Cut #5
* Cut #6
* Cut #7
* Cut #8
* Cut #9
* Head of a Text File #1
* Head of a Text File #2
* Middle of a Text File
* Tail of a Text File #1
* Tail of a Text File #2
* Tr' Command #1
* Tr' Command #2
* Tr' Command #3
* Sort Command #1
* Sort Command #2
* Sort Command #3
* Sort Command #4
* Sort Command #5
* Sort' command #6
* Sort' command #7
* Uniq' Command #1
* Uniq' Command #2
* Uniq' command #3
* Uniq' command #4
* Paste - 3
* Paste - 4
* Paste - 1
* Paste - 2
* Read in an Array
* Slice an Array
* Filter an Array with Patterns
* Concatenate an array with itself
* Display an element of an array
* Count the number of elements in an Array
* Remove the First Capital Letter from Each Element
* Lonely Integer - Bash!
* Awk' - 3
* Awk' - 4
* Grep' #1
* Grep' #2
* Grep' #3
* Grep' - A
* Grep' - B
* Sed' command #1
* Sed' command #2
* Sed' command #3
* Sed' command #4
* Sed' command #5
* Awk' - 1
* Awk' - 2

## Functional Programming

* Solve Me First FP
* Hello World
* Hello World N Times
* List Replication
* Filter Positions in a List
* Array Of N Elements
* Reverse a List
* Sum of Odd Elements
* List Length
* Update List
* Evaluating e^x
* Area Under Curves and Volume of Revolving a Curve
* Lambda Calculus - Reductions #1
* Lambda Calculus - Reductions #2
* Lambda Calculus - Reductions #3
* Lambda Calculus - Reductions #4
* Lambda Calculus - Evaluating Expressions #1
* Lambda Calculus - Evaluating Expressions #2
* Lambda Calculus - Evaluating Expressions #3
* Lambda Calculus - Evaluating Expressions #4
* Lambda Calculus - Evaluating Expressions #5
* Functions or Not?
* Compute the Perimeter of a Polygon
* Compute the Area of a Polygon
* Computing the GCD
* Fibonacci Numbers
* Pascal's Triangle
* Functions and Fractals: Sierpinski triangles
* String Mingling
* String-o-Permute
* Functions and Fractals - Recursive Trees
* Convex Hull
* String Compression
* Crosswords-101
* Prefix Compression
* String Reductions
* Super-Queens on a Chessboard
* The Sums of Powers
* Sequence full of colors
* Filter Elements
* Super Digit
* The Tree Of Life
* Concave Polygon
* Swap Nodes
* Matrix Rotation
* Valid BST
* Lists and GCD
* Prison Transport
* Substring Searching
* Order exercises
* John and Fences
* Range Minimum Query
* Stock Prediction
* Mirko at the Construction Site
* Tree manager
* Fighting Armies
* Number of Binary Search Tree
* Pentagonal Numbers
* Bitter Chocolate
* Fibonacci
* Reverse Factorization
* Different Ways
* Dice Path
* Bangalore Bank
* Sherlock and the Maze
* Password Cracker FP
* Expressions
* Klotski
* Minimum Multiple
* Messy Medians
* Boleyn Salary
* Jumping Bunnies
* Rotate String
* Remove Duplicates
* Huge GCD
* Kundu And Bubble Wrap
* Missing Numbers (FP)
* Common Divisors
* Mangoes
* Game of Kyles
* Subset Sum
* Elementary Watson
* Captain Prime
* Puzzle and PC
* [Approximate Challenge] Convolutional Coding
* Expressions V2
* Simplify the Algebraic Expressions
* While Language
* Intuitive language
* Down With Abstractions
* Infer
* BrainF__k interpreter

* Rosetta Code (make folder)
  * Datasets
    * Iris Flowers Dataset
    * Boston House Price Dataset
    * Wine Quality Dataset
    * Swedish Auto Insurance Dataset.
    * Sonar Dataset
    * Abalone Dataset.
    * Ionosphere Dataset.
    * Wheat Seeds Dataset.
    * Facial Image Dataset
    * HotpotQA
    * US Census Data (1990) Data Set
    * Banknote Authentication Dataset
    * Pima Indians Diabetics Dataset
    * Breast Cancer Wisconsin (Diagnostic) Data Set
    * BBCSport Dataset
    * Twitter Sentiment Analysis Dataset
    * BBC News Datasets
    * Amazon Reviews Dataset
    * Spam SMS Classifier Dataset
    * The Chars74K Dataset
    * MNIST
    * WordNet
    * CIFAR-10
    * Fashion-MNIST
    * IMDB Reviews
    * Twenty Newsgroups
    * Sentiment140
    * Yelp Reviews
    * Wikipedia Corpus
    * Open Subtitles
    * Free Spoken Digit Dataset
* [Machine Translation of Various Languages](http://statmt.org/wmt18/index.html)
  * Visualizations
    * Basis Vectors
    * Unit Circle
    * Linear transformations 2D
    * Other Ideas and Resources for RosettaProject
    * eert: reconstruct file tree from output of tre
    * → replacement for tree with lines to look good with nerd font → call it tre (arbor, dendron, boom, baum, drevo PIE doru) ‣ ← multilingual* → make configurable
* collect mathematical algorithms / projects / etc for ppp
* [dlang.org/](https://dlang.org/) → see list of projects for PPP
* [duckduckgo.com/?q=list if cool new github projects&ko=-1&ia=web](https://duckduckgo.com/?q=list%20if%20cool%20new%20github%20projects&ko=-1&ia=web)
* [Haskell by Example](https://lotz84.github.io/haskellbyexample/)
* [Go by Example](https://gobyexample.com/)
* [(3) Best practices for folder structures of C projects containing hundreds of source code files? : C_Programming](https://www.reddit.com/r/C_Programming/comments/tt0q0n/best_practices_for_folder_structures_of_c/)
* [snark c - What exactly happens when a header file is included? - Stack Overflow](https://stackoverflow.com/questions/24483848/what-exactly-happens-when-a-header-file-is-included)
* [openssl/openssl: TLS/SSL and crypto library](https://github.com/openssl/openssl)
* [pantuza/c-project-template: A C project template with Makefile, command line options parsing, unittest using cmocka and valgrind](https://github.com/pantuza/c-project-template)
* [good structure example lemire/clhash: C library implementing the ridiculously fast CLHash hashing function](https://github.com/lemire/clhash)
* [oz123/awesome-c: A curated list of awesome C frameworks, libraries, resources and other shiny things. Inspired by all the other awesome-... projects out there.](https://github.com/oz123/awesome-c)
* [ Regular Expression Engine Comparison Chart](https://gist.github.com/CMCDragonkai/6c933f4a7d713ef712145c5eb94a1816)
* [darrenaustin/advent-of-code-dart: Darren's solutions to the Advent of Code puzzles in Dart.](https://github.com/darrenaustin/advent-of-code-dart)
* [ICS-33](https://www.ics.uci.edu/~pattis/ICS-33/)
* [luabyexample.techplexlabs.com/](https://luabyexample.techplexlabs.com/)
* [luabyexample.netlify.app/](https://luabyexample.netlify.app/)
* [r/cpp/comments/13ui5fi/how_to_setup_run_and_debug_a_c_file_with_cmake_in](https://www.reddit.com/r/cpp/comments/13ui5fi/how_to_setup_run_and_debug_a_c_file_with_cmake_in)
* [Software | nand2tetris](https://www.nand2tetris.org/software)
* [pytorch-template · GitHub Topics](https://github.com/topics/pytorch-template)
* [github pytorch template project at DuckDuckGo](https://duckduckgo.com/?q=github+pytorch+template+project&ia=web)
* [victoresque/pytorch-template: PyTorch deep learning projects made easy.](https://github.com/victoresque/pytorch-template)
* [hunterlew/pytorch_template: Easy project templates for pytorch learners](https://github.com/hunterlew/pytorch_template)
* [moemen95/Pytorch-Project-Template: A scalable template for PyTorch projects, with examples in Image Segmentation, Object classification, GANs and Reinforcement Learning.](https://github.com/moemen95/Pytorch-Project-Template)
* add gui graphing calculator to ppp
* PPP: look at Learn to Code by Solving Problems (Python)
* collect various docs on regex
* [hyperpolyglot.org/c#regexes](https://hyperpolyglot.org/c#regexes)
* [algorithm-archivists/algorithm-archive: A collaborative book on algorithms](https://github.com/algorithm-archivists/algorithm-archive)
* [How to Contribute · algorithm-archivists/algorithm-archive Wiki](https://github.com/algorithm-archivists/algorithm-archive/wiki/How-to-Contribute)
* [Algorithm Archive · Arcane Algorithm Archive](https://www.algorithm-archive.org/)
* Codility Password: 92458592458
* rosettaCode Yelircaasi
* [1 Problem, 24 Programming Languages](https://youtu.be/U6I-Kwj-AvY)
* [proglib.io/p/40-proektov-na-python-dlya-novichkov-i-prodvinutyh-razrabotchikov-2022-05-13](https://proglib.io/p/40-proektov-na-python-dlya-novichkov-i-prodvinutyh-razrabotchikov-2022-05-13)
* [danistefanovic/build-your-own-x](https://github.com/danistefanovic/build-your-own-x)

## ML → See sklearn docs

* rosetta-projects: incorporate Modern C++ Challenge
* rosetta-projects: also use Go by Example and Haskell by Example
* Lang Priority Lis
  * Pytho
  *
  * bas
  * Rus
  * G
  * C++
  * Java 1
  * Java 1
  * Haskel
  * CommonLis
  * Lu
  * Juli
  * TypeScrip
  * JavaScrip
  * Dar
  *
  * zs
  * Python + Cpp via pybind1
  * Lua +
  * Python + Rust via PyO3
* parallang
  * Create a website with a giant table to compare programming languages.
  * Each row is some (relatively universal) feature or aspect of programming languages.
  * Source     code for the website is a markdown file for each language and builder    code (heavily template-based) to generate html+css+js, as well as    interact with the source (e.g. add a row to all files, with default    "\<to be added...\>" placeholder).
  * Languages     should be selectable, as should feature categories and features. The    table should then be exportable in different formats.
  * The site should also support custom theming.
  * make interactive website where it is possible to pick languages to compare - like hyperpolyglot, but with an interactive component8
  * also add links to projects
* [ ]  [Sourcetrail](https://www.sourcetrail.com/) - Sourcetrail is a free and open-source cross-platform source explorer that helps you get productive on unfamiliar source code.
* [examples.raku.org/index.html](https://examples.raku.org/index.html)
* [yrwq/ccc](https://github.com/yrwq/ccc) - good parallel code project - add similar thing!

## Tree

-> also make it take and output JSON, YAML, lists of paths (with different separators)

https://github.com/quux00/tree
https://github.com/kddnewton/tree
https://github.com/a8m/tree
https://oldmanprogrammer.net/source.php?dir=projects/tree
https://github.com/dduan/tre
https://github.com/jberryman/directory-tree
https://github.com/kroitor/asciichart?tab=readme-ov-file#ports $$$$$$$$$

